schema {
  query: RootQueryType
  mutation: RootMutationType
  subscription: RootSubscriptionType
}

"""Represents the current Patron Account info"""
type Account {
  """Balances"""
  balances: Balances

  """DGE Uniform Patron Identifier"""
  dupi: String

  """User's email address"""
  email: String

  """First Name"""
  firstName: String

  """Available free bets"""
  freeBets: [FreeBet!]

  """Time of previous login"""
  lastLoginAt: DateTime

  """Last Name"""
  lastName: String

  """A deep link to the userâ€™s promotions"""
  promotionsDeepLink: DeepLink!

  """The Interval in which patron will see Reality Check-In pop-up"""
  realityCheckinInterval: Int

  """Whether the customer has pending Responsible Gaming acknowledgements"""
  requiresResponsibleGamingAcknowledgement: Boolean!

  """The Interval in which patron will see Reality Check-In pop-up"""
  showW2gWinModal: Boolean

  """The Amount in cents which patron has spent during this session"""
  spentInSession: Int!

  """User Preferences"""
  userPreferences: UserPreferences

  """Username"""
  username: String

  """A deep link to the deposit page"""
  walletDeepLink: DeepLink!
}

"""
Represents a patron's account history for transactions, payments, casino, and bet history
"""
type AccountHistory {
  """Account history sections"""
  accountHistorySections: [AccountHistorySection!]
}

"""An account history casino game session"""
type AccountHistoryCasinoGameSession implements Node {
  """
  List of groups for displaying totals at the top of an account history casino game session
  """
  accountHistoryTotalsGroups: [AccountHistoryTotalsGroup!]!

  """The amount of money won or lost to display for this session"""
  amount: Money!

  """The date when the game session occurred"""
  date: DateTime!

  """Game provider of the session"""
  gameProvider: String!

  """The ID of an object"""
  id: ID!
  items(
    after: String
    first: Int

    """Opaque token to pass for requesting the next set of items"""
    pageToken: String
  ): AccountHistoryItemConnection

  """
  Label for the account history casino game session. i.e Standard Blackjack
  """
  label: String!

  """Type of account history section"""
  sectionType: AccountHistorySectionType!

  """The session ID of the game"""
  sessionId: ID!
}

"""A deep link to Casino Game Session Account History"""
type AccountHistoryCasinoGameSessionDeepLink implements DeepLink {
  """Casino Game Session Account History details"""
  accountHistoryCasinoGameSession: AccountHistoryCasinoGameSession!

  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

"""Casino game round details"""
type AccountHistoryCasinoRoundDetail implements Node {
  """
  Custom html based game round details. (Only for the Evolution game provider)
  """
  formattedHtml: String

  """The ID of an object"""
  id: ID!
}

"""An item on the account history page"""
type AccountHistoryItem {
  """The amount of money debited or credited to the users wallet"""
  amount: Money!

  """Award description on the item."""
  awardDescription: String

  """The amount of money wagered on a casino game"""
  casinoWagerAmount: Money

  """The date when the transaction item occurred"""
  date: DateTime!

  """
  A deeplink for the account history item. Currently only used when type is casino_wager
  """
  deepLink: DeepLink

  """The label of the account history item"""
  label: String!

  """The receipt ID that represents external ID"""
  receiptId: String

  """The region in which the transaction item occurred"""
  region: String!

  """
  An optional sub label for the account history item. Usually non null on transaction history items
  """
  subLabel: String

  """ID used to identify the transaction"""
  transactionId: ID!

  """The type of account_history_item."""
  type: AccountHistoryItemType!
}

type AccountHistoryItemConnection {
  edges: [AccountHistoryItemEdge]
  pageInfo: PageInfo!

  """Token to pass for pagination"""
  pageToken: String
}

type AccountHistoryItemEdge {
  cursor: String
  node: AccountHistoryItem
}

enum AccountHistoryItemType {
  """Adjustment"""
  ADJUSTMENT

  """Bet"""
  BET

  """Bonus"""
  BONUS

  """Cash Deposit"""
  CASH_DEPOSIT

  """Casino Free Wager"""
  CASINO_FREE_WAGER

  """Casino wagers grouped by session"""
  CASINO_SESSION

  """Casino wager"""
  CASINO_WAGER

  """Deposit"""
  DEPOSIT

  """Free Bet Placed"""
  FREE_BET_PLACED

  """Free Bet Won"""
  FREE_BET_WON

  """Tax Adjustment"""
  TAX_ADJUSTMENT

  """Withdrawal"""
  WITHDRAWAL
}

"""An account history section"""
type AccountHistorySection implements Node {
  """
  List of groups for displaying totals at the top of an account history section
  """
  accountHistoryTotalsGroups(
    """Selected filter id to filter items by (defaults to Last 30 Days)"""
    selectedFilterId: ID
  ): [AccountHistoryTotalsGroup!]!

  """Attributes to display the filter and filter options. Can be null."""
  filter: Filter

  """The ID of an object"""
  id: ID!

  """Indicates which section to render by default"""
  isDefaultSection: Boolean!
  items(
    after: String
    first: Int

    """Opaque token to pass for requesting the next set of items"""
    pageToken: String

    """Selected filter id to filter items by (defaults to Last 30 Days)"""
    selectedFilterId: ID
  ): AccountHistoryItemConnection

  """Label for the account history section"""
  label: String!

  """Type of account history section"""
  sectionType: AccountHistorySectionType!
}

"""A deep link to Account History Section"""
type AccountHistorySectionDeepLink implements DeepLink {
  """Section with accountHistory being deeplinked to"""
  accountHistorySection: AccountHistorySection!

  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

"""Enum of the different types of Account History Sections"""
enum AccountHistorySectionType {
  """Betting section"""
  BETTING

  """Casino section"""
  CASINO

  """Casino game session"""
  CASINO_GAME_SESSION

  """Transaction section"""
  TRANSACTION
}

"""
An account history totals group for displaying different historical totals
"""
type AccountHistoryTotalsGroup {
  """The amount of money to dislpay for this group"""
  amount: Money!

  """A label for the totals group. (ie. Total Wagered or Total Deposits)"""
  description: String!
}

"""Represents a patron's account menu"""
type AccountMenu {
  """List of available free bets"""
  availableFreeBets: [FreeBet!]!

  """Available free wagers count, null if casino is disabled"""
  availableFreeWagersCount: Int

  """Bonus Cash Balance"""
  bonusCashBalance: Money!
  menuShelves: MenuShelves!
}

"""A deep link tot he account menu"""
type AccountMenuDeepLink implements DeepLink {
  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

"""Account Menu Item"""
interface AccountMenuItem {
  """An optional icon to display"""
  icon(
    """Image size params to resize icon"""
    imageSize: ResizableImageSizeParams = {maxHeight: 1024, maxWidth: 1024}
  ): ResizableImage

  """Label of the item"""
  label: String!
}

type AccountMenuItemDeepLink implements DeepLink {
  accountMenuItem: AccountMenuItem!

  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

"""Display type for client controlled menu items"""
enum AccountMenuItemDisplayType {
  """Account menu's label"""
  ACCOUNT_MENU_LABEL

  """App version of the client"""
  APP_VERSION

  """Cool Off"""
  COOL_OFF

  """Daily Time Limit"""
  DAILY_TIME_LIMIT

  """Deposit Limits"""
  DEPOSIT_LIMITS

  """Email Preferences"""
  EMAIL_PREFERENCES

  """Exclude Payment Methods"""
  EXCLUDE_PAYMENT_METHODS

  """Game Alerts setting menu"""
  GAME_ALERTS

  """iGaming Ontario logo"""
  IGO_LOGO

  """Limit History"""
  LIMIT_HISTORY

  """Line Type Modifier Preferences settings menu (starting pitchers)"""
  LINE_TYPE_MODIFIER_PREFERENCES

  """Login Preferences settings menu"""
  LOGIN_PREFERENCES

  """Loss Limits"""
  LOSS_LIMITS

  """Max Single Wager Limit"""
  MAX_SINGLE_WAGER_LIMIT

  """Odds and Line Changes settings menu"""
  ODDS_AND_LINE_CHANGES_PREFERENCES

  """Odds Format settings menu"""
  ODDS_FORMAT

  """Push Preferences settings menu"""
  PUSH_PREFERENCES

  """Reality Check-In Interval"""
  REALITY_CHECKIN_INTERVAL

  """Region"""
  REGION

  """Self Exclusion"""
  SELF_EXCLUSION

  """Send Logs"""
  SEND_LOGS

  """Spend Limits"""
  SPEND_LIMITS

  """Update Password"""
  UPDATE_PASSWORD

  """Upload Documents"""
  UPLOAD_DOCUMENTS
}

"""Account menu shelf for Account Menu"""
type AccountMenuShelf {
  """A collection of items containing account specific details"""
  menuShelfItems: [AccountMenuItem!]!
}

"""Action type"""
enum ActionType {
  """flags that an record should be deleted in a given tab"""
  DELETE

  """flags that an record should be added in a given tab"""
  INSERT

  """flags that an record should be updated in a given tab"""
  UPDATE
}

"""Where the market should align"""
enum Alignment {
  """Away"""
  AWAY

  """Home"""
  HOME

  """Tie"""
  TIE
}

enum AnalyticsType {
  """used to represent account page"""
  ACCOUNT

  """used to represent exclusive and odds boosts pages"""
  BOOSTS

  """used to represent home page"""
  HOME

  """used for competition pages"""
  LEAGUE

  """used to represent market card page - event page -> See all lines"""
  LINES

  """used to represent live page"""
  LIVE

  """used to represent casino lobby page"""
  LOBBY

  """used to represent an event page"""
  MATCH

  """used to represent promotions page"""
  PROMO

  """used to represent search page"""
  SEARCH
}

"""Supported app variants"""
enum App {
  """Barstool Sportsbook"""
  BSSB

  """Invalid app variant"""
  INVALID

  """theScore Bet"""
  TSB

  """theScore Media"""
  TSM
}

"""Representing metadata for Sportsbook clients"""
type ApplicationMetadata {
  """
  Minutes of activity before prompting the customer how long they've been active
  """
  activityThresholdMinutes: Int!

  """
  Boolean representing whether casino transition animation is always enabled
  """
  alwaysShowCasinoAnimation: Boolean!

  """App version"""
  appVersion: AppVersion!

  """
  Boolean representing whether biometric authentication is enabled or disabled
  """
  biometricAuthenticationEnabled: Boolean!

  """
  Boolean representing whether casino is enabled or disabled on the application
  """
  casinoEnabled: Boolean!

  """
  Maximum amount of time to wait for custom dialog (cd) response in milliseconds
  """
  cdTimeout: Int!

  """Current server time"""
  currentTime: DateTime!

  """Download app URL"""
  downloadAppUrl: String!

  """
  Maximum amount of time to wait for feature flag service (ffs) response in milliseconds
  """
  ffsTimeout: Int!

  """Force update the application"""
  forceUpdate: Boolean!

  """
  Heartbeat interval in seconds. Assist in determining how many hours a user has used the app
  """
  heartbeatIntervalSeconds: Int!

  """Minutes of inactivity before logging out the customer"""
  inactivityThresholdMinutes: Int!

  """Key value pair that logos should be blocklisted on"""
  logosBlocklist: [LogosBlocklist!]!

  """
  Number of seconds to wait before checking IP address after a network change
  """
  networkChangeBufferSeconds: Int!

  """Platform of application"""
  platform: Platform!

  """
  Maximum amount of time to wait for remote experimentation framework (ref) response in milliseconds
  """
  refTimeout: Int!

  """Elasticsearch debounce interval in milliseconds"""
  searchDebounceIntervalMilliseconds: Int!

  """Toolbar icon to show based on the state/region"""
  toolbarIcon(
    """Image size params to resize responsibleGamingImage"""
    imageSize: ResizableImageSizeParams = {maxHeight: 1024, maxWidth: 1024}
  ): ResizableImage!

  """
  Toolbar mode defines how the toolbar looks at the top of the application
  """
  toolbarMode: ToolbarMode!
}

"""Represents application version (MAJOR.MINOR.PATCH)"""
scalar AppVersion

"""Represents a free bet that is available and can be used on a DraftBet"""
type AvailableFreeBet {
  """Amount that this free bet can be used for"""
  freeBetAmount: Money!

  """Unique identifier for this free bet"""
  id: ID!
}

union Award = BarstoolLegacyBonusCash | BonusCash | CashDeposit | FreeBet | FreeWager

type AwardConnection {
  edges: [AwardEdge]
  pageInfo: PageInfo!
}

"""An award details section"""
type AwardDetailsSection implements Node {
  """Footer buttons for the award detail section"""
  footerButtons: [FooterButton]!

  """The ID of an object"""
  id: ID!

  """Label for the award detail section"""
  label: String!

  """List of paginated awards"""
  paginatedItems(after: String, first: Int): AwardConnection

  """Type of award detail section"""
  sectionType: AwardDetailsSectionType!
}

"""Possible footer button types for award details section"""
enum AwardDetailsSectionButtonType {
  """For listing promotions"""
  PRIMARY

  """For listing casino awards"""
  SECONDARY
}

"""A deep link to a reward details section"""
type AwardDetailsSectionDeepLink implements DeepLink {
  """Resolvers deep link for awards detail section"""
  awardDetailsSection: AwardDetailsSection!

  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

enum AwardDetailsSectionType {
  """Bonuses section"""
  BONUSES

  """Free Bets section"""
  FREE_BETS

  """Free Wagers section"""
  FREE_WAGERS

  """History section"""
  HISTORY
}

type AwardEdge {
  cursor: String
  node: Award
}

"""Awards menu shelf for Account Menu"""
type AwardsMenuShelf {
  """Bonus Cash deep link"""
  bonusCashDeepLink: AwardDetailsSectionDeepLink!

  """Free Bets deep link"""
  freeBetsDeepLink: AwardDetailsSectionDeepLink!

  """Free Wagers deep link, null if casino is disabled"""
  freeWagersDeepLink: AwardDetailsSectionDeepLink
}

"""Awards panel"""
type AwardsPanel {
  """Awards sections"""
  awardsSections: [AwardDetailsSection!]!
}

"""Type of badge to display (may be multiple)"""
enum BadgeType {
  """Exclusive"""
  EXCLUSIVE

  """Featured"""
  FEATURED

  """New"""
  NEW
}

"""Balances"""
type Balances {
  """Bonus Balance"""
  bonusBalance: Money

  """Global Balance"""
  globalBalance: Money!

  """ID of balances object"""
  id: ID!

  """Playable Balance"""
  playableBalance: Money!

  """Restricted Balance"""
  restrictedBalance: Money!

  """Withdrawable Balance"""
  withdrawableBalance: Money!
}

"""Barstool legacy bonus cash award belonging to the user"""
type BarstoolLegacyBonusCash {
  """Amount awarded to the user"""
  amount: Money!

  """Awarded datetime in UTC (ex: 2019-10-11T06:59:59Z)"""
  awardedDatetime: DateTime

  """Expiry datetime in UTC (ex: 2019-10-11T06:59:59Z)"""
  expiryDatetime: DateTime

  """Unique identifier for the barstool legacy bonus cash"""
  id: ID!

  """A label to describe the award"""
  label: String!

  """Redeem datetime in UTC (ex: 2019-10-11T06:59:59Z)"""
  redeemDatetime: DateTime

  """Barstool Legacy Bonus Cash Status"""
  status: BarstoolLegacyBonusCashStatus!
}

"""Possible values for the status of a Barstool Legacy Bonus Cash Award"""
enum BarstoolLegacyBonusCashStatus {
  """The award has expired"""
  EXPIRED

  """User has fully redeemed the award"""
  REDEEMED
}

"""Baseball event statistics"""
type BaseballEventStatistics implements EventStatistics {
  """Away score for the event"""
  awayScore: Int!

  """Balls"""
  balls: Int

  """First base occupied"""
  firstBaseOccupied: Boolean

  """Home score for the event"""
  homeScore: Int!

  """Boolean indicating whether the event is in play"""
  isInPlay: Boolean!

  """Outs"""
  outs: Int

  """Progress for the event e.g. half + inning in baseball"""
  progress: String

  """Second base occupied"""
  secondBaseOccupied: Boolean

  """Segments for the event e.g. innings, quarters"""
  segments: [Segment!]!

  """Strikes"""
  strikes: Int

  """Third base occupied"""
  thirdBaseOccupied: Boolean
}

"""Basketball event statistics"""
type BasketballEventStatistics implements EventStatistics {
  """Away score for the event"""
  awayScore: Int!

  """Home score for the event"""
  homeScore: Int!

  """Boolean indicating whether the event is in play"""
  isInPlay: Boolean!

  """Progress for the event e.g. half + inning in baseball"""
  progress: String

  """Segments for the event e.g. innings, quarters"""
  segments: [Segment!]!
}

"""Beach volleyball event statistics"""
type BeachVolleyballEventStatistics implements EventStatistics {
  """Away score for the event"""
  awayScore: Int!

  """Current server"""
  currentServer: ParticipantAlignment

  """Home score for the event"""
  homeScore: Int!

  """Boolean indicating whether the event is in play"""
  isInPlay: Boolean!

  """Progress for the event e.g. half + inning in baseball"""
  progress: String

  """Segments for the event e.g. innings, quarters"""
  segments: [Segment!]!
}

"""Object containing details of an open or settled bet"""
type BetHistoryAction {
  """the bet object to be used in the action"""
  bet: PlacedBet

  """the id of a bet to be used in a given action (without namespace)"""
  rawBetId: String!

  """in which tab the action should be taken"""
  tab: BetHistorySectionType!

  """the type of the action"""
  type: ActionType!
}

"""A deep link to bet history"""
type BetHistoryDeepLink implements DeepLink {
  """BetHistory Page"""
  betHistoryPage: BetHistoryPage!

  """Bet History Section this deepLink is pointing to"""
  betHistorySection: BetHistorySection!

  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

"""Bet history of an account"""
type BetHistoryPage {
  """List of bet history sections"""
  betHistorySections: [BetHistorySection!]!
}

"""Bet history section"""
type BetHistorySection implements Node {
  """Attributes to display the filter and filter options"""
  filter: Filter

  """The ID of an object"""
  id: ID!

  """Indicates which section to render by default"""
  isDefaultSection: Boolean!

  """Paginated list of items to be displayed"""
  items(
    after: String
    first: Int

    """Selected filter range to filter items by. Defaults to 'last 24 hours'"""
    selectedFilterId: String = "today_and_yesterday"
  ): PlacedBetConnection

  """Label for the section"""
  label: String!

  """Type of section"""
  type: BetHistorySectionType!
}

"""Bet history section type"""
enum BetHistorySectionType {
  """Open bet, open for adjustments"""
  OPEN

  """Settled bet, closed for adjustments"""
  SETTLED
}

"""Bet outcome"""
enum BetOutcome {
  """Cash out"""
  CASH_OUT

  """Unknown bet outcome"""
  INVALID

  """Loss"""
  LOSS

  """Patron Cancelled - effectively a Patron-driven void"""
  PATRON_CANCELLED

  """Pending"""
  PENDING

  """Push"""
  PUSH

  """Refund"""
  REFUND

  """Voided"""
  VOIDED

  """Win"""
  WIN
}

"""Represents a patron's betslip"""
type Betslip {
  """Errors to be displayed at the betslip level"""
  errors: [BetslipError!]!

  """Generated at timestamp in POSIX time"""
  generatedAt: DateTime!

  """Betslip id"""
  id: ID!

  """List of patron's market selections"""
  marketSelections: [MarketSelection!]!

  """Metadata around market selections in the betslip"""
  marketSelectionsMetadata: [MarketSelectionMetadata!]!

  """Number of selections"""
  numberOfSelections: Int!

  """Parlay section"""
  parlay: BetslipParlay!

  """The values for the quick bet buttons"""
  quickBetAmounts: [Money!]!

  """Straight section"""
  straight: BetslipStraight!

  """Teaser section"""
  teaser: BetslipTeaser!
}

"""Represents any betslip error"""
type BetslipError {
  """Error code to identify the error"""
  code: String!

  """Display Type for the error"""
  displayType: BetslipErrorDisplayType!

  """Display copy to show to the patron"""
  message: String!

  """Error priority to determine display priority"""
  priority: Int!
}

"""Possible display types for a betslip error"""
enum BetslipErrorDisplayType {
  """Anonymous patron is in a region that theScore Bet doesn't operate in"""
  ANONYMOUS_REGION_ERROR

  """Bet amount error"""
  BET_AMOUNT

  """Bet and win amount error"""
  BET_WIN_AMOUNT

  """Request to deposit more funds error"""
  DEPOSIT

  """Generic/default error display type"""
  GENERIC

  """Geo error"""
  GEO

  """Invalid display type"""
  INVALID

  """Odds on the selection have changed error"""
  ODDS_CHANGED

  """Responsible gaming deposit ack required"""
  RG_ACK_REQUIRED

  """Responsible gaming limit error"""
  RG_LIMIT

  """The draft leg/market selection is invalid error"""
  SELECTION_DISABLED

  """Win amount error"""
  WIN_AMOUNT
}

"""Represents Betslip Parlays UI"""
type BetslipParlay {
  """
  Draft bets for the parlay, currently we only support one draft bet for a parlay
  """
  draftBets: [DraftBet!]!

  """Errors to be displayed for all Parlays"""
  errors: [BetslipError!]!

  """Deeplink to open the betslip on TSB on parlay tab"""
  openBetslipOnTsbDeepLink: OpenBetslipOnTsbDeepLink

  """Sum of all bet amounts on parlays"""
  totalBetAmount: Money!

  """Sum of all potential return amounts on parlays, nil if still computing"""
  totalPotentialReturnAmount: Money

  """
  Sum of all potential winning amounts on parlays, nil if still computing
  """
  totalPotentialWinAmount: Money
}

"""Object that holds the response for the Place Bets mutation"""
type BetslipPlaceBetsResult {
  """
  Current state of the betslip - includes draftBets that failed to be placed
  """
  betslip: Betslip!

  """List of bets that have been placed"""
  placedBets: [PlacedBet!]
}

"""Represents Betslip Straights UI"""
type BetslipStraight {
  """Group draft bets based on their event"""
  draftBetEventGroupings: [DraftBetEventGrouping!]!

  """List of Straight draft bets"""
  draftBets: [DraftBet!]!

  """Errors to be displayed for all Straights"""
  errors: [BetslipError!]!

  """Deeplink to open the betslip on TSB on straight tab"""
  openBetslipOnTsbDeepLink: OpenBetslipOnTsbDeepLink

  """Sum of all bet amounts on straights"""
  totalBetAmount: Money!

  """
  Sum of all potential return amounts on straights, nil if still computing
  """
  totalPotentialReturnAmount: Money

  """
  Sum of all potential winning amounts on straights, nil if still computing
  """
  totalPotentialWinAmount: Money
}

"""Tab that appear on a betslip"""
enum BetslipTab {
  """Parlay tab"""
  PARLAY

  """Straight tab"""
  STRAIGHT

  """Teaser tab"""
  TEASER
}

"""Represents Betslip Teasers UI"""
type BetslipTeaser {
  """List of teaser draft bets"""
  draftBets: [TeaserDraftBet!]!

  """Errors to be displayed for all Teasers"""
  errors: [BetslipError!]!

  """Deeplink to open the betslip on TSB on teaser tab"""
  openBetslipOnTsbDeepLink: OpenBetslipOnTsbDeepLink

  """Sum of all bet amounts on teasers"""
  totalBetAmount: Money!

  """Sum of all potential return amounts on teasers, nil if still computing"""
  totalPotentialReturnAmount: Money

  """
  Sum of all potential winning amounts on teasers, nil if still computing
  """
  totalPotentialWinAmount: Money
}

"""Bet status"""
enum BetStatus {
  """Cancelled"""
  CANCELLED

  """Unknown bet status"""
  INVALID

  """Open"""
  OPEN

  """Settled"""
  SETTLED

  """Voided"""
  VOIDED
}

"""A Betting News component"""
type BettingNews {
  """Deeplink to show more betting news"""
  deepLink: DeepLink

  """Betting News label"""
  label: String

  """Maximum number of items to be shown"""
  limit: Int!
}

"""Bet type"""
enum BetType {
  """Unknown bet type"""
  INVALID

  """Multiple-leg bet"""
  PARLAY

  """Multiple-leg bet where at least two legs are from the same event"""
  PARLAY_PLUS

  """Single-leg bet"""
  STRAIGHT

  """
  Multiple-leg bet in which each line is moved by a designated amount of points in the patron's favor
  """
  TEASER
}

"""An amount of cash a customer can use to place bets"""
type BonusCash {
  """Amount"""
  amount: Money!

  """A descriptive label for cash back details"""
  cashBackDetailsLabel: String!

  """A title for cash back"""
  cashBackTitle: String!

  """Effective datetime in UTC (ex: 2019-10-11T06:59:59Z)"""
  effectiveDatetime: DateTime

  """Expiry datetime in UTC (ex: 2019-10-11T06:59:59Z)"""
  expiryDatetime: DateTime

  """Unique identifier for the bonus cash"""
  id: ID!

  """A label to describe the bonus cash"""
  label: String!

  """DeepLink for the playthrough details"""
  playthroughDetailsDeepLink: WebDeepLink!

  """
  Redeem datetime, Date Bonus Cash was redeemed in UTC (ex: 2019-10-11T06:59:59Z)
  """
  redeemDatetime: DateTime

  """Indicates if the progress bar should be shown or not"""
  showProgressBar: Boolean!

  """Bonus Cash Status"""
  status: BonusCashStatus!

  """Deep Link to the Terms and Conditions"""
  termsAndConditions: WebDeepLink

  """Amount of unused bonus cash balance"""
  unusedAmount: Money!
}

"""Possible values for the status of a Bonus Cash"""
enum BonusCashStatus {
  """Bonus Cash has been awarded to user but has not been redeemed"""
  AVAILABLE

  """The Bonus Cash has expired and can no longer be committed"""
  EXPIRED

  """The Bonus Cash is pending"""
  PENDING

  """User has redeemed the Bonus Cash"""
  REDEEMED
}

"""Object representing a buy point marketSelection for a single leg"""
type BuyPointOption {
  """Market Selection ID of buy point option"""
  marketSelectionId: ID!

  """New points value on buyPoints selection"""
  points: Points!
}

"""A valid, deep linkable URL"""
scalar CanonicalUrl

"""A straight cash deposit applied to the users account"""
type CashDeposit {
  """Amount deposited to their account"""
  amount: Money!

  """
  Awarded datetime, Date CashDeposit Award was redeemed in UTC (ex: 2019-10-11T06:59:59Z)
  """
  awardedDatetime: DateTime

  """Unique identifier for the cash deposit"""
  id: ID!

  """A label to describe the cash deposit"""
  label: String!

  """Cash Deposit Status"""
  status: CashDepositStatus!
}

"""Possible values for the status of a Cash Deposit"""
enum CashDepositStatus {
  """Cash deposit has been awarded and applied to account"""
  REDEEMED
}

"""Cashout"""
type Cashout {
  """Bet ID associated with this cash out"""
  betId: String!

  """The cash out amount. Null if unavailable"""
  cashoutAmount: Money

  """The list of cashout selections"""
  cashoutSelections: [CashoutSelection!]!

  """The number of milliseconds a cashout trigger request will held for."""
  delayMilliseconds: Int!

  """Cashout ID"""
  id: ID!

  """Method by which the Bet can be 'cashed out'"""
  variant: CashoutVariant!
}

"""The errors a cashout might throw"""
type CashoutError {
  """The error code"""
  code: String!

  """The error display type"""
  displayType: CashoutErrorDisplayType!

  """The error message"""
  message: String!
}

"""The display type of a cashout error"""
enum CashoutErrorDisplayType {
  """When it's a generic error"""
  GENERIC

  """When it's a geo comply error"""
  GEO

  """When it's an invalid type"""
  INVALID
}

"""Cashout Selection"""
type CashoutSelection {
  """Cashout Type for this cashout selection"""
  cashoutType: CashoutType! @deprecated(reason: "'fullCashoutType' will be used in the future")

  """Unabbreviated Cashout Type for this cashout selection"""
  fullCashoutType: FullCashoutType!

  """Probability"""
  probability: Float!

  """Selection ID associated with the cashout selection"""
  selectionId: String!
}

"""
Input arguments for cashoutSelections. All fields are needed to ensure the patron is receiving the cashout amount displayed
"""
input CashoutSelectionInput {
  """The type of cashout selection"""
  cashoutType: CashoutTypeInput!

  """The probability of the bet being cashed out"""
  probability: Float!

  """ID of the selection - should match the bet legs market selection ID"""
  selectionId: ID!
}

"""
Input arguments for the cashoutTrigger mutation. All are needed to ensure proper cashout
"""
input CashoutTriggerInput {
  """ID of the bet being cashed out"""
  betId: ID!

  """The amount being cashed out"""
  cashoutAmount: Int!

  """The cashout selections"""
  cashoutSelections: [CashoutSelectionInput!]!

  """The variant of the Cashout"""
  variant: CashoutVariant = CASHOUT
}

"""Result of trigger cashout mutation"""
type CashoutTriggerResult {
  """The cashout that was attempted or performed"""
  cashout: Cashout!

  """Errors if the attempt was not successful"""
  cashoutError: CashoutError

  """True if the operation was successful"""
  success: Boolean!
}

"""
Possible cashout types for a cashout selection, based on status of the Event at
Bet placement, and the current status of the Event
"""
enum CashoutType {
  """Invalid cashout type"""
  INVALID

  """Bet was placed in-play/Event is currently in-play"""
  IP_IP @deprecated(reason: "Use unabbreviated value")

  """Bet was placed pre-game/Event is currently in-play"""
  PG_IP @deprecated(reason: "Use unabbreviated value")

  """Bet was placed pre-game/Event is currently pre-game"""
  PG_PG @deprecated(reason: "Use unabbreviated value")
}

"""
The types of cashout depending on the event status when bet was placed/currently
"""
enum CashoutTypeInput {
  """Bet was placed in-play/Event is currently in-play"""
  IP_IP

  """Bet was placed pre-game/Event is currently in-play"""
  PG_IP

  """Bet was placed pre-game/Event is currently pre-game"""
  PG_PG
}

"""
Possible ways for a Patron to 'cashout' a Bet from Bet History page, including an outright Cancellation of the Bet
"""
enum CashoutVariant {
  """
  Cancel bet, giving all stake back to the Patron, effectively a Patron-driven void
  """
  CANCEL

  """
  Traditional cashout, giving partial winnings based on the current probability of the Bet hitting
  """
  CASHOUT
}

"""Data needed to integrate clients with Casino"""
type CasinoAttributes {
  """Give clients a deepLink for the CasinoLobby"""
  casinoLobbyPageDeepLink: TsbDeepLink!
}

"""Casino Category Section"""
type CasinoCategorySection implements Node {
  categoriesShelf: CasinoCategoryShelf!

  """The ID of an object"""
  id: ID!
}

"""A shelf containing casino game cards"""
type CasinoCategoryShelf implements Node {
  """List of casino game cards"""
  casinoCategoryShelfChildren: [CasinoGame!]!

  """Category of the shelf"""
  category: String!

  """The ID of an object"""
  id: ID!

  """Jackpot group"""
  jackpotGroupSlug: String

  """List of Jackpots related to the jackpot group"""
  jackpots: [JackpotInfo!]

  """Label to be used for the shelf"""
  label: String!
}

"""A deep link to a casino category shelf"""
type CasinoCategoryShelfDeepLink implements DeepLink {
  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """The casino category shelf to deep link to"""
  casinoCategoryShelf: CasinoCategoryShelf!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

"""A Casino Game"""
type CasinoGame implements Node {
  """Whether or not a game is available to play"""
  available: Boolean!

  """what badge to display for this game. deprecates new_badge"""
  badges: [BadgeType]

  """Category of a game (Table, Slots, Megaways, etc.)"""
  category: String!

  """Determines if game is a dedicated table"""
  dedicatedTable: Boolean!

  """A deep link to a specific category game"""
  deepLink: DeepLink!

  """Determines if the game can be launched in demo mode"""
  demoAvailable: Boolean!

  """Description for a game"""
  description: String

  """The formatted maximum bet amount"""
  formattedMaximumBetAmount: String

  """The formatted minimum and maximum bet amount"""
  formattedMinimumAndMaximumBetAmount: String

  """The formatted minimum bet amount"""
  formattedMinimumBetAmount: String

  """Free Wager label, null if no free wager associated with the game"""
  freeWagerLabel: String

  """The ID used to launch a game"""
  gameProviderGameId: String!

  """Game Slug"""
  gameSlug: String!

  """When the game should become available"""
  goLiveTime: DateTime!

  """Determines if a patron has a free wager on a game"""
  hasFreeWager: Boolean!

  """The ID of an object"""
  id: ID!

  """List of Jackpots related to this game"""
  jackpots: [JackpotInfo!]

  """Live game data"""
  liveGameInfo: LiveGameInfo

  """Maximum bet amount in cents for a game"""
  maximumBetAmount: Int

  """Maximum RTP for a game"""
  maximumReturnToPlayerPercentage: Float

  """Maximum number of slot lines for a game"""
  maximumSlotLineBet: Int

  """Minimum bet amount in cents for a game"""
  minimumBetAmount: Int

  """Minimum RTP for a game"""
  minimumReturnToPlayerPercentage: Float

  """whether or not to display a new badge"""
  newBadge: Boolean!

  """Name of the game provider (NetEnt, Red Tiger, etc.)"""
  provider: String!

  """Provider display name"""
  providerDisplayName: String!

  """return to player overlay information for this game"""
  returnToPlayer: ReturnToPlayer

  """Short Game Slug"""
  shortGameSlug: String!

  """Number of slot lines for a game"""
  slotLines: Int

  """Sub categories for a game"""
  subCategories: [String!]

  """Thumbnail URL for the casino game"""
  thumbnailUrl(
    """Input to define the size of the icon for the game thumbnail"""
    imageSize: ResizableImageSizeParams
  ): ResizableImage!

  """Title of a game"""
  title: String!
}

"""A deep link to a casino game"""
type CasinoGameDeepLink implements DeepLink {
  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """The casino game to deep link to"""
  casinoGame: CasinoGame!

  """Whether or not this should launch directly or point at game details"""
  directLaunch: Boolean!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

"""Jackpot Carousel"""
type CasinoJackpotCarousel implements Node {
  """Deeplink to showcase all Jackpots"""
  deepLink: DeepLink

  """The ID of an object"""
  id: ID!

  """Jackpot Cards"""
  jackpotCards: [JackpotCard!]!

  """Label"""
  label: String!
}

"""Casino Jackpot Category Shelf"""
type CasinoJackpotCategoryShelf implements Node {
  """Games"""
  games: [CasinoGame!]!

  """The ID of an object"""
  id: ID!

  """Jackpot group"""
  jackpotGroupSlug: String!

  """List of Jackpots related to the jackpot group"""
  jackpots: [JackpotInfo!]

  """Label to be used for the shelf"""
  label: String!
}

"""A deep link to a casino jackpot category shelf"""
type CasinoJackpotCategoryShelfDeepLink implements DeepLink {
  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

"""Casino Lobby categories carousel"""
type CasinoLobbyCategoriesCarousel implements Node {
  """List of all category carousel children"""
  children: [CasinoLobbyCategoryCarousel!]!

  """The ID of an object"""
  id: ID!
}

"""Casino Lobby Category Carousel"""
type CasinoLobbyCategoryCarousel implements Node {
  """Game category"""
  category: String!

  """
  A deep link to the category section. Null if category doesn't have more games to show
  """
  deepLink: DeepLink

  """Games"""
  games: [CasinoGame!]!

  """Determines if there are more games in a category"""
  hasMoreGames: Boolean! @deprecated(reason: "DeepLink is only present when category has more games")

  """The ID of an object"""
  id: ID!

  """Label for the carousel"""
  label: String!

  """Style we should render for this carousel"""
  style: StyleType!
}

"""Casino Lobby Section"""
type CasinoLobbySection implements Node {
  """Casino chips carousel"""
  casinoChipsCarousel: ChipsCarousel!

  """Casino lobby categories carousel"""
  casinoLobbyCategoriesCarousel: CasinoLobbyCategoriesCarousel!

  """The ID of an object"""
  id: ID!
}

"""Represents the casino menu"""
type CasinoMenu {
  """Casino menu items"""
  menuItems: [CasinoMenuItem!]!
}

"""Represents a single casino menu item"""
type CasinoMenuItem {
  """Leaf items of a menu header"""
  casinoMenuItemChildren: [CasinoMenuItem!]!

  """Menu deepLink action"""
  deepLink: DeepLink

  """Menu icon"""
  icon(
    """Input to define the size of the icon for the sports menu"""
    imageSize: ResizableImageSizeParams!
  ): ResizableImage

  """ID"""
  id: ID!

  """Item label"""
  label: String!

  """Display type"""
  type: CasinoMenuItemType!
}

"""Possible casino menu item types"""
enum CasinoMenuItemType {
  """Label of the menu section"""
  HEADER

  """Menu item without children"""
  LEAF
}

"""Casino section filter"""
input CasinoSectionFilter {
  """Filter casino games in a section by bundle manifest version"""
  bundleManifestVersion: Int
}

"""
A component that holds details about available Casino Rewards for a specific user
"""
type CasinoSpotlightCard implements Node {
  """Deeplink to the spotlight card page"""
  deepLink: DeepLink!

  """Details of the spotlight card. e.g '1 available'"""
  detailsLabel: String!

  """The ID of an object"""
  id: ID!

  """Optional thumbnail to use on a spotlight card"""
  thumbnail(imageSize: ResizableImageSizeParams): ResizableImage

  """Title of the spotlight card. e.g Rewards"""
  title: String!

  """A casino spotlight card type"""
  type: CasinoSpotlightCardType!
}

"""Casino spotlight card type"""
enum CasinoSpotlightCardType {
  """Promotion navigates the patron to given promotion page"""
  PROMOTION

  """Rewards navigates the patron to their rewards page"""
  REWARDS
}

"""Casino Spotlight Carousel"""
type CasinoSpotlightCarousel implements Node {
  """Spotlight cards"""
  casinoSpotlightCarouselChildren: [CasinoSpotlightCard!]!

  """Deeplink to a list of all Casino Promotions"""
  deepLink: DeepLink

  """The ID of an object"""
  id: ID!

  """Spotlight carousel label"""
  label: String!

  """Terms URL"""
  termsUrl: String
}

"""A chip card"""
type ChipCard {
  """Chip deep link"""
  deepLink: DeepLink!

  """Display type"""
  displayType: ChipCardDisplayType!

  """Icon"""
  icon(
    """Input to define the size of the icon for the chip"""
    imageSize: ResizableImageSizeParams!
  ): ResizableImage!

  """Chip ID"""
  id: ID!

  """Bottom label"""
  label: String!

  """
  The resource URI associated with the chip card. Null if none associated
  """
  resourceUri: String
}

"""Display type of chip cards"""
enum ChipCardDisplayType {
  """Default"""
  DEFAULT

  """Live"""
  LIVE
}

"""A chip carousel"""
type ChipsCarousel implements Node {
  """List of chip components"""
  chipsCarouselChildren: [ChipCard!]!

  """Chip carousel ID"""
  id: ID!
}

"""A menu item that acts as a section description"""
type ClientDisplayAccountMenuItem implements AccountMenuItem {
  """Display type clients can translate into the proper UI"""
  displayType: AccountMenuItemDisplayType!

  """An optional icon to display"""
  icon(
    """Image size params to resize icon"""
    imageSize: ResizableImageSizeParams = {maxHeight: 1024, maxWidth: 1024}
  ): ResizableImage

  """Label of the item"""
  label: String!
}

"""
A small content section that appears alongside standard menu items (label is the section's header)
"""
type ClientDisplayDescriptiveAccountMenuItem implements AccountMenuItem {
  """Caption for an optional button that can be included"""
  button: String

  """Description of the menu item (appears as content text)"""
  description: String!

  """Display type clients can translate into the proper UI"""
  displayType: AccountMenuItemDisplayType!

  """An optional icon to display"""
  icon(
    """Image size params to resize icon"""
    imageSize: ResizableImageSizeParams = {maxHeight: 1024, maxWidth: 1024}
  ): ResizableImage

  """Label of the item"""
  label: String!
}

"""Represents a 2 box combat grid market card"""
type CombatGridMarketCard {
  """Deep link"""
  deepLink(pageType: PageType = PAGE): DeepLink

  """Vegas Event"""
  fallbackEvent: Event!

  """Id"""
  id: ID!

  """
  Parlay Plus flag to indicate this card has a market eligible to parlay plus
  """
  isParlayPlusEligible: Boolean!

  """Markets"""
  markets(pageType: PageType = PAGE): [Market!]!

  """ID without namespace"""
  rawId: ID!

  """Live Event"""
  richEvent: Node
}

"""A list on multiple markets with selection labels inside bet selectors"""
type CompactMultipleMarketCard {
  """See all deep link"""
  deepLink(pageType: PageType = PAGE): DeepLink

  """Vegas Event"""
  fallbackEvent: Event!

  """Id"""
  id: ID!

  """
  Parlay Plus flag to indicate this card has a market eligible to parlay plus
  """
  isParlayPlusEligible: Boolean!

  """Markets"""
  markets(pageType: PageType = PAGE): [Market!]!

  """Participant"""
  participant: Participant

  """ID without namespace"""
  rawId: ID!

  """Display or not the market headers"""
  requiresMarketHeader: Boolean!
}

"""
Object defines a group of matches within the Sport (ex: NFL, Premier League, The Masters, Wimbledon)
"""
type Competition {
  """Competition ID"""
  id: ID!

  """Competition name"""
  name: String!

  """A resource uri for the competition"""
  resourceUri: String

  """Competition slug"""
  slug: String!
}

"""A competition details header"""
type CompetitionDetailsHeader implements Node {
  """Page description included in this Competition Details Header"""
  description: String

  """Vegas Event"""
  fallbackEvent: Event!

  """Event Details ID"""
  fallbackEventId: ID!

  """The ID of an object"""
  id: ID!

  """Live Event"""
  richEvent: Node

  """Page title included in this Competition Details Header"""
  title: String
}

"""A deep link to Contact Support"""
type ContactSupportDeepLink implements DeepLink {
  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

"""Counter Strike event statistics"""
type CounterStrikeEventStatistics implements EventStatistics {
  """Away score for the event"""
  awayScore: Int!

  """Current counter terrorist team"""
  currentCounterTerroristTeam: ParticipantAlignment

  """Home score for the event"""
  homeScore: Int!

  """Boolean indicating whether the event is in play"""
  isInPlay: Boolean!

  """Progress for the event e.g. half + inning in baseball"""
  progress: String

  """Segments for the event e.g. innings, quarters"""
  segments: [Segment!]!
}

"""Details about an operating country of theScoreBET"""
type CountryMetadata {
  """ISO-3166 Alpha-2 representation of Country Code. Eg: US"""
  code: String!

  """Icon object representing Country's flag"""
  flagImage(
    """Image size params to resize flagImage"""
    imageSize: ResizableImageSizeParams = {maxHeight: 1024, maxWidth: 1024}
  ): ResizableImage!

  """Country's graphql endpoint"""
  httpsEdge: String!

  """Name of the country. Eg: United States"""
  name: String!

  """Country's websocket endpoint"""
  wssEdge: String!
}

"""Cricket event statistics"""
type CricketEventStatistics implements EventStatistics {
  """Away score for the event"""
  awayScore: Int!

  """Away score in string fmt, to be used instead of away_score"""
  awayScoreText: String!

  """Current batter"""
  currentBatter: ParticipantAlignment

  """Game state"""
  gameState: String

  """Home score for the event"""
  homeScore: Int!

  """Home score in string fmt, to be used instead of home_score"""
  homeScoreText: String!

  """Boolean indicating whether the event is in play"""
  isInPlay: Boolean!

  """Progress for the event e.g. half + inning in baseball"""
  progress: String

  """Segments for the event e.g. innings, quarters"""
  segments: [Segment!]!

  """Wickets"""
  wickets: Int
}

"""Represents a 2 box cricket grid market card"""
type CricketGridMarketCard {
  """Deep link"""
  deepLink(pageType: PageType = PAGE): DeepLink

  """Vegas Event"""
  fallbackEvent: Event!

  """Id"""
  id: ID!

  """
  Parlay Plus flag to indicate this card has a market eligible to parlay plus
  """
  isParlayPlusEligible: Boolean!

  """Markets"""
  markets(pageType: PageType = PAGE): [Market!]!

  """ID without namespace"""
  rawId: ID!
}

"""Valid currency codes"""
enum CurrencyCode {
  """Canadian Dollar"""
  CAD

  """US Dollar"""
  USD
}

"""Data needed to integrate clients with Customer Support"""
type CustomerSupportAttributes {
  """Support chat hours"""
  supportChatHours: String!

  """Support email"""
  supportEmail: String!

  """Support phone number"""
  supportPhoneNumber: String!

  """Zendesk Account Key"""
  zendeskAccountKey: String!

  """Zendesk Department"""
  zendeskDepartment: String!
}

"""Data Disclaimer Card"""
type DataDisclaimerCard implements Node {
  """Disclaimer"""
  disclaimer: Disclaimer

  """The ID of an object"""
  id: ID!
}

"""
The `DateTime` scalar type represents a date and time in the UTC
timezone. The DateTime appears in a JSON response as an ISO8601 formatted
string, including UTC timezone ("Z"). The parsed date and time string will
be converted to UTC if there is an offset.
"""
scalar DateTime

interface DeepLink {
  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

"""List of queries that can be deep linked to from inside the application"""
enum DeepLinkPage {
  """Deep Link will bring client to a Casino Lobby"""
  CASINO_LOBBY

  """Deep Link will bring client to a SharedBet consuming-related page"""
  CONSUME_SHARED_BET

  """Invalid deep link page"""
  INVALID

  """Deep Link will bring client to a MarketCard page"""
  MARKET_CARD

  """Deep Link will bring client to a Marketplace page"""
  MARKETPLACE

  """Deep Link will bring client to a PennPlay page"""
  PENNPLAY

  """Deep Link will bring client to a SharedBet sharing-related page"""
  PRODUCE_SHARED_BET
}

"""Disclaimer with a possible hyperlinked URL for further details"""
type Disclaimer {
  """Body of disclaimer, does not hyperlink to disclaimer URL"""
  body: String!

  """A deep link to the Disclaimer URL for further details"""
  deepLink: DeepLink

  """Text to hyperlink to disclaimer URL"""
  hyperlink: String

  """Title of the disclaimer"""
  title: String
}

"""Dota event statistics"""
type DotaEventStatistics implements EventStatistics {
  """Away score for the event"""
  awayScore: Int!

  """Home score for the event"""
  homeScore: Int!

  """Boolean indicating whether the event is in play"""
  isInPlay: Boolean!

  """Progress for the event e.g. half + inning in baseball"""
  progress: String

  """Segments for the event e.g. innings, quarters"""
  segments: [Segment!]!
}

"""Represents a selection as part of a DraftBet"""
type DraftBet {
  """The patron's available free bets"""
  availableFreeBets: [AvailableFreeBet!]!

  """The patron's wager"""
  betAmount: Money

  """Bet to win ratio"""
  betToWinRatio: Float

  """Draft legs grouped by an event"""
  draftLegEventGroupings: [DraftLegEventGrouping!]!

  """The patron's draft legs"""
  draftLegs: [DraftLeg!]!

  """Errors to be displayed at the draft bet level"""
  errors: [BetslipError!]!

  """Unique identifier for this draft bet"""
  id: ID!

  """Indication of if the draft bet is Parlay + eligible"""
  isParlayPlusEligible: Boolean!

  """Patron set amount type"""
  patronSetAmountType: PatronSetAmountType!

  """
  The number of milliseconds a place bet request will held for. When placing
  multiple bets, the delay will be the maximum of the individual delays.
  """
  placeBetDelayMilliseconds: Int!

  """The patron's selected free bet"""
  selectedFreeBetId: ID

  """The total odds of the wager"""
  totalOdds: Odds

  """Type of the draft bet"""
  type: DraftBetType!

  """The patron's win amount"""
  winAmount: Money
}

"""Draft Bet event grouping"""
type DraftBetEventGrouping {
  """DeepLink to the event/competition page"""
  deepLink: DeepLink

  """List of draft bets"""
  draftBets: [DraftBet!]!

  """The event id associated with the grouping"""
  eventId: String!

  """The event name associated with the grouping"""
  eventName: String!

  """The event status associated with the grouping"""
  eventStatus: EventStatus!

  """
  Start at timestamp (Market start time if it exists, if not then event start time
  """
  startsAt: DateTime
}

"""Input for adding a draft bet to Betslip"""
input DraftBetInput {
  """The betting amount in cents"""
  betAmount: Int

  """ID of the draftBet"""
  draftBetId: ID!

  """List of DraftLeg inputs on this DraftBet"""
  draftLegs: [DraftLegInput!]!

  """Free Bet ID being used on this drafBet"""
  freeBetId: ID

  """Patron set amount type"""
  patronSetAmountType: PatronSetAmountType = NOT_SET

  """List of DraftLegEventGrouping inputs on this DraftBet"""
  sameGameParlayLegs: [SameGameParlayLegInput!] = []

  """Points bought on teaser"""
  teaserPoints: Float

  """A draft bet type"""
  type: DraftBetType!

  """The winning amount in cents"""
  winAmount: Int
}

"""Draft bet type"""
enum DraftBetType {
  """
  A Parlay bet has multiple selections and all must win for the bet to win
  """
  PARLAY

  """
  A Parlay bet has multiple selections and some of them are from the same game
      and all must win for the bet to win
  """
  PARLAY_PLUS

  """A Straight bet is a bet on a single market selection"""
  STRAIGHT

  """
  A Teaser bet is a type of Parlay on Basketball/Football selections with points
      bought off the main line
  """
  TEASER
}

"""Represents a leg as part of a DraftBet"""
type DraftLeg {
  """List of available buy point options on this leg"""
  buyPointOptions: [BuyPointOption!]!

  """DeepLink to the event/competition page"""
  deepLink: DeepLink

  """Errors to be displayed at the draft leg level"""
  errors: [BetslipError!]!

  """The event name associated with the draft leg"""
  eventName: String!

  """Event start at timestamp"""
  eventStartAt: DateTime! @deprecated(reason: "Need to start using just start_at")

  """Unique identifier for this leg"""
  id: ID!

  """The ID of the market associated with the draft leg"""
  marketId: ID!

  """The market name associated with the draft leg"""
  marketName: String!

  """Market selection for this leg of the draft bet"""
  marketSelection: MarketSelection!

  """Have the market selection's odds changed and they need acceptance?"""
  marketSelectionRequiresAcceptance: Boolean!

  """Market start at timestamp"""
  marketStartAt: DateTime

  """The market type associated with the draft leg"""
  marketType: MarketType!

  """Selected line type modifier. Defaulted to Action"""
  selectedLineTypeModifier: LineTypeModifier

  """
  Start at timestamp (Market start time if it exists, if not then event start time
  """
  startAt: DateTime!
}

"""Draft leg event grouping (used in parlay bets)"""
type DraftLegEventGrouping {
  """DeepLink to the event/competition page"""
  deepLink: DeepLink

  """List of parlay draft bet's draft legs"""
  draftLegs: [DraftLeg!]

  """The event id associated with the grouping"""
  eventId: String!

  """The event name associated with the grouping"""
  eventName: String!

  """The event status associated with the grouping"""
  eventStatus: EventStatus!

  """Indication of if the event group is Parlay + eligible"""
  isParlayPlusEligible: Boolean!

  """Have the leg event grouping's odds changed and they need acceptance?"""
  legGroupRequiresAcceptance: Boolean!

  """Event grouped odds"""
  odds: Odds

  """
  Start at timestamp (Market start time if it exists, if not then event start time
  """
  startsAt: DateTime
}

"""Represents the input of a DraftLeg on a DraftBet"""
input DraftLegInput {
  """ID of the DraftLeg"""
  draftLegId: ID!

  """Market selection ID on this draftLeg"""
  marketSelectionId: ID!

  """Odds of the draftLeg"""
  odds: OddsInput!
}

"""Page drawer"""
type Drawer implements Node {
  """Auto Expand drawer"""
  autoExpand: Boolean!

  """List of all drawer children"""
  drawerChildren: [DrawerChild!]!

  """Drawer ID"""
  id: ID!

  """Drawer label"""
  label: String!
}

"""A drawer child"""
union DrawerChild = DataDisclaimerCard | MarketplaceShelf | SessionCard

"""Embedded content interface"""
interface EmbeddedContent {
  """Raw content to be attached"""
  content: String!
}

"""Embedded promotion data"""
type EmbeddedPromotionContent implements EmbeddedContent {
  """Raw content to be attached"""
  content: String!
}

"""Params to fetch embedded promotion data"""
input EmbeddedPromotionInput {
  """Filter id"""
  filterId: String

  """Promotion image resize"""
  imageSize: ResizableImageSizeParams

  """Promotion image size type"""
  imageSizeType: ImageSizeType!

  """Limit amount set by clients"""
  limit: Int

  """Region Code"""
  regionCode: String
}

"""An empty state card"""
type EmptyStateCard implements Node {
  """Description"""
  description: String

  """EmptyStateCard ID"""
  id: ID!

  """Image card"""
  imageCard: ImageCard!

  """Title"""
  title: String!
}

"""Describes the enrollment status of a user for a promotion"""
enum EnrollmentStatus {
  """
  Promotion does not have a valid enrollment status.
  This could happen if user id is not provided in the query.
  
  """
  INVALID

  """Promotion does not require user to be enrolled"""
  NOT_REQUIRED

  """User has yet to enroll into the promotion"""
  PENDING

  """User has successfully enrolled into the promotion"""
  SUCCESS
}

"""
Event being wagered on, can be a standard event such as an NHL game, or a special event such as a PGA Tour
"""
interface Event {
  """Optional sports core API unique identifier"""
  apiUri: String

  """Optional away key startter (e.g. away starting pitcher)"""
  awayKeyStarter: Participant

  """Event competition ex: USA"""
  competition: Competition!

  """Optional Tsm/Tsb deep link"""
  deepLink: DeepLink

  """Optional extra information on the Event"""
  extraInformation: String

  """Optional home key startter (e.g. home starting pitcher)"""
  homeKeyStarter: Participant

  """Event ID; represented as a UUID"""
  id: ID!

  """Event name ex: Gardner-Webb RunninÂ´ Bulldogs @ Monmouth Hawks"""
  name: String!

  """Event organization ex: NFL"""
  organization: Organization!

  """
  The resource_uri associated with this event. Null if a rosetta key does not exist
  """
  resourceUri: String

  """
  Event slug ex: 2021-10-02-usa-gardner-webb-runnin-bulldogs-monmouth-hawks
  """
  slug: String!

  """Event sport ex: Football"""
  sport: Sport!

  """Human readable start time of event in UTC (ex: 2019-10-11T06:59:59Z)"""
  startTime: DateTime!

  """Event statistics"""
  statistics: EventStatistics

  """Status of the event ex: Pregame, Finihsed, Hidden etc."""
  status: EventStatus!

  """
  Event type - either standard (NHL / NFL game) or special (Golf / Tennis)
  """
  type: EventType!
}

"""A event details header"""
type EventDetailsHeader implements Node {
  """Vegas Event"""
  fallbackEvent: Event!

  """Event Details Card ID"""
  fallbackEventId: ID!

  """The ID of an object"""
  id: ID!

  """A deep link to the box score of the associated event in the media app"""
  mediaEventFullBoxScoreDeepLink: TsmDeepLink

  """A deep link to a preview of the associated event in the media app"""
  mediaEventPreviewDeepLink: TsmDeepLink

  """Live Event"""
  richEvent: Node
}

"""Event Statistics"""
interface EventStatistics {
  """Away score for the event"""
  awayScore: Int!

  """Home score for the event"""
  homeScore: Int!

  """Boolean indicating whether the event is in play"""
  isInPlay: Boolean!

  """Progress for the event e.g. half + inning in baseball"""
  progress: String

  """Segments for the event e.g. innings, quarters"""
  segments: [Segment!]!
}

"""Event Status (set by Vegas)"""
enum EventStatus {
  """Event is cancelled; all markets are closed and bets are voided"""
  CANCELLED

  """Event is finished; all markets are closed"""
  FINISHED

  """Event is hidden; all markets are not visible to any user"""
  HIDDEN

  """Event has started; all markets represent live odds"""
  IN_PLAY

  """Unknown event status"""
  INVALID

  """Event has not started yet; all markets are pre-game"""
  PRE_GAME
}

"""Event Type (set by Vegas)"""
enum EventType {
  """Unknown event type"""
  INVALID

  """Look at SpecialEvent"""
  SPECIAL

  """Look at StandardEvent"""
  STANDARD
}

"""Describes an Evolution casino game launch result"""
type EvolutionLaunchCasinoGameResult implements LaunchCasinoGameResult {
  """The embedded redirect url, will be null if request is invalid or fails"""
  embeddedRedirectUrl: String

  """A list of errors on failure, will be null after a success"""
  errors: [LaunchCasinoGameMutationError!]

  """The game inclusion HTML, will be null if request is invalid or fails"""
  gameInclusionHtml: String

  """
  The game inclusion JS url to be used for iOS, will be null if request is invalid or fails
  """
  gameInclusionJsUrl: String

  """The game slug"""
  gameSlug: String!

  """
  The session ID related to the game, will be null if request is invalid or fails
  """
  sessionId: String
}

"""Favourites Marketplace Shelf"""
type FavouritesMarketplaceShelf implements Node {
  """Market components"""
  favouritesMarketplaceShelfChildren: [MarketCard!]

  """Favourites Marketplace shelf ID"""
  id: ID!

  """Label of the shelf"""
  label: String
}

"""Filter for a collection"""
type Filter {
  """Default option"""
  defaultOption: FilterOption!

  """Filter label"""
  label: String!

  """Filter options"""
  options: [FilterOption!]!

  """Prompt in drawer"""
  prompt: String!
}

"""Data needed for a filter option"""
type FilterOption {
  """State of the filter option"""
  enabled: Boolean!

  """A unique ID"""
  id: ID!

  """Filter option label"""
  label: String!
}

"""Football event statistics"""
type FootballEventStatistics implements EventStatistics {
  """Away score for the event"""
  awayScore: Int!

  """Down and distance"""
  downAndDistance: String

  """Field Position of team with current possession"""
  fieldPosition: String

  """Home score for the event"""
  homeScore: Int!

  """Boolean indicating whether the event is in play"""
  isInPlay: Boolean!

  """Possession (home or away)"""
  possession: ParticipantAlignment

  """Progress for the event e.g. half + inning in baseball"""
  progress: String

  """Is the current team in the Red Zone?"""
  redZone: Boolean

  """Segments for the event e.g. innings, quarters"""
  segments: [Segment!]!

  """Yards from goal"""
  yardsFromGoal: Int
}

"""A footer button"""
type FooterButton {
  """Deep link of the footer button"""
  deepLink: DeepLink!

  """Label of the footer button"""
  label: String!

  """Type of the footer button"""
  type: AwardDetailsSectionButtonType!
}

"""A fixed amount wager a customer can place for free"""
type FreeBet {
  """Amount"""
  amount: Money!

  """Effective datetime in UTC (ex: 2019-10-11T06:59:59Z)"""
  effectiveDatetime: DateTime

  """Expiry datetime in UTC (ex: 2019-10-11T06:59:59Z)"""
  expiryDatetime: DateTime

  """Unique identifier for the free bet"""
  id: ID!

  """A label to describe the free bet"""
  label: String!

  """
  Redeem datetime, Date Free Bet was redeemed in UTC (ex: 2019-10-11T06:59:59Z)
  """
  redeemDatetime: DateTime

  """Free Bet Status"""
  status: FreeBetStatus!

  """Deep Link to the Terms and Conditions"""
  termsAndConditions: WebDeepLink
}

"""Possible values for the status of a Free Bet"""
enum FreeBetStatus {
  """Free Bet has been awarded to user but has not been committed"""
  AVAILABLE

  """The Free Bet has expired and can no longer be committed"""
  EXPIRED

  """
  Pending Free Bet.
  There should be no pending free bets but the consolidated award type contains this status.
  
  """
  PENDING

  """User has redeemed the Free Bet"""
  REDEEMED
}

"""A fixed amount wager a customer can place for free on casino games"""
type FreeWager implements Node {
  """Details Deep Link"""
  detailsDeepLink: WebDeepLink!

  """Details label"""
  detailsLabel: String!

  """List of eligible games"""
  eligibleGames: [String!]

  """Expiry datetime in UTC (ex: 2019-10-11T06:59:59Z)"""
  expiryDatetime: DateTime

  """Label for history tab"""
  historyLabel: String

  """The ID of an object"""
  id: ID!

  """A label for the free wager"""
  label: String

  """
  Redeem datetime, Date Free Wager was redeemed in UTC (ex: 2019-10-11T06:59:59Z)
  """
  redeemDatetime: DateTime

  """Status"""
  status: FreeWagerStatus!

  """Terms and Conditions Deep Link"""
  termsAndConditionsDeepLink: WebDeepLink!

  """Title"""
  title: String!

  """Quantity of free wager award"""
  totalQuantity: Int

  """View games Deep Link"""
  viewGamesDeepLink: DeepLink!
}

"""Possible values for the status of a Free Wager"""
enum FreeWagerStatus {
  """The Free Wager is available to use"""
  AVAILABLE

  """The Free Wager has expired and can no longer be used"""
  EXPIRED

  """User has a pending Free Wager"""
  PENDING

  """User has redeemed the Free Wager"""
  REDEEMED
}

"""
Input arguments for cashoutSelections with unabbreviated cashout type. All
fields are needed to ensure the patron is receiving the cashout amount displayed
"""
input FullCashoutSelectionInput {
  """The unabbreviated type of cashout selection"""
  fullCashoutType: FullCashoutTypeInput!

  """The probability of the bet being cashed out"""
  probability: Float!

  """ID of the selection - should match the bet legs market selection ID"""
  selectionId: ID!
}

"""
Input arguments for the cashoutTrigger mutation with unabbreviated cashout types
in selections. All are needed to ensure proper cashout
"""
input FullCashoutTriggerInput {
  """ID of the bet being cashed out"""
  betId: ID!

  """The amount being cashed out"""
  cashoutAmount: Int!

  """The cashout selections"""
  cashoutSelections: [FullCashoutSelectionInput!]!

  """The variant of the Cashout"""
  variant: CashoutVariant = CASHOUT
}

"""
Possible cashout types for a cashout selection, based on status of the Event at
Bet placement, and the current status of the Event
"""
enum FullCashoutType {
  """Event place in-play/Event currently in-play"""
  INPLAY_INPLAY

  """Invalid cashout type"""
  INVALID

  """Bet place pre-game/Event currently in-play"""
  PREGAME_INPLAY

  """Bet placed pre-game/Event currently pre-game"""
  PREGAME_PREGAME
}

"""
The unabbreviated types of cashout depending on the event status when bet was placed/currently
"""
enum FullCashoutTypeInput {
  """Bet was placed in-play/Event is currently in-play"""
  INPLAY_INPLAY

  """Bet was placed pre-game/Event is currently in-play"""
  PREGAME_INPLAY

  """Bet was placed pre-game/Event is currently pre-game"""
  PREGAME_PREGAME
}

"""Object holding all service related data relevant to GeoComply"""
type GeoComplyAttributes {
  """
  Base URL for the GeoComply installer; query params can be added to this
  """
  installerBaseUrl: String!

  """ID query param that is added to the GeoComply installer URL"""
  installerId: String!

  """Version query param that is appended to the GeoComply installer URL"""
  installerVersion: String!

  """Full installer URL for mac OS"""
  macInstallerUrl: String!

  """Full installer URL for windows O"""
  windowsInstallerUrl: String!
}

"""An error when authorizing a geolocation"""
type GeoComplyAuthorizeGeoPacketMutationError {
  """Error code"""
  code: GeoComplyAuthorizeGeoPacketMutationErrorCode!

  """Human readable form of the error code"""
  codeString: String!

  """Display type clients can translate into the proper UI"""
  displayType: GeoComplyMutationDisplayType!

  """Error message"""
  message: String!

  """A priority for the error to determine which ones to show before others"""
  priority: Int!
}

"""Possible error codes from authorizing a geolocation"""
enum GeoComplyAuthorizeGeoPacketMutationErrorCode {
  """GeoComply error. Device's DNS configuration is abnormal."""
  GC_ABNORMAL_DNS_DETECTED

  """GeoComply error. Device is connected to Android Debug Bridge."""
  GC_ADB_CONNECTED

  """
  GeoComply error. An attribute (MAC address, IP, user ID, etc.) has been blacklisted.
  """
  GC_BLACKLISTED

  """GeoComply error. Device is running Chrome OS."""
  GC_CHROME_OS_DETECTED

  """GeoComply error. Device is too close to a blacklisted location."""
  GC_CLOSE_TO_EXCLUSION_BORDER

  """
  GeoComply error. Device is too close to the edge of a supported location.
  """
  GC_CLOSE_TO_INCLUSION_BORDER

  """GeoComply error. An Android emulator is being used."""
  GC_CONNECTED_WIFI_BLOCKED

  """GeoComply error. Discrepancy detected in location data."""
  GC_DATA_INCONSISTENT

  """GeoComply error. Proxy has been configured in device system settings."""
  GC_DEVICE_PROXY_DETECTED

  """GeoComply error. Device is rooted or jailbroken."""
  GC_DEVICE_ROOTED

  """Encountered an unknown GeoComply error."""
  GC_ERROR_UNKNOWN

  """GeoComply error. An Android emulator is being used."""
  GC_ETHERNET_DETECTED

  """GeoComply error. An aircraft's WiFi access point has been detected."""
  GC_FLIGHT_WIFI_DETECTED

  """GeoComply error. Device is in a blacklisted location."""
  GC_IN_EXCLUSION_BOUNDARY

  """GeoComply error. Device's IP is outside of required country (e.g. US)."""
  GC_IP_COUNTRY_INVALID

  """
  GeoComply error. Faked location data is still cached after using location-spoofing app.
  """
  GC_LOCATION_CACHED

  """GeoComply error. Insufficient number of location sources available."""
  GC_LOCATION_COUNT_INSUFFICIENT

  """GeoComply error. Android device has mock location settings enabled."""
  GC_LOCATION_MOCKED

  """GeoComply error. Location data being simulated via Xcode."""
  GC_LOCATION_SIMULATED

  """GeoComply error. Location data being simulated via Xcode on iOS 11."""
  GC_LOCATION_SIMULATED_IOS_11

  """GeoComply error. There is not enough data to detect device's location."""
  GC_NO_DATA_FOR_BOUNDARY

  """GeoComply error. Device is in an unsupported location."""
  GC_OUT_OF_BOUNDARY

  """GeoComply error. Device is communicating via a proxy server."""
  GC_PROXY_DETECTED

  """GeoComply error. Application has been altered."""
  GC_RESIGNED_APP_DETECTED

  """
  GeoComply error. Only low quality location data is being provided on Android.
  """
  GC_SENSORS_ONLY_DETECTED

  """GeoComply error. Device is running blacklisted software."""
  GC_SOFTWARE_BLOCKED

  """GeoComply error. Device's location is changing too rapidly."""
  GC_TELEPORTED

  """GeoComply error. Device's USB is plugged in."""
  GC_USB_DETECTED

  """
  GeoComply error. Device is not in a valid active region for this instance of Sportsbook.
  """
  GC_USER_IN_DIFFERENT_VALID_REGION

  """
  GeoComply error. Application is using an outdated version of the GeoComply SDK.
  """
  GC_VERSION_OUTDATED

  """GeoComply error. VPN connection has been detected."""
  GC_VPN_DETECTED

  """GeoPacket could not be decrypted or is otherwise invalid."""
  GEO_PACKET_INVALID

  """User is not in a region supported to place bets"""
  OUT_OF_BOUNDARY

  """Generic server error message or error from third party API."""
  SERVER_ERROR
}

"""Response for `geo_comply_authorize_geo_packet` mutation"""
type GeoComplyAuthorizeGeoPacketResult {
  """A list of errors on failure"""
  errors: [GeoComplyAuthorizeGeoPacketMutationError!]

  """Time at which the authorization expires"""
  expiresAt: DateTime

  """Time at which the authorization should be rechecked"""
  refreshAt: DateTime
}

"""Response for `geo_comply_force_refetch_license` mutation"""
type GeoComplyForceRefetchLicenseResult {
  """Region-specific license key from GeoComply"""
  licenseKey: String
}

"""An error when requesting a geocomply license key"""
type GeoComplyGetApiTokenMutationError {
  """Error code"""
  code: GeoComplyGetApiTokenMutationErrorCode!

  """Human readable form of the error code"""
  codeString: String!

  """How clients should display error"""
  displayType: GeoComplyMutationDisplayType!

  """Error message"""
  message: String!

  """A priority for the error to determine which ones to show before others"""
  priority: Int!
}

"""Possible error codes from requesting a geocomply license key"""
enum GeoComplyGetApiTokenMutationErrorCode {
  """User is not in a region supported to place bets"""
  OUT_OF_BOUNDARY

  """User has made too many requests in a short period of time"""
  RATE_LIMITED

  """
  Generic error message sent to client when something unexpected happens on third party APIs
  """
  SERVER_ERROR

  """User is in a valid but not active region"""
  USER_IN_DIFFERENT_VALID_REGION
}

"""Response for `geo_comply_get_api_token` mutation"""
type GeoComplyGetApiTokenResult {
  """A list of errors on failure"""
  errors: [GeoComplyGetApiTokenMutationError!]

  """Region-specific license key from GeoComply"""
  licenseKey: String
}

"""Display types for geolocation mutation errors"""
enum GeoComplyMutationDisplayType {
  """
  Informs user they cannot make adjustments on their own and should contact support.
  """
  CONTACT_SUPPORT

  """Informs user they are using a rooted or jailbroken device."""
  DEVICE_ROOTED

  """
  Informs user they are outside of an active region this instance of Sportsbook operates.
  """
  OUTSIDE_OF_ACTIVE_REGION

  """Informs user they are outside of a valid region theScore Bet operates."""
  OUTSIDE_OF_VALID_REGION

  """Informs user to make a specific adjustment and try again."""
  TROUBLESHOOT

  """Informs user to make general adjustments and try again."""
  TROUBLESHOOT_GENERAL

  """
  Informs user they are using an outdated version of the app and should update.
  """
  VERSION_OUTDATED
}

"""Device's latitude and longitude data"""
input GeolocationParams {
  """Device's location accuracy, in meters"""
  accuracy: Float!

  """Device's current latitude"""
  latitude: Float!

  """Device's current longitude"""
  longitude: Float!
}

"""Represents a 6-9 box market card"""
type GridMarketCard {
  """Deep link"""
  deepLink(pageType: PageType = PAGE): DeepLink

  """Vegas Event"""
  fallbackEvent: Event!

  """Id"""
  id: ID!

  """
  Parlay Plus flag to indicate this card has a market eligible to parlay plus
  """
  isParlayPlusEligible: Boolean!

  """Markets"""
  markets(pageType: PageType = PAGE): [Market!]!

  """ID without namespace"""
  rawId: ID!

  """Live Event"""
  richEvent: Node
}

"""Result of heartbeat mutation"""
enum HeartbeatMutationResult {
  """Successful, user is still within their daily time limit"""
  OK

  """
  User's daily time limit has been exceeded, access token will be invalidated
  """
  TIME_LIMIT_EXCEEDED
}

"""Hockey event statistics"""
type HockeyEventStatistics implements EventStatistics {
  """Number of away players in box"""
  awayPlayersInBox: Int

  """Away score for the event"""
  awayScore: Int!

  """Number of home players in box"""
  homePlayersInBox: Int

  """Home score for the event"""
  homeScore: Int!

  """Boolean indicating whether the event is in play"""
  isInPlay: Boolean!

  """Progress for the event e.g. half + inning in baseball"""
  progress: String

  """Segments for the event e.g. innings, quarters"""
  segments: [Segment!]!
}

"""Data needed to integrate clients with Identity"""
type IdentityAttributes {
  """Identity base URL"""
  baseUrl: String!

  """Identity client ID"""
  clientId: String!

  """Delete biometrics setup"""
  deleteBiometricsPath: String!

  """Document Upload"""
  documentUploadPath: String!

  """Identity auth tokens path"""
  linkAuthTokenPath: String!

  """Identity log in path"""
  logInPath: String!

  """Identity log out path"""
  logOutPath: String!

  """Login Preferences"""
  loginPreferencesPath: String!

  """Forgot password"""
  passwordResetRequestPath: String!

  """Push Preferences"""
  pushPreferencesPath: String!

  """Region Authorization"""
  regionAuthorizationPath: String!

  """Biometrics challenge code request"""
  requestBiometricsChallengeCodePath: String!

  """Forgot password"""
  requestPasswordResetPath: String! @deprecated(reason: "This route is being replaced by passwordResetRequestPath")

  """Responsible gaming acknowledgment path"""
  responsibleGamingAckPath: String!

  """Set up biometrics"""
  setUpBiometricsPath: String!

  """Identity sign up path"""
  signUpPath: String!

  """Identity token path"""
  tokenPath: String!
}

"""A deeplink to an Identity URL"""
type IdentityDeepLink implements DeepLink {
  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL"""
  webUrl: String!
}

"""Describes an IGT casino game launch result"""
type IgtLaunchCasinoGameResult implements LaunchCasinoGameResult {
  """The embedded redirect url, will be null if request is invalid or fails"""
  embeddedRedirectUrl: String

  """A list of errors on failure, will be null after a success"""
  errors: [LaunchCasinoGameMutationError!]

  """The game inclusion HTML, will be null if request is invalid or fails"""
  gameInclusionHtml: String

  """The game slug"""
  gameSlug: String!

  """
  The session ID related to the game, will be null if request is invalid or fails
  """
  sessionId: String
}

"""An image card"""
type ImageCard implements Node {
  """Image deep link"""
  deepLink: DeepLink

  """Image horizontal alignment"""
  horizontalAlignment: ImageCardHorizontalAlignment!

  """ImageCard ID"""
  id: ID!

  """Image"""
  image(
    """Input to define the size of the image"""
    imageSize: ResizableImageSizeParams!
  ): ResizableImage!
}

"""Horizontal alignment of the ImageCard"""
enum ImageCardHorizontalAlignment {
  """Centre"""
  CENTRE

  """Invalid"""
  INVALID

  """Left"""
  LEFT

  """Right"""
  RIGHT
}

"""Possible promotion image sizes to be chosen based on the device"""
enum ImageSizeType {
  """Android HDPI"""
  ANDROID_HDPI

  """Android MDPI"""
  ANDROID_MDPI

  """Android XHDPI"""
  ANDROID_XHDPI

  """Android XXHDPI"""
  ANDROID_XXHDPI

  """Android XXXHDPI"""
  ANDROID_XXXHDPI

  """Custom height"""
  CUSTOM_HEIGHT

  """Custom size"""
  CUSTOM_SIZE

  """Custom width"""
  CUSTOM_WIDTH

  """iOS 1X"""
  IOS1X

  """iOS 2X"""
  IOS2X

  """iOS 3X"""
  IOS3X
}

type InformationLineItem {
  """The content of the line item"""
  content: InformationLineItemContent!

  """An optional header for the line item text"""
  header: String
}

union InformationLineItemContent = TooltipText | WebDeepLink

"""An insights card"""
type InsightsCard implements Node {
  """The API URI needed for TSM clients to deep link within TSM"""
  apiUri: String

  """Vegas Event ID"""
  fallbackEventId: String

  """InsightsCard ID"""
  id: ID!

  """A core resource uri for the event or competition"""
  resourceUri: String
}

"""Jackpot Card"""
type JackpotCard implements Node {
  """Deep link to specific Jackpot family category page."""
  deepLink: DeepLink!

  """Gradient colour for the Jackpot family."""
  gradientColour: String!

  """The ID of an object"""
  id: ID!

  """List of Jackpots related to the jackpot family."""
  jackpots: [JackpotInfo!]!

  """
  Label of the Jackpot family. e.g. Gotta go Jackpots, or Casino game name.
  """
  label: String!

  """Sub Label of the Jackpot family. e.g. 16 Games"""
  subLabel: String!

  """Thumbnail of the Jackpot family or casino game."""
  thumbnail(imageSize: ResizableImageSizeParams): ResizableImage!
}

"""Deprecated Jackpot Category Shelf"""
type JackpotCategoryShelf implements Node {
  """Games"""
  games: [CasinoGame!]!

  """The ID of an object"""
  id: ID!

  """Label to be used for the shelf"""
  label: String!

  """Sub label"""
  subLabel: String!
}

"""Jackpot Info"""
type JackpotInfo implements Node {
  """Pot amount for the Jackpot"""
  amount: Money!

  """Gradient for the jackpot"""
  gradient: String!

  """The ID of an object"""
  id: ID!

  """
  Label for the Jackpot. e.g. Daily, Progressive, Daily hit at, Progressive hit at, etc.
  """
  label: String!

  """Amount this jackpot had last time it was hit"""
  latestHit: Money!

  """
  Sub label for the Jackpot. e.g. Resets in 2hr 5min, Grand prize jackpot.
  """
  subLabel: String!

  """Type of the Jackpot"""
  type: JackpotInfoType!
}

"""Casino Jackpot Info type"""
enum JackpotInfoType {
  """A daily jackpot."""
  DAILY

  """A progressive jackpot."""
  PROGRESSIVE
}

"""Represents a json blob"""
scalar Json

"""Data needed to integrate clients with Jumio"""
type JumioAttributes {
  """Jumio API Key"""
  apiKey: String!

  """Jumio API Secret"""
  apiSecret: String!

  """Pre Selected Jumio Country respresnted in ISO 3166-1 Alpha 3 format"""
  preselectedCountry: String
}

"""Describes errors that can happen while launching a casino game"""
type LaunchCasinoGameMutationError {
  """Machine readable error code, not for display in the UI"""
  code: LaunchCasinoGameMutationErrorCode!

  """
  Deeplink related to the error message (i.e RG spend/loss limits, deposit)
  """
  deepLink: DeepLink

  """
  Deeplink CTA related to the error message (i.e RG spend/loss limits, deposit)
  """
  deepLinkCta: String

  """Action to take to resolve the error"""
  displayType: LaunchCasinoGameMutationErrorDisplayType!

  """Human readable footer error message"""
  footerMessage: String

  """Human readable header error message"""
  headerMessage: String!

  """Human readable error message"""
  message: String!
}

"""Specific error codes when launching a casino game"""
enum LaunchCasinoGameMutationErrorCode {
  """Re-check GeoComply and try again"""
  GEO_COMPLY_ERROR

  """Casino game launch failed"""
  LAUNCHED_FAILED

  """Require Deposit Ack before allowing to launch the game"""
  RG_ACK_REQUIRED

  """Minimum bet amount to launch casino game exceeds RG loss limit"""
  RG_LOSS_LIMIT

  """Minimum bet amount to launch casino game exceeds RG spend limit"""
  RG_SPEND_LIMIT
}

"""Describes what UI should be used to show an error"""
enum LaunchCasinoGameMutationErrorDisplayType {
  """Location error"""
  GEO_COMPLY_ERROR

  """Launch game error"""
  LAUNCH_GAME_ERROR

  """Responsible gaming error"""
  RESPONSIBLE_GAMING_ERROR
}

"""A launch casino game interface"""
interface LaunchCasinoGameResult {
  """The embedded redirect url, will be null if request is invalid or fails"""
  embeddedRedirectUrl: String

  """A list of errors on failure, will be null after a success"""
  errors: [LaunchCasinoGameMutationError!]

  """The game inclusion HTML, will be null if request is invalid or fails"""
  gameInclusionHtml: String

  """The game slug"""
  gameSlug: String!

  """
  The session ID related to the game, will be null if request is invalid or fails
  """
  sessionId: String
}

"""All data requred for the Launch Pages"""
type LaunchPage {
  """Time to start the loop of app-launch video in milliseconds"""
  appLaunchVideoTimestamp: Int!

  """Video to be shown on the app-launch page"""
  appLaunchVideoUrl: String!

  """Disclaimer highlighting data liability of theScoreBet"""
  dataLiabilityDisclaimer: Disclaimer!

  """Label informing the user who theScore is licensed with"""
  licensingDisclaimer: Disclaimer!

  """Responsible Gaming Gambling Help"""
  responsibleGamingGamblingHelpDisclaimer: Disclaimer!

  """Deep Link to terms & conditions web page"""
  termsAndConditionsDeepLink: DeepLink!

  """Welcome modal display attributes"""
  welcomeModal: WelcomeModal
}

"""
A menu item that contains a link to the relevant section within the application
"""
type LeafAccountMenuItem implements AccountMenuItem {
  """Where this terminal menu item links to"""
  deepLink: DeepLink!

  """An optional icon to display"""
  icon(
    """Image size params to resize icon"""
    imageSize: ResizableImageSizeParams = {maxHeight: 1024, maxWidth: 1024}
  ): ResizableImage

  """Label of the item"""
  label: String!
}

"""League of Legends event statistics"""
type LeagueOfLegendsEventStatistics implements EventStatistics {
  """Away score for the event"""
  awayScore: Int!

  """Home score for the event"""
  homeScore: Int!

  """Boolean indicating whether the event is in play"""
  isInPlay: Boolean!

  """Progress for the event e.g. half + inning in baseball"""
  progress: String

  """Segments for the event e.g. innings, quarters"""
  segments: [Segment!]!
}

"""Object containing details for a leg of a bet"""
type Leg {
  """Event for the leg"""
  fallbackEvent: Event!

  """History of the leg"""
  histories: [LegHistory!]!

  """Unique identifier for this leg"""
  id: ID!

  """Whether the leg is in play"""
  inPlay: Boolean!

  """Market for the leg"""
  market: Market!

  """Classification of the market this leg was placed on"""
  marketClassification: MarketClassification!

  """Unique identifier for the market selection to which this leg belongs"""
  marketSelectionId: ID!

  """Name of the market selection"""
  marketSelectionName: String!

  """Status of the market selection"""
  marketSelectionStatus: MarketSelectionStatus!

  """Type of the market selection"""
  marketSelectionType: MarketSelectionType!

  """Odds of the leg"""
  odds: Odds!

  """Selection order of the leg"""
  ordinal: Int!

  """Outcome for the leg"""
  outcome: LegOutcome!

  """Selected participant of the leg"""
  participant: Participant

  """Unique identifier for the bet to which this leg belongs"""
  placedBetId: ID!

  """Points for the leg"""
  points: Points

  """Whether the leg has been regraded"""
  regraded: Boolean!

  """Stitched live event"""
  richEvent: Node
}

"""Object grouping leg based on their event"""
type LegEventGrouping {
  """The event id associated with the grouping"""
  eventId: ID!

  """Legs of the grouping"""
  legs: [Leg!]!

  """Total odds of the grouping"""
  odds: Odds

  """Outcome for the leg event grouping"""
  outcome: LegOutcome

  """Whether the leg event grouping has been regraded"""
  regraded: Boolean
}

"""Object containing details for the history of a leg"""
type LegHistory {
  """Selection order of the leg"""
  ordinal: Int!

  """Outcome of the leg"""
  outcome: LegOutcome!

  """Whether the leg has been regraded"""
  regraded: Boolean!

  """Update type of the leg"""
  updateType: LegUpdateType!
}

"""Leg outcome"""
enum LegOutcome {
  """Dead heat"""
  DEAD_HEAT

  """Unknown leg outcome"""
  INVALID

  """Loss"""
  LOSS

  """Pending"""
  PENDING

  """Push"""
  PUSH

  """Unavailable. Only used with backfilled legacy bets."""
  UNAVAILABLE

  """Void"""
  VOID

  """Win"""
  WIN
}

"""Leg update type"""
enum LegUpdateType {
  """Unknown leg update type"""
  INVALID

  """Loss"""
  LOSS

  """Paid out"""
  PAY

  """Placed"""
  PLACED

  """Regraded"""
  REGRADE

  """Ungraded"""
  UNGRADE
}

"""Describes a Light and Wonder casino game launch result"""
type LightAndWonderLaunchCasinoGameResult implements LaunchCasinoGameResult {
  """The embedded redirect url, will be null if request is invalid or fails"""
  embeddedRedirectUrl: String

  """A list of errors on failure, will be null after a success"""
  errors: [LaunchCasinoGameMutationError!]

  """The game inclusion HTML, will be null if request is invalid or fails"""
  gameInclusionHtml: String

  """The game slug"""
  gameSlug: String!

  """
  The session ID related to the game, will be null if request is invalid or fails
  """
  sessionId: String
}

"""A list on multiple markets with selection labels inside bet selectors"""
type LineSelectorMarketCard {
  """Deep link"""
  deepLink(pageType: PageType = PAGE): DeepLink

  """Vegas Event"""
  fallbackEvent: Event!

  """Id"""
  id: ID!

  """
  Parlay Plus flag to indicate this card has a market eligible to parlay plus
  """
  isParlayPlusEligible: Boolean!

  """Markets"""
  markets(pageType: PageType = PAGE): [Market!]!

  """Most Balanced Market ID"""
  mostBalancedMarketId: ID!

  """ID without namespace"""
  rawId: ID!
}

"""Starting Pitcher Settings"""
enum LineTypeModifier {
  """Bet is valid regardless of pitcher settings"""
  ACTION

  """Listed pitchers must start"""
  LISTED

  """Opposing team's pitcher must start"""
  OPPOSING

  """Selected team's pitcher must start"""
  SELECTED
}

"""
A single market with a list of market selections separated. Selection labels outside bet selectors
"""
type ListMarketCard {
  """See all deep link"""
  deepLink(pageType: PageType = PAGE): DeepLink

  """Vegas Event"""
  fallbackEvent: Event!

  """Id"""
  id: ID!

  """
  Parlay Plus flag to indicate this card has a market eligible to parlay plus
  """
  isParlayPlusEligible: Boolean!

  """Market"""
  market(pageType: PageType = PAGE): Market

  """ID without namespace"""
  rawId: ID!
}

type LiveApiArticle {
  """Short overview of the article"""
  abstract: String

  """Article's ID"""
  articleId: Int!

  """Article's headline"""
  headline: String

  """Deep link to the article in the media app"""
  mediaDeepLinkUrl: String

  """The article's reading time in minutes"""
  readingTime: Int

  """Source that published the article"""
  source: String
}

type LiveApiBaseballBoxScore implements LiveApiBoxScore & Node {
  """Away team's score"""
  awayScore: Int!

  """Away team errors"""
  awayScoreErrors: Int!

  """Away team hits"""
  awayScoreHits: Int!

  """Away team runs"""
  awayScoreRuns: Int!

  """
  Number of ball for current at bat, `null` if no one is batting currently
  """
  balls: Int

  """Is first base occupied?"""
  firstBaseOccupied: Boolean!

  """Home team's score"""
  homeScore: Int!

  """Home team errors"""
  homeScoreErrors: Int!

  """Home team hits"""
  homeScoreHits: Int!

  """Home team runs"""
  homeScoreRuns: Int!

  """The ID of an object"""
  id: ID!

  """Last play, sourced from the betting data feed"""
  liveLastPlay: String

  """
  Number of outs for batting team's half of the inning, `null` if a team is not batting currently
  """
  outs: Int

  """Current time"""
  progress: LiveApiProgress!

  """Is second base occupied?"""
  secondBaseOccupied: Boolean!

  """Sport this box score relates to"""
  sport: LiveApiSport!

  """
  Number of strikes for current at bat, `null` if no one is batting currently
  """
  strikes: Int

  """Is third base occupied?"""
  thirdBaseOccupied: Boolean!
}

type LiveApiBaseballEvent implements LiveApiEvent & LiveApiSubscribableResource & LiveApiTeamEvent & Node {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """Standings for the away team"""
  awayStanding: LiveApiBaseballStanding
  awayStartingPitcher: LiveApiBaseballPlayer

  """The away team, or nil if the team has not yet been determined"""
  awayTeam: LiveApiBaseballTeam

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """The betworks id associated with the event"""
  betworksId: String

  """
  The betworks live id associated with the event (Betworks live events are separate entities with unique IDs)
  """
  betworksLiveId: String

  """The 'box score' object, contains stats & scores regarding the event"""
  boxScore: LiveApiBaseballBoxScore

  """
  The 'event location' object contains the location and name of stadium this event takes place
  """
  eventLocation: LiveApiEventLocation

  """
  Generic event status.  Use `status` (on the sport specific types) for more details
  """
  eventStatus: LiveApiEventStatus!

  """
  An object containing all relevant information with respect to this event
  """
  gameInfo: LiveApiBaseballGameInfo

  """Standings for the home team"""
  homeStanding: LiveApiBaseballStanding
  homeStartingPitcher: LiveApiBaseballPlayer

  """The home team, or nil if the team has not yet been determined"""
  homeTeam: LiveApiBaseballTeam

  """The ID of an object"""
  id: ID!

  """The lastest available odds for the event"""
  latestOdds: LiveApiBaseballOdds

  """
  The 'primary' league this event is a part of.  May support multiple leagues in
  the future (for events shared between PGA/EPGA).
  """
  league: LiveApiBaseballLeague

  """Deeplink URL to this event on the media app"""
  mediaDeepLinkUrl: String!

  """A list of all available odds data for the event"""
  odds: [LiveApiBaseballOdds]!

  """Get various polls for the current event"""
  polls(status: LiveApiPollStatus!, types: [LiveApiPollType!]!): [LiveApiPoll!]

  """
  A preview article for the event. By default the preview will only display
  before the game start, afterwards it will be null
  
  To always display the preview, set the `alwaysShow` flag to `true`
  """
  preview(alwaysShow: Boolean = false): LiveApiArticle

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Sport of this event"""
  sport: LiveApiSport!

  """The event's start date/time"""
  startsAt: DateTime

  """Status of the event"""
  status: LiveApiBaseballEventStatus!

  """The URL for the corresponding event page on stubhub.ca"""
  stubhubUrl: String

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!

  """Whether the event date is TBA or not"""
  tba: Boolean

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiBaseballWeatherForecast
}

enum LiveApiBaseballEventStatus {
  CANCELLED
  DELAYED
  FINAL
  HALF_OVER
  IN_PROGRESS
  POSTPONED
  PRE_GAME
  SUSPENDED
}

type LiveApiBaseballGameInfo implements LiveApiGameInfo {
  """
  The 'event location' object contains the location and name of stadium this event takes place
  """
  eventLocation: LiveApiEventLocation

  """The event's start date/time, in Etc/UTC timezone"""
  startsAt: DateTime

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiBaseballWeatherForecast
}

type LiveApiBaseballInjury implements LiveApiInjury & Node {
  """The ID of an object"""
  id: ID!

  """Date and Time of player's injury"""
  injuredAt: DateTime

  """Player's injury status e.g. day-to-day"""
  injuryStatus: String

  """
  Description of player's injury, including all relevant information such as
  injury type and location e.g. Torn UCL, right elbow
  """
  note: String

  """Sport this injured player plays for"""
  sport: LiveApiSport!
}

type LiveApiBaseballLeague implements LiveApiLeague & LiveApiSubscribableResource & Node {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """
  Describes the format of the league, some example values could be: team | individual | tournament
  """
  competitionType: LiveApiCompetitionType!

  """
  Daily rollover time represents the time (in UTC) at which 'current' events
  rollover to 'previous'. Events are considered 'current' up until the rollover
  time the next day.
  """
  dailyRolloverTime: String!

  """
  The full extended name of the league, for example 'National Basketball Association'
  """
  fullName: String!

  """The ID of an object"""
  id: ID!

  """A longer version of the league's name, for example 'NBA Basketball'"""
  mediumName: String!

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Describes whether the league is a men's or women's league"""
  sex: LiveApiSex!

  """A short version of the league's name, for example 'NBA'"""
  shortName: String!

  """Unique internal identifier for a league.  For example, 'nba'"""
  slug: String!

  """Sport this league is in"""
  sport: LiveApiSport!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!
}

type LiveApiBaseballOdds implements LiveApiOdds & LiveApiTeamOdds & Node {
  """API ID for the odds (ex. 134)"""
  apiId: ID! @deprecated(reason: "For now, see Live")

  """The API URI for the odds (ex. /nhl/timestamped_odds/134)"""
  apiUri: String!

  """
  Deep link URL for adding the away moneyline market to the betslip in theScore Bet
  """
  awayMoneylineBetslipUrl: String

  """Betworks line type code for away moneyline markets"""
  awayMoneylineLineType: LiveApiLineType

  """Money line market id for away team"""
  awayMoneylineMarketId: String

  """Money line odds for away team"""
  awayMoneylineOdds: Int

  """String formatted money line odds for away team"""
  awayMoneylineOddsString: String

  """Point spread for away team to cover"""
  awaySpread: Float

  """
  Deep link URL for adding the away spread market to the betslip in theScore Bet
  """
  awaySpreadBetslipUrl: String

  """Betworks line type code for away spread markets"""
  awaySpreadLineType: LiveApiLineType

  """Market id for point spread for away team to cover"""
  awaySpreadMarketId: String

  """Odds for point spread for away team to cover"""
  awaySpreadOdds: Int

  """String formatted odds for point spread for away team to cover"""
  awaySpreadOddsString: String

  """String formatted point spread for away team to cover"""
  awaySpreadString: String

  """Date odds were received"""
  date: DateTime
  favouredAlignment: LiveApiFavouredAlignment
  favouredTeam: LiveApiBaseballTeam

  """
  Deep link URL for adding the home moneyline market to the betslip in theScore Bet
  """
  homeMoneylineBetslipUrl: String

  """Betworks line type code for home moneyline markets"""
  homeMoneylineLineType: LiveApiLineType

  """Money line market id for home team"""
  homeMoneylineMarketId: String

  """Money line odds for home team"""
  homeMoneylineOdds: Int

  """String formatted money line odds for home team"""
  homeMoneylineOddsString: String

  """Point spread for home team to cover"""
  homeSpread: Float

  """
  Deep link URL for adding the home spread market to the betslip in theScore Bet
  """
  homeSpreadBetslipUrl: String

  """Betworks line type code for home spread markets"""
  homeSpreadLineType: LiveApiLineType

  """Market id for point spread for home team to cover"""
  homeSpreadMarketId: String

  """Odds for point spread for home team to cover"""
  homeSpreadOdds: Int

  """String formatted odds for point spread for home team to cover"""
  homeSpreadOddsString: String

  """String formatted point spread for home team to cover"""
  homeSpreadString: String

  """The ID of an object"""
  id: ID!

  """
  Deep link URL for adding the over total market to the betslip in theScore Bet
  """
  overBetslipUrl: String

  """Betworks line type code for over markets"""
  overLineType: LiveApiLineType

  """Market id for total score being over total"""
  overMarketId: String

  """Odds for total score being over total"""
  overOdds: Int

  """String formatted odds for total score being over total"""
  overOddsString: String

  """Sport these odds relate to"""
  sport: LiveApiSport!

  """Total (for over/under bet)"""
  total: Float

  """String formatted total (for over/under bet)"""
  totalString: String

  """
  Deep link URL for adding the under total market to the betslip in theScore Bet
  """
  underBetslipUrl: String

  """Betworks line type code for under markets"""
  underLineType: LiveApiLineType

  """market id for total score being under total"""
  underMarketId: String

  """Odds for total score being under total"""
  underOdds: Int

  """String formatted odds for total score being under total"""
  underOddsString: String
}

type LiveApiBaseballPlayer implements LiveApiPlayer & LiveApiTeamPlayer & Node {
  """Player's first name"""
  firstName: String!

  """Player's full name"""
  fullName: String!

  """The ID of an object"""
  id: ID!
  injuries: [LiveApiBaseballInjury]

  """Player's last name"""
  lastName: String!

  """Player's position"""
  position: String

  """Player's professional name -> first initial and last name"""
  professionalName: String!

  """Sport this player plays for"""
  sport: LiveApiSport!
}

type LiveApiBaseballStanding implements LiveApiTeamStanding & Node {
  """The ID of an object"""
  id: ID!
  rankAndRecordString: String
  rankString: String
  shortRecord: String

  """Sport this standing relates to"""
  sport: LiveApiSport!
}

type LiveApiBaseballTeam implements LiveApiSubscribableResource & LiveApiTeam & Node {
  """Abbreviation (i.e. EDM)"""
  abbreviation: String!

  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """Primary colour"""
  colour1: LiveApiColour

  """Secondary colour"""
  colour2: LiveApiColour

  """Full name (i.e. Edmonton Oilers)"""
  fullName: String!

  """The ID of an object"""
  id: ID!
  injuredPlayers: [LiveApiBaseballPlayer!]!
  leagues: [LiveApiBaseballLeague!]!

  """Team's logos"""
  logos: LiveApiTeamLogo!

  """Medium name (i.e. Edmonton)"""
  mediumName: String!

  """Name (i.e. Maple Leafs)"""
  name: String

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Short name (i.e. Edmonton)"""
  shortName: String!

  """Sport this team plays for"""
  sport: LiveApiSport!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!
}

type LiveApiBaseballWeatherForecast implements LiveApiWeatherForecast & Node {
  """Short description of the weather forecast at the event"""
  condition: String

  """Full description of weather forecast at the event"""
  conditionDetails: String
  formattedForecast(units: LiveApiMeasurementUnit): String

  """The ID of an object"""
  id: ID!
  probabilityOfPrecipitation: Int

  """Sport this forecast relates to"""
  sport: LiveApiSport!
  temperature(units: LiveApiMeasurementUnit): LiveApiTemperature
  windForecast(units: LiveApiMeasurementUnit): LiveApiWindForecast
}

type LiveApiBasketballBoxScore implements LiveApiBoxScore & Node {
  """
  Away team in the bonus? `nil` if we don't get bonus data for this league
  """
  awayBonus: Boolean

  """Away team's score"""
  awayScore: Int!

  """Away teams number of timeouts remaining, not sure when `null`"""
  awayTimeoutsLeft: Int

  """
  Home team in the bonus? `nil` if we don't get bonus data for this league
  """
  homeBonus: Boolean

  """Home team's score"""
  homeScore: Int!

  """Home teams number of timeouts remaining, not sure when `null`"""
  homeTimeoutsLeft: Int

  """The ID of an object"""
  id: ID!

  """Last play, sourced from the betting data feed"""
  liveLastPlay: String
  progress: LiveApiProgress!

  """Sport this box score relates to"""
  sport: LiveApiSport!
}

type LiveApiBasketballEvent implements LiveApiEvent & LiveApiSubscribableResource & LiveApiTeamEvent & Node {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """Standings for the away team"""
  awayStanding: LiveApiBasketballStanding

  """The away team, or nil if the team has not yet been determined"""
  awayTeam: LiveApiBasketballTeam

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """The betworks id associated with the event"""
  betworksId: String

  """
  The betworks live id associated with the event (Betworks live events are separate entities with unique IDs)
  """
  betworksLiveId: String

  """The 'box score' object, contains stats & scores regarding the event"""
  boxScore: LiveApiBasketballBoxScore

  """
  The 'event location' object contains details on the location of the event
  """
  eventLocation: LiveApiEventLocation

  """
  Generic event status.  Use `status` (on the sport specific types) for more details
  """
  eventStatus: LiveApiEventStatus!

  """
  An object containing all relevant information with respect to this event
  """
  gameInfo: LiveApiBasketballGameInfo

  """Standings for the home team"""
  homeStanding: LiveApiBasketballStanding

  """The home team, or nil if the team has not yet been determined"""
  homeTeam: LiveApiBasketballTeam

  """The ID of an object"""
  id: ID!

  """The lastest available odds for the event"""
  latestOdds: LiveApiBasketballOdds

  """
  The 'primary' league this event is a part of.  May support multiple leagues in
  the future (for events shared between PGA/EPGA).
  """
  league: LiveApiBasketballLeague

  """Deeplink URL to this event on the media app"""
  mediaDeepLinkUrl: String!

  """A list of all available odds data for the event"""
  odds: [LiveApiBasketballOdds]!

  """Get various polls for the current event"""
  polls(status: LiveApiPollStatus!, types: [LiveApiPollType!]!): [LiveApiPoll!]

  """
  A preview article for the event. By default the preview will only display
  before the game start, afterwards it will be null
  
  To always display the preview, set the `alwaysShow` flag to `true`
  """
  preview(alwaysShow: Boolean = false): LiveApiArticle

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Sport of this event"""
  sport: LiveApiSport!

  """The event's start date/time"""
  startsAt: DateTime

  """Status of the event"""
  status: LiveApiBasketballEventStatus!

  """The URL for the corresponding event page on stubhub.ca"""
  stubhubUrl: String

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!

  """Whether the event date is TBA or not"""
  tba: Boolean

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiWeatherForecast
}

enum LiveApiBasketballEventStatus {
  CANCELLED
  DELAYED
  FINAL
  HALF_OVER
  IN_PROGRESS
  POSTPONED
  PRE_GAME
  SUSPENDED
}

type LiveApiBasketballGameInfo implements LiveApiGameInfo {
  """
  The 'event location' object contains the location and name of stadium this event takes place
  """
  eventLocation: LiveApiEventLocation

  """The event's start date/time, in Etc/UTC timezone"""
  startsAt: DateTime

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiWeatherForecast
}

type LiveApiBasketballInjury implements LiveApiInjury & Node {
  """The ID of an object"""
  id: ID!

  """Date and Time of player's injury"""
  injuredAt: DateTime

  """Player's injury status e.g. day-to-day"""
  injuryStatus: String

  """
  Description of player's injury, including all relevant information such as
  injury type and location e.g. Torn UCL, right elbow
  """
  note: String

  """Sport this injured player plays for"""
  sport: LiveApiSport!
}

type LiveApiBasketballLeague implements LiveApiLeague & LiveApiSubscribableResource & Node {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """
  Describes the format of the league, some example values could be: team | individual | tournament
  """
  competitionType: LiveApiCompetitionType!

  """
  Daily rollover time represents the time (in UTC) at which 'current' events
  rollover to 'previous'. Events are considered 'current' up until the rollover
  time the next day.
  """
  dailyRolloverTime: String!

  """
  The full extended name of the league, for example 'National Basketball Association'
  """
  fullName: String!

  """The ID of an object"""
  id: ID!

  """A longer version of the league's name, for example 'NBA Basketball'"""
  mediumName: String!

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Describes whether the league is a men's or women's league"""
  sex: LiveApiSex!

  """A short version of the league's name, for example 'NBA'"""
  shortName: String!

  """Unique internal identifier for a league.  For example, 'nba'"""
  slug: String!

  """Sport this league is in"""
  sport: LiveApiSport!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!
}

type LiveApiBasketballOdds implements LiveApiOdds & LiveApiTeamOdds & Node {
  """API ID for the odds (ex. 134)"""
  apiId: ID! @deprecated(reason: "For now, see Live")

  """The API URI for the odds (ex. /nhl/timestamped_odds/134)"""
  apiUri: String!

  """
  Deep link URL for adding the away moneyline market to the betslip in theScore Bet
  """
  awayMoneylineBetslipUrl: String

  """Betworks line type code for away moneyline markets"""
  awayMoneylineLineType: LiveApiLineType

  """Money line market id for away team"""
  awayMoneylineMarketId: String

  """Money line odds for away team"""
  awayMoneylineOdds: Int

  """String formatted money line odds for away team"""
  awayMoneylineOddsString: String

  """Point spread for away team to cover"""
  awaySpread: Float

  """
  Deep link URL for adding the away spread market to the betslip in theScore Bet
  """
  awaySpreadBetslipUrl: String

  """Betworks line type code for away spread markets"""
  awaySpreadLineType: LiveApiLineType

  """Market id for point spread for away team to cover"""
  awaySpreadMarketId: String

  """Odds for point spread for away team to cover"""
  awaySpreadOdds: Int

  """String formatted odds for point spread for away team to cover"""
  awaySpreadOddsString: String

  """String formatted point spread for away team to cover"""
  awaySpreadString: String

  """Date odds were received"""
  date: DateTime
  favouredAlignment: LiveApiFavouredAlignment
  favouredTeam: LiveApiBasketballTeam

  """
  Deep link URL for adding the home moneyline market to the betslip in theScore Bet
  """
  homeMoneylineBetslipUrl: String

  """Betworks line type code for home moneyline markets"""
  homeMoneylineLineType: LiveApiLineType

  """Money line market id for home team"""
  homeMoneylineMarketId: String

  """Money line odds for home team"""
  homeMoneylineOdds: Int

  """String formatted money line odds for home team"""
  homeMoneylineOddsString: String

  """Point spread for home team to cover"""
  homeSpread: Float

  """
  Deep link URL for adding the home spread market to the betslip in theScore Bet
  """
  homeSpreadBetslipUrl: String

  """Betworks line type code for home spread markets"""
  homeSpreadLineType: LiveApiLineType

  """Market id for point spread for home team to cover"""
  homeSpreadMarketId: String

  """Odds for point spread for home team to cover"""
  homeSpreadOdds: Int

  """String formatted odds for point spread for home team to cover"""
  homeSpreadOddsString: String

  """String formatted point spread for home team to cover"""
  homeSpreadString: String

  """The ID of an object"""
  id: ID!

  """
  Deep link URL for adding the over total market to the betslip in theScore Bet
  """
  overBetslipUrl: String

  """Betworks line type code for over markets"""
  overLineType: LiveApiLineType

  """Market id for total score being over total"""
  overMarketId: String

  """Odds for total score being over total"""
  overOdds: Int

  """String formatted odds for total score being over total"""
  overOddsString: String

  """Sport these odds relate to"""
  sport: LiveApiSport!

  """Total (for over/under bet)"""
  total: Float

  """String formatted total (for over/under bet)"""
  totalString: String

  """
  Deep link URL for adding the under total market to the betslip in theScore Bet
  """
  underBetslipUrl: String

  """Betworks line type code for under markets"""
  underLineType: LiveApiLineType

  """market id for total score being under total"""
  underMarketId: String

  """Odds for total score being under total"""
  underOdds: Int

  """String formatted odds for total score being under total"""
  underOddsString: String
}

type LiveApiBasketballPlayer implements LiveApiPlayer & LiveApiTeamPlayer & Node {
  """Player's first name"""
  firstName: String!

  """Player's full name"""
  fullName: String!

  """The ID of an object"""
  id: ID!
  injuries: [LiveApiBasketballInjury]

  """Player's last name"""
  lastName: String!

  """Player's position"""
  position: String

  """Player's professional name -> first initial and last name"""
  professionalName: String!

  """Sport this player plays for"""
  sport: LiveApiSport!
}

type LiveApiBasketballStanding implements LiveApiTeamStanding & Node {
  """The ID of an object"""
  id: ID!
  rankAndRecordString: String
  rankString: String
  shortRecord: String

  """Sport this standing relates to"""
  sport: LiveApiSport!
}

type LiveApiBasketballTeam implements LiveApiSubscribableResource & LiveApiTeam & Node {
  """Abbreviation (i.e. EDM)"""
  abbreviation: String!

  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """Primary colour"""
  colour1: LiveApiColour

  """Secondary colour"""
  colour2: LiveApiColour

  """Full name (i.e. Edmonton Oilers)"""
  fullName: String!

  """The ID of an object"""
  id: ID!
  injuredPlayers: [LiveApiBasketballPlayer!]!
  leagues: [LiveApiBasketballLeague!]!

  """Team's logos"""
  logos: LiveApiTeamLogo!

  """Medium name (i.e. Edmonton)"""
  mediumName: String!

  """Name (i.e. Maple Leafs)"""
  name: String

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Short name (i.e. Edmonton)"""
  shortName: String!

  """Sport this team plays for"""
  sport: LiveApiSport!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!
}

"""Object containing betting related fields"""
interface LiveApiBettable {
  """The betworks id associated with the event"""
  betworksId: String

  """
  The betworks live id associated with the event (Betworks live events are separate entities with unique IDs)
  """
  betworksLiveId: String

  """The lastest available odds for the object"""
  latestOdds: LiveApiOdds

  """A list of all available odds data for the object"""
  odds: [LiveApiOdds]!
}

"""Betting Polls"""
type LiveApiBettingPoll implements LiveApiPoll & Node {
  bareId: String!
  closedAt: DateTime

  """The ID of an object"""
  id: ID!
  options: [LiveApiPollOption!]!
  question: String!
  resourceUri: String!
  status: LiveApiPollStatus!
  votesCount: Int!
}

"""Box score object for an event"""
interface LiveApiBoxScore {
  """Away team's score"""
  awayScore: Int!

  """Home team's score"""
  homeScore: Int!

  """Global identifier"""
  id: ID!

  """Last play, sourced from the betting data feed"""
  liveLastPlay: String

  """Current time"""
  progress: LiveApiProgress!

  """Sport this box score relates to"""
  sport: LiveApiSport!
}

"""Colour, in 6 digit hex format, i.e. `00471B`, `D1202F`, `231D72`"""
scalar LiveApiColour

enum LiveApiCompetitionType {
  INDIVIDUAL
  TEAM
  TOURNAMENT
}

"""Represents a team/player/league/event subscription"""
type LiveApiConnectSubscription implements Node {
  """Enabled alerts"""
  alertKeys: [String!]!

  """The ID of an object"""
  id: ID!

  """The subscribed to resource.  May be null if it doesn't exist"""
  subscribedToResource: LiveApiSubscribableResource

  """Resource URI of the subscribed to resource"""
  subscribedToResourceUri: String!
}

"""Used to create or update a subscription"""
input LiveApiConnectSubscriptionInput {
  """The list of alert keys to get alerts for"""
  alertKeys: [String!]!

  """The api_uri for the resource"""
  apiUri: String!

  """The resource_uri for the resource"""
  resourceUri: String!
}

type LiveApiCountry {
  abbreviation: String
  flag: LiveApiFlag
  flags(sizes: [LiveApiFlagSize!]!): [LiveApiImage!]!
  name: String
}

input LiveApiCreateOrUpdateConnectSubscriptionsInput {
  """New or updated subscriptions"""
  subscriptions: [LiveApiConnectSubscriptionInput!]!
}

type LiveApiCreateOrUpdateConnectSubscriptionsPayload {
  """List of created / updated subscriptions"""
  createdOrUpdatedSubscriptions: [LiveApiConnectSubscription!]
}

"""This type namespaces data specific to the current user"""
type LiveApiCurrentUser {
  """The user's team/player/event/league subscriptions"""
  subscriptions: [LiveApiConnectSubscription!]

  """User's votes on polls for a specific event"""
  votes(event: LiveApiIDorURI, events: [LiveApiIDorURI!], pollTypes: [LiveApiPollType!]!): [LiveApiVote!]
}

"""Used to delete a subscription"""
input LiveApiDeleteConnectSubscriptionInput {
  """The the resource_uri for the resource"""
  resourceUri: String!
}

input LiveApiDeleteConnectSubscriptionsInput {
  """New or updated subscriptions"""
  subscriptions: [LiveApiDeleteConnectSubscriptionInput!]!
}

type LiveApiDeleteConnectSubscriptionsPayload {
  """Was the request successful?"""
  success: Boolean!
}

"""
Represents an event for team games or single matches whether in a tournament or simple exhibition etc.
"""
interface LiveApiEvent {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """The betworks id associated with the event"""
  betworksId: String

  """
  The betworks live id associated with the event (Betworks live events are separate entities with unique IDs)
  """
  betworksLiveId: String

  """
  The 'event location' object contains details on the location of the event
  """
  eventLocation: LiveApiEventLocation

  """
  Generic event status.  Use `status` (on the sport specific types) for more details
  """
  eventStatus: LiveApiEventStatus!

  """
  An object containing all relevant information with respect to this event
  """
  gameInfo: LiveApiGameInfo
  id: ID!

  """
  The 'primary' league this event is a part of.  May support multiple leagues in
  the future (for events shared between PGA/EPGA).
  """
  league: LiveApiLeague

  """Deeplink URL to this event on the media app"""
  mediaDeepLinkUrl: String!

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Sport of this event"""
  sport: LiveApiSport!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!

  """Whether the event date is TBA or not"""
  tba: Boolean

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiWeatherForecast
}

"""Object containing details regarding the location of the event"""
type LiveApiEventLocation {
  """
  String containing location of event (e.g. State, Province/State, Country etc.)
  """
  location: String

  """Name of stadium event is occuring"""
  stadium: String
}

"""Generic event status"""
enum LiveApiEventStatus {
  """Event was cancelled"""
  CANCELLED

  """Event start is delayed (perhaps due to weather)"""
  DELAYED

  """Event has finished"""
  FINAL

  """Half over status *may not be reliable*"""
  HALF_OVER

  """Event is in progress"""
  IN_PROGRESS

  """Event was postponed to another date"""
  POSTPONED

  """Event hasn't started yet"""
  PRE_GAME

  """Event has been scheduled"""
  SCHEDULED

  """Event was suspended (perhaps due to weather)"""
  SUSPENDED

  """Event was withdrawn"""
  WITHDRAWN
}

"""home, away, draw"""
enum LiveApiFavouredAlignment {
  """away team"""
  AWAY

  """draw"""
  DRAW

  """home team"""
  HOME
}

enum LiveApiFightCard {
  MAIN_CARD
  UNDERCARD
}

type LiveApiFlag {
  w128h128: LiveApiImage
  w20h20: LiveApiImage
  w256h256: LiveApiImage
  w384h384: LiveApiImage
  w40h40: LiveApiImage
  w512h512: LiveApiImage
  w60h60: LiveApiImage
}

enum LiveApiFlagSize {
  W128H128
  W20H20
  W256H256
  W384H384
  W40H40
  W512H512
  W60H60
}

"""A football box score"""
type LiveApiFootballBoxScore implements LiveApiBoxScore & Node {
  """Away team's score"""
  awayScore: Int!

  """Away teams number of timeouts remaining, `null` during half time???"""
  awayTimeoutsLeft: Int

  """
  *Not 100% sure about this field* Should the client display the field position indicator?
  """
  displayFpi: Boolean!

  """Distance to the first down line, `null` during kickoffs, PATs, etc.."""
  distance: Int

  """Current down, `null` during kickoffs, PATs, etc..."""
  down: Int

  """Formatted distance, i.e. '6', or 'Goal'"""
  formattedDistance: String

  """Formatted field position, i.e. 'DAL 23' `field_position` field in API"""
  formattedFieldPosition: String

  """Home team's score"""
  homeScore: Int!

  """Home teams number of timeouts remaining, `null` during half time???"""
  homeTimeoutsLeft: Int

  """The ID of an object"""
  id: ID!

  """Last play, sourced from the betting data feed"""
  liveLastPlay: String

  """Which position, `null` during kickoffs, PATs, etc..."""
  possession: LiveApiTeamAlignment
  progress: LiveApiProgress!

  """In the red zone?"""
  redZone: Boolean!

  """Sport this box score relates to"""
  sport: LiveApiSport!

  """Last play currently under video review?"""
  underReview: Boolean!

  """Distance to goal line, `null` during kickoffs, PATs, etc..."""
  yardsFromGoal: Int
}

type LiveApiFootballEvent implements LiveApiEvent & LiveApiSubscribableResource & LiveApiTeamEvent & Node {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """Standings for the away team"""
  awayStanding: LiveApiFootballStanding

  """The away team, or nil if the team has not yet been determined"""
  awayTeam: LiveApiFootballTeam

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """The betworks id associated with the event"""
  betworksId: String

  """
  The betworks live id associated with the event (Betworks live events are separate entities with unique IDs)
  """
  betworksLiveId: String

  """The 'box score' object, contains stats & scores regarding the event"""
  boxScore: LiveApiFootballBoxScore

  """
  The 'event location' object contains details on the location of the event
  """
  eventLocation: LiveApiEventLocation

  """
  Generic event status.  Use `status` (on the sport specific types) for more details
  """
  eventStatus: LiveApiEventStatus!

  """
  An object containing all relevant information with respect to this event
  """
  gameInfo: LiveApiFootballGameInfo

  """Standings for the home team"""
  homeStanding: LiveApiFootballStanding

  """The home team, or nil if the team has not yet been determined"""
  homeTeam: LiveApiFootballTeam

  """The ID of an object"""
  id: ID!

  """The lastest available odds for the event"""
  latestOdds: LiveApiFootballOdds

  """
  The 'primary' league this event is a part of.  May support multiple leagues in
  the future (for events shared between PGA/EPGA).
  """
  league: LiveApiFootballLeague

  """Deeplink URL to this event on the media app"""
  mediaDeepLinkUrl: String!

  """A list of all available odds data for the event"""
  odds: [LiveApiFootballOdds]!

  """Get various polls for the current event"""
  polls(status: LiveApiPollStatus!, types: [LiveApiPollType!]!): [LiveApiPoll!]

  """
  A preview article for the event. By default the preview will only display
  before the game start, afterwards it will be null
  
  To always display the preview, set the `alwaysShow` flag to `true`
  """
  preview(alwaysShow: Boolean = false): LiveApiArticle

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Sport of this event"""
  sport: LiveApiSport!

  """The event's start date/time"""
  startsAt: DateTime

  """Status of the event"""
  status: LiveApiFootballEventStatus!

  """The URL for the corresponding event page on stubhub.ca"""
  stubhubUrl: String

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!

  """Whether the event date is TBA or not"""
  tba: Boolean

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiFootballWeatherForecast
}

enum LiveApiFootballEventStatus {
  CANCELLED
  DELAYED
  FINAL
  FORFEIT_AWAY
  FORFEIT_BOTH
  FORFEIT_HOME
  HALF_OVER
  IN_PROGRESS
  POSTPONED
  PRE_GAME
  SUSPENDED
}

type LiveApiFootballGameInfo implements LiveApiGameInfo {
  """
  The 'event location' object contains the location and name of stadium this event takes place
  """
  eventLocation: LiveApiEventLocation

  """The event's start date/time, in Etc/UTC timezone"""
  startsAt: DateTime

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiFootballWeatherForecast
}

type LiveApiFootballInjury implements LiveApiInjury & Node {
  """The ID of an object"""
  id: ID!

  """Date and Time of player's injury"""
  injuredAt: DateTime

  """Player's injury status e.g. day-to-day"""
  injuryStatus: String

  """
  Description of player's injury, including all relevant information such as
  injury type and location e.g. Torn UCL, right elbow
  """
  note: String

  """Sport this injured player plays for"""
  sport: LiveApiSport!
}

type LiveApiFootballLeague implements LiveApiLeague & LiveApiSubscribableResource & Node {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """
  Describes the format of the league, some example values could be: team | individual | tournament
  """
  competitionType: LiveApiCompetitionType!

  """
  Daily rollover time represents the time (in UTC) at which 'current' events
  rollover to 'previous'. Events are considered 'current' up until the rollover
  time the next day.
  """
  dailyRolloverTime: String!

  """
  The full extended name of the league, for example 'National Basketball Association'
  """
  fullName: String!

  """The ID of an object"""
  id: ID!

  """A longer version of the league's name, for example 'NBA Basketball'"""
  mediumName: String!

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Describes whether the league is a men's or women's league"""
  sex: LiveApiSex!

  """A short version of the league's name, for example 'NBA'"""
  shortName: String!

  """Unique internal identifier for a league.  For example, 'nba'"""
  slug: String!

  """Sport this league is in"""
  sport: LiveApiSport!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!
}

type LiveApiFootballOdds implements LiveApiOdds & LiveApiTeamOdds & Node {
  """API ID for the odds (ex. 134)"""
  apiId: ID! @deprecated(reason: "For now, see Live")

  """The API URI for the odds (ex. /nhl/timestamped_odds/134)"""
  apiUri: String!

  """
  Deep link URL for adding the away moneyline market to the betslip in theScore Bet
  """
  awayMoneylineBetslipUrl: String

  """Betworks line type code for away moneyline markets"""
  awayMoneylineLineType: LiveApiLineType

  """Money line market id for away team"""
  awayMoneylineMarketId: String

  """Money line odds for away team"""
  awayMoneylineOdds: Int

  """String formatted money line odds for away team"""
  awayMoneylineOddsString: String

  """Point spread for away team to cover"""
  awaySpread: Float

  """
  Deep link URL for adding the away spread market to the betslip in theScore Bet
  """
  awaySpreadBetslipUrl: String

  """Betworks line type code for away spread markets"""
  awaySpreadLineType: LiveApiLineType

  """Market id for point spread for away team to cover"""
  awaySpreadMarketId: String

  """Odds for point spread for away team to cover"""
  awaySpreadOdds: Int

  """String formatted odds for point spread for away team to cover"""
  awaySpreadOddsString: String

  """String formatted point spread for away team to cover"""
  awaySpreadString: String

  """Date odds were received"""
  date: DateTime
  favouredAlignment: LiveApiFavouredAlignment
  favouredTeam: LiveApiFootballTeam

  """
  Deep link URL for adding the home moneyline market to the betslip in theScore Bet
  """
  homeMoneylineBetslipUrl: String

  """Betworks line type code for home moneyline markets"""
  homeMoneylineLineType: LiveApiLineType

  """Money line market id for home team"""
  homeMoneylineMarketId: String

  """Money line odds for home team"""
  homeMoneylineOdds: Int

  """String formatted money line odds for home team"""
  homeMoneylineOddsString: String

  """Point spread for home team to cover"""
  homeSpread: Float

  """
  Deep link URL for adding the home spread market to the betslip in theScore Bet
  """
  homeSpreadBetslipUrl: String

  """Betworks line type code for home spread markets"""
  homeSpreadLineType: LiveApiLineType

  """Market id for point spread for home team to cover"""
  homeSpreadMarketId: String

  """Odds for point spread for home team to cover"""
  homeSpreadOdds: Int

  """String formatted odds for point spread for home team to cover"""
  homeSpreadOddsString: String

  """String formatted point spread for home team to cover"""
  homeSpreadString: String

  """The ID of an object"""
  id: ID!

  """
  Deep link URL for adding the over total market to the betslip in theScore Bet
  """
  overBetslipUrl: String

  """Betworks line type code for over markets"""
  overLineType: LiveApiLineType

  """Market id for total score being over total"""
  overMarketId: String

  """Odds for total score being over total"""
  overOdds: Int

  """String formatted odds for total score being over total"""
  overOddsString: String

  """Sport these odds relate to"""
  sport: LiveApiSport!

  """Total (for over/under bet)"""
  total: Float

  """String formatted total (for over/under bet)"""
  totalString: String

  """
  Deep link URL for adding the under total market to the betslip in theScore Bet
  """
  underBetslipUrl: String

  """Betworks line type code for under markets"""
  underLineType: LiveApiLineType

  """market id for total score being under total"""
  underMarketId: String

  """Odds for total score being under total"""
  underOdds: Int

  """String formatted odds for total score being under total"""
  underOddsString: String
}

type LiveApiFootballPlayer implements LiveApiPlayer & LiveApiTeamPlayer & Node {
  """Player's first name"""
  firstName: String!

  """Player's full name"""
  fullName: String!

  """The ID of an object"""
  id: ID!
  injuries: [LiveApiFootballInjury]

  """Player's last name"""
  lastName: String!

  """Player's position"""
  position: String

  """Player's professional name -> first initial and last name"""
  professionalName: String!

  """Sport this player plays for"""
  sport: LiveApiSport!
}

type LiveApiFootballStanding implements LiveApiTeamStanding & Node {
  """The ID of an object"""
  id: ID!
  rankAndRecordString: String
  rankString: String
  shortRecord: String

  """Sport this standing relates to"""
  sport: LiveApiSport!
}

type LiveApiFootballTeam implements LiveApiSubscribableResource & LiveApiTeam & Node {
  """Abbreviation (i.e. EDM)"""
  abbreviation: String!

  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """Primary colour"""
  colour1: LiveApiColour

  """Secondary colour"""
  colour2: LiveApiColour

  """Full name (i.e. Edmonton Oilers)"""
  fullName: String!

  """The ID of an object"""
  id: ID!
  injuredPlayers: [LiveApiFootballPlayer!]!
  leagues: [LiveApiFootballLeague!]!

  """Team's logos"""
  logos: LiveApiTeamLogo!

  """Medium name (i.e. Edmonton)"""
  mediumName: String!

  """Name (i.e. Maple Leafs)"""
  name: String

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Short name (i.e. Edmonton)"""
  shortName: String!

  """Sport this team plays for"""
  sport: LiveApiSport!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!
}

type LiveApiFootballWeatherForecast implements LiveApiWeatherForecast & Node {
  condition: String
  conditionDetails: String
  formattedForecast(units: LiveApiMeasurementUnit): String

  """The ID of an object"""
  id: ID!
  probabilityOfPrecipitation: Int

  """Sport this forecast relates to"""
  sport: LiveApiSport!
  temperature(units: LiveApiMeasurementUnit): LiveApiTemperature
  windForecast(units: LiveApiMeasurementUnit): LiveApiWindForecast
}

"""Object containing all information relevant to the game"""
interface LiveApiGameInfo {
  """
  The 'event location' object contains the location and name of stadium this event takes place
  """
  eventLocation: LiveApiEventLocation

  """The event's start date/time, in Etc/UTC timezone"""
  startsAt: DateTime

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiWeatherForecast
}

type LiveApiGolfCourse implements Node {
  """The name of the club the course belongs to"""
  clubName: String!

  """The course's holes"""
  holes: [LiveApiGolfHole!]!

  """The ID of an object"""
  id: ID!
  images(sizes: [LiveApiGolfCourseImageSize!]!): [LiveApiImage!]!

  """The name of the course"""
  name: String!

  """Par for the entire course"""
  par: Int!

  """Yardage for the entire course"""
  yardage: Int!
}

enum LiveApiGolfCourseImageSize {
  W750XH563
}

type LiveApiGolfCupPlayEvent implements LiveApiEvent & LiveApiGolfEvent & LiveApiGolfSingleEvent & LiveApiSubscribableResource & Node {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """The betworks id associated with the event"""
  betworksId: String

  """
  The betworks live id associated with the event (Betworks live events are separate entities with unique IDs)
  """
  betworksLiveId: String

  """Weather conditions"""
  condition: LiveApiGolfEventCondition
  courses: [LiveApiGolfCourse!]!
  currentRound: LiveApiGolfRound

  """The tournament's end date/time"""
  endsAt: DateTime

  """
  The 'event location' object contains details on the location of the event
  """
  eventLocation: LiveApiEventLocation

  """
  Generic event status.  Use `status` (on the sport specific types) for more details
  """
  eventStatus: LiveApiEventStatus!

  """The type of event"""
  eventType: LiveApiGolfEventType!

  """
  An object containing all relevant information with respect to this event
  """
  gameInfo: LiveApiGameInfo

  """The ID of an object"""
  id: ID!

  """
  The 'primary' league this event is a part of.  May support multiple leagues in
  the future (for events shared between PGA/EPGA).
  """
  league: LiveApiLeague

  """Location of the event"""
  location: String

  """Manual description"""
  manualDescription: String

  """Deeplink URL to this event on the media app"""
  mediaDeepLinkUrl: String!
  playerEventRecords(order: LiveApiGolfPlayerEventRecordOrder, scope: LiveApiGolfPlayerEventRecordScope): [LiveApiGolfPlayerEventRecord!]!

  """Currency the prize is in"""
  prizeCurrency: String

  """Prize amount"""
  prizePurseDollars: Int

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!
  rosters: [LiveApiGolfRoster!]!
  rounds: [LiveApiGolfRound!]!

  """The scoring system for the event"""
  scoringSystem: LiveApiGolfEventScoringSystem!

  """The golf seasons"""
  seasons: [LiveApiGolfSeason!]!

  """Sport of this event"""
  sport: LiveApiSport!

  """The tournament's start date/time"""
  startsAt: DateTime

  """More detailed info about the event's status"""
  status: LiveApiGolfEventStatus!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!

  """Whether the event date is TBA or not"""
  tba: Boolean

  """Temperature"""
  temperature: String

  """Tournament's name"""
  tournamentName: String

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiWeatherForecast

  """Wind"""
  wind: String
}

type LiveApiGolfDuo implements Node {
  externalId: String!

  """The ID of an object"""
  id: ID!

  """Name of the duo"""
  name: String!

  """The players that belong to the duo"""
  players: [LiveApiGolfPlayer!]!
}

interface LiveApiGolfDuoEvent {
  duoEventRecords(order: LiveApiGolfPlayerEventRecordOrder, scope: LiveApiGolfPlayerEventRecordScope): [LiveApiGolfDuoEventRecord!]!
}

type LiveApiGolfDuoEventRecord implements LiveApiGolfEventRecord & Node {
  duo: LiveApiGolfDuo
  duoRoundRecords(order: LiveApiGolfRoundRecordOrder): [LiveApiGolfDuoRoundRecord!]!
  earningsCurrency: String
  earningsDollars: Int
  event: LiveApiGolfEvent!
  formattedEarningsDollars: String
  formattedRank: String

  """The ID of an object"""
  id: ID!
  rank: Int
  rankTied: Boolean!
  score: Int
  status: LiveApiGolfPlayerEventRecordStatus!
  strokes: Int
}

type LiveApiGolfDuoRoundRecord implements LiveApiGolfRoundRecord & Node {
  backNine: Boolean
  holesPlayed: Int

  """The ID of an object"""
  id: ID!
  round: LiveApiGolfRound!
  score: Int
  status: LiveApiGolfPlayerRoundRecordStatus
  strokes: Int
  teeTime: DateTime
}

interface LiveApiGolfEvent {
  """Weather conditions"""
  condition: LiveApiGolfEventCondition
  courses: [LiveApiGolfCourse!]!
  currentRound: LiveApiGolfRound

  """The tournament's end date/time"""
  endsAt: DateTime

  """
  Generic event status.  Use `status` (on the sport specific types) for more details
  """
  eventStatus: LiveApiEventStatus!

  """The type of event"""
  eventType: LiveApiGolfEventType!
  id: ID!

  """Location of the event"""
  location: String

  """Manual description"""
  manualDescription: String

  """Currency the prize is in"""
  prizeCurrency: String

  """Prize amount"""
  prizePurseDollars: Int
  rosters: [LiveApiGolfRoster!]!
  rounds: [LiveApiGolfRound!]!

  """The scoring system for the event"""
  scoringSystem: LiveApiGolfEventScoringSystem!

  """The golf seasons"""
  seasons: [LiveApiGolfSeason!]!

  """The tournament's start date/time"""
  startsAt: DateTime

  """More detailed info about the event's status"""
  status: LiveApiGolfEventStatus!

  """Temperature"""
  temperature: String

  """Tournament's name"""
  tournamentName: String

  """Wind"""
  wind: String
}

enum LiveApiGolfEventCondition {
  CLOUDY
  PARTLY_SUNNY
  RAIN
  SUNNY
}

interface LiveApiGolfEventRecord {
  earningsCurrency: String
  earningsDollars: Int
  event: LiveApiGolfEvent!
  formattedEarningsDollars: String
  formattedRank: String
  id: ID!
  rank: Int
  rankTied: Boolean!
  score: Int
  status: LiveApiGolfPlayerEventRecordStatus!
  strokes: Int
}

enum LiveApiGolfEventScoringSystem {
  MATCH
  STABLEFORD
  STROKE
}

enum LiveApiGolfEventStatus {
  CANCELLED
  DELAYED
  FINAL
  IN_PROGRESS
  POSTPONED
  SCHEDULED
  SUSPENDED
}

enum LiveApiGolfEventType {
  CUP_PLAY
  MATCH_PLAY
  STROKE_PLAY
  TEAM_PLAY
}

type LiveApiGolfHole implements Node {
  """The ID of an object"""
  id: ID!

  """The number of the hole in the sequence eg. 3 for 3rd hole"""
  number: Int!

  """Par for the hole"""
  par: Int!

  """Yardage for the hole"""
  yardage: Int!
}

type LiveApiGolfLeague implements LiveApiLeague & LiveApiSubscribableResource & Node {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """
  Describes the format of the league, some example values could be: team | individual | tournament
  """
  competitionType: LiveApiCompetitionType!

  """
  Daily rollover time represents the time (in UTC) at which 'current' events
  rollover to 'previous'. Events are considered 'current' up until the rollover
  time the next day.
  """
  dailyRolloverTime: String!

  """
  The full extended name of the league, for example 'National Basketball Association'
  """
  fullName: String!

  """The ID of an object"""
  id: ID!

  """A longer version of the league's name, for example 'NBA Basketball'"""
  mediumName: String!

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Describes whether the league is a men's or women's league"""
  sex: LiveApiSex!

  """A short version of the league's name, for example 'NBA'"""
  shortName: String!

  """Unique internal identifier for a league.  For example, 'nba'"""
  slug: String!

  """Sport this league is in"""
  sport: LiveApiSport!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!
}

type LiveApiGolfMatch implements Node {
  """Bare id, used for certain analytics purposes"""
  bareId: Int!

  """Whether the match is complete or not"""
  complete: Boolean!

  """Number of holes played in the match"""
  holesPlayed: Int!

  """Number of holes up in the match"""
  holesUp: Int!

  """The ID of an object"""
  id: ID!

  """The pairing in the lead"""
  leadingPairing: LiveApiGolfPairing

  """The format of the match"""
  matchFormat: LiveApiGolfMatchFormat

  """The type of the match"""
  matchType: LiveApiGolfMatchType

  """Pairings participating in the match"""
  pairings: [LiveApiGolfPairing!]!

  """String based resource uri for the match"""
  resourceUri: String!

  """The score"""
  score: String

  """The match's tee time"""
  teeTime: DateTime
}

enum LiveApiGolfMatchFormat {
  FOURBALL
  FOURSOME
  SINGLES
}

type LiveApiGolfMatchPlayEvent implements LiveApiEvent & LiveApiGolfEvent & LiveApiGolfSingleEvent & LiveApiSubscribableResource & Node {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """The betworks id associated with the event"""
  betworksId: String

  """
  The betworks live id associated with the event (Betworks live events are separate entities with unique IDs)
  """
  betworksLiveId: String

  """Weather conditions"""
  condition: LiveApiGolfEventCondition
  courses: [LiveApiGolfCourse!]!
  currentRound: LiveApiGolfRound

  """The tournament's end date/time"""
  endsAt: DateTime

  """
  The 'event location' object contains details on the location of the event
  """
  eventLocation: LiveApiEventLocation

  """
  Generic event status.  Use `status` (on the sport specific types) for more details
  """
  eventStatus: LiveApiEventStatus!

  """The type of event"""
  eventType: LiveApiGolfEventType!

  """
  An object containing all relevant information with respect to this event
  """
  gameInfo: LiveApiGameInfo

  """The ID of an object"""
  id: ID!

  """
  The 'primary' league this event is a part of.  May support multiple leagues in
  the future (for events shared between PGA/EPGA).
  """
  league: LiveApiLeague

  """Location of the event"""
  location: String

  """Manual description"""
  manualDescription: String

  """Deeplink URL to this event on the media app"""
  mediaDeepLinkUrl: String!
  playerEventRecords(order: LiveApiGolfPlayerEventRecordOrder, scope: LiveApiGolfPlayerEventRecordScope): [LiveApiGolfPlayerEventRecord!]!

  """Currency the prize is in"""
  prizeCurrency: String

  """Prize amount"""
  prizePurseDollars: Int

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!
  rosters: [LiveApiGolfRoster!]!
  rounds: [LiveApiGolfRound!]!

  """The scoring system for the event"""
  scoringSystem: LiveApiGolfEventScoringSystem!

  """The golf seasons"""
  seasons: [LiveApiGolfSeason!]!

  """Sport of this event"""
  sport: LiveApiSport!

  """The tournament's start date/time"""
  startsAt: DateTime

  """More detailed info about the event's status"""
  status: LiveApiGolfEventStatus!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!

  """Whether the event date is TBA or not"""
  tba: Boolean

  """Temperature"""
  temperature: String

  """Tournament's name"""
  tournamentName: String

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiWeatherForecast

  """Wind"""
  wind: String
}

enum LiveApiGolfMatchType {
  CHAMPIONSHIP
  CONSOLATION
  REGULAR
  SEMIFINAL
}

type LiveApiGolfPairing implements Node {
  """Country the pairing is from"""
  country: LiveApiCountry

  """The ID of an object"""
  id: ID!

  """Players that are part of the pairing"""
  players: [LiveApiGolfPlayer!]!

  """The name of the pairing"""
  teamName: String
}

type LiveApiGolfPlayer implements LiveApiPlayer & Node {
  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """The player's country"""
  country: LiveApiCountry!

  """Player's first name"""
  firstName: String!

  """Player's full name"""
  fullName: String!

  """The ID of an object"""
  id: ID!

  """Player's current injuries"""
  injuries: [LiveApiInjury]

  """Player's last name"""
  lastName: String!

  """Players ranking"""
  officialWorldRanking: Int

  """Player's professional name -> first initial and last name"""
  professionalName: String!

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Sport this player plays for"""
  sport: LiveApiSport!

  """Number of subscriptions to this player"""
  subscriptionCount: Int
}

type LiveApiGolfPlayerEventRecord implements LiveApiGolfEventRecord & Node {
  earningsCurrency: String
  earningsDollars: Int
  event: LiveApiGolfEvent!
  formattedEarningsDollars: String
  formattedRank: String

  """The ID of an object"""
  id: ID!
  player: LiveApiGolfPlayer
  playerRoundRecords(order: LiveApiGolfRoundRecordOrder): [LiveApiGolfPlayerRoundRecord!]!
  rank: Int
  rankTied: Boolean!
  score: Int
  status: LiveApiGolfPlayerEventRecordStatus!
  strokes: Int
}

enum LiveApiGolfPlayerEventRecordOrder {
  EVENT_RANK
}

enum LiveApiGolfPlayerEventRecordScope {
  LEADERS
}

enum LiveApiGolfPlayerEventRecordStatus {
  DID_NOT_FINISH
  DID_NOT_START
  DISQUALIFIED
  MISSED_CUT
  SWINGING
  WITHDRAWN
}

type LiveApiGolfPlayerRoundRecord implements LiveApiGolfRoundRecord & Node {
  backNine: Boolean
  holesPlayed: Int

  """The ID of an object"""
  id: ID!
  round: LiveApiGolfRound!
  score: Int
  status: LiveApiGolfPlayerRoundRecordStatus
  strokes: Int
  teeTime: DateTime
}

enum LiveApiGolfPlayerRoundRecordStatus {
  DID_NOT_FINISH
  DID_NOT_START
  DISQUALIFIED
  MISSED_CUT
  ROUND_OVER
  SWINGING
  WITHDRAWN
}

type LiveApiGolfRoster implements Node {
  """Country of origin for the roster"""
  country: LiveApiCountry

  """The ID of an object"""
  id: ID!

  """Roster's pairings"""
  pairings: [LiveApiGolfPairing!]!

  """Players associated with the roster"""
  players: [LiveApiGolfPlayer!]!

  """Rosters score"""
  score: Float

  """Team name for the roster"""
  teamName: String
}

type LiveApiGolfRound implements Node {
  """The ID of an object"""
  id: ID!

  """Matches for this round"""
  matches: [LiveApiGolfMatch!]!

  """Number of round in the sequence eg 3 for 3rd round"""
  number: Int

  """Type of round, either REGULAR or PLAYOFF"""
  roundType: LiveApiGolfRoundType

  """Progress status of the round, eg 'IN PROGRESS'"""
  status: LiveApiGolfRoundStatus
}

interface LiveApiGolfRoundRecord {
  backNine: Boolean
  holesPlayed: Int
  id: ID!
  round: LiveApiGolfRound!
  score: Int
  status: LiveApiGolfPlayerRoundRecordStatus
  strokes: Int
  teeTime: DateTime
}

enum LiveApiGolfRoundRecordOrder {
  TEE_TIME
}

enum LiveApiGolfRoundStatus {
  CANCELLED
  FINAL
  IN_PROGRESS
  SCHEDULED
  SUSPENDED
}

enum LiveApiGolfRoundType {
  PLAYOFF
  REGULAR
}

type LiveApiGolfSeason implements Node {
  """The ID of an object"""
  id: ID!

  """League for this season"""
  league: LiveApiGolfLeague
}

interface LiveApiGolfSingleEvent {
  playerEventRecords(order: LiveApiGolfPlayerEventRecordOrder, scope: LiveApiGolfPlayerEventRecordScope): [LiveApiGolfPlayerEventRecord!]!
}

type LiveApiGolfStrokePlayEvent implements LiveApiEvent & LiveApiGolfEvent & LiveApiGolfSingleEvent & LiveApiSubscribableResource & Node {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """The betworks id associated with the event"""
  betworksId: String

  """
  The betworks live id associated with the event (Betworks live events are separate entities with unique IDs)
  """
  betworksLiveId: String

  """Weather conditions"""
  condition: LiveApiGolfEventCondition
  courses: [LiveApiGolfCourse!]!
  currentRound: LiveApiGolfRound

  """The tournament's end date/time"""
  endsAt: DateTime

  """
  The 'event location' object contains details on the location of the event
  """
  eventLocation: LiveApiEventLocation

  """
  Generic event status.  Use `status` (on the sport specific types) for more details
  """
  eventStatus: LiveApiEventStatus!

  """The type of event"""
  eventType: LiveApiGolfEventType!

  """
  An object containing all relevant information with respect to this event
  """
  gameInfo: LiveApiGameInfo

  """The ID of an object"""
  id: ID!

  """
  The 'primary' league this event is a part of.  May support multiple leagues in
  the future (for events shared between PGA/EPGA).
  """
  league: LiveApiLeague

  """Location of the event"""
  location: String

  """Manual description"""
  manualDescription: String

  """Deeplink URL to this event on the media app"""
  mediaDeepLinkUrl: String!
  playerEventRecords(order: LiveApiGolfPlayerEventRecordOrder, scope: LiveApiGolfPlayerEventRecordScope): [LiveApiGolfPlayerEventRecord!]!

  """Currency the prize is in"""
  prizeCurrency: String

  """Prize amount"""
  prizePurseDollars: Int

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!
  rosters: [LiveApiGolfRoster!]!
  rounds: [LiveApiGolfRound!]!

  """The scoring system for the event"""
  scoringSystem: LiveApiGolfEventScoringSystem!

  """The golf seasons"""
  seasons: [LiveApiGolfSeason!]!

  """Sport of this event"""
  sport: LiveApiSport!

  """The tournament's start date/time"""
  startsAt: DateTime

  """More detailed info about the event's status"""
  status: LiveApiGolfEventStatus!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!

  """Whether the event date is TBA or not"""
  tba: Boolean

  """Temperature"""
  temperature: String

  """Tournament's name"""
  tournamentName: String

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiWeatherForecast

  """Wind"""
  wind: String
}

type LiveApiGolfTeamPlayEvent implements LiveApiEvent & LiveApiGolfDuoEvent & LiveApiGolfEvent & LiveApiSubscribableResource & Node {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """The betworks id associated with the event"""
  betworksId: String

  """
  The betworks live id associated with the event (Betworks live events are separate entities with unique IDs)
  """
  betworksLiveId: String

  """Weather conditions"""
  condition: LiveApiGolfEventCondition
  courses: [LiveApiGolfCourse!]!
  currentRound: LiveApiGolfRound
  duoEventRecords(order: LiveApiGolfPlayerEventRecordOrder, scope: LiveApiGolfPlayerEventRecordScope): [LiveApiGolfDuoEventRecord!]!

  """The tournament's end date/time"""
  endsAt: DateTime

  """
  The 'event location' object contains details on the location of the event
  """
  eventLocation: LiveApiEventLocation

  """
  Generic event status.  Use `status` (on the sport specific types) for more details
  """
  eventStatus: LiveApiEventStatus!

  """The type of event"""
  eventType: LiveApiGolfEventType!

  """
  An object containing all relevant information with respect to this event
  """
  gameInfo: LiveApiGameInfo

  """The ID of an object"""
  id: ID!

  """
  The 'primary' league this event is a part of.  May support multiple leagues in
  the future (for events shared between PGA/EPGA).
  """
  league: LiveApiLeague

  """Location of the event"""
  location: String

  """Manual description"""
  manualDescription: String

  """Deeplink URL to this event on the media app"""
  mediaDeepLinkUrl: String!

  """Currency the prize is in"""
  prizeCurrency: String

  """Prize amount"""
  prizePurseDollars: Int

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!
  rosters: [LiveApiGolfRoster!]!
  rounds: [LiveApiGolfRound!]!

  """The scoring system for the event"""
  scoringSystem: LiveApiGolfEventScoringSystem!

  """The golf seasons"""
  seasons: [LiveApiGolfSeason!]!

  """Sport of this event"""
  sport: LiveApiSport!

  """The tournament's start date/time"""
  startsAt: DateTime

  """More detailed info about the event's status"""
  status: LiveApiGolfEventStatus!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!

  """Whether the event date is TBA or not"""
  tba: Boolean

  """Temperature"""
  temperature: String

  """Tournament's name"""
  tournamentName: String

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiWeatherForecast

  """Wind"""
  wind: String
}

"""Schedule Group"""
type LiveApiGroup implements Node {
  """End date of the Schedule Group"""
  endDateAt: DateTime!

  """The events related to this Schedule Group"""
  events(leagueSlug: String!): [LiveApiEvent!]!

  """
  The guid of this Schedule Group, e.g. nfl:2021-6. This value is later used to establish a connection.
  """
  guid: String!
  id: ID!

  """
  The label of the group to display to the user, e.g. 'Today', 'OCT 14', 'WEEK 6', 'NOVEMBER'
  """
  label: String!

  """Start date of the Schedule Group"""
  startDateAt: DateTime!
}

type LiveApiHockeyBoxScore implements LiveApiBoxScore & Node {
  """Away team's score"""
  awayScore: Int!

  """Home team's score"""
  homeScore: Int!

  """The ID of an object"""
  id: ID!

  """Last play, sourced from the betting data feed"""
  liveLastPlay: String

  """Which team is on a power play"""
  powerPlay: LiveApiTeamAlignment
  progress: LiveApiProgress!

  """Sport this box score relates to"""
  sport: LiveApiSport!
}

type LiveApiHockeyEvent implements LiveApiEvent & LiveApiSubscribableResource & LiveApiTeamEvent & Node {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """Standings for the away team"""
  awayStanding: LiveApiHockeyStanding

  """The away team, or nil if the team has not yet been determined"""
  awayTeam: LiveApiHockeyTeam

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """The betworks id associated with the event"""
  betworksId: String

  """
  The betworks live id associated with the event (Betworks live events are separate entities with unique IDs)
  """
  betworksLiveId: String

  """The 'box score' object, contains stats & scores regarding the event"""
  boxScore: LiveApiHockeyBoxScore

  """
  The 'event location' object contains details on the location of the event
  """
  eventLocation: LiveApiEventLocation

  """
  Generic event status.  Use `status` (on the sport specific types) for more details
  """
  eventStatus: LiveApiEventStatus!

  """
  An object containing all relevant information with respect to this event
  """
  gameInfo: LiveApiHockeyGameInfo

  """Standings for the home team"""
  homeStanding: LiveApiHockeyStanding

  """The home team, or nil if the team has not yet been determined"""
  homeTeam: LiveApiHockeyTeam

  """The ID of an object"""
  id: ID!

  """The lastest available odds for the event"""
  latestOdds: LiveApiHockeyOdds

  """
  The 'primary' league this event is a part of.  May support multiple leagues in
  the future (for events shared between PGA/EPGA).
  """
  league: LiveApiHockeyLeague

  """Deeplink URL to this event on the media app"""
  mediaDeepLinkUrl: String!

  """A list of all available odds data for the event"""
  odds: [LiveApiHockeyOdds]!

  """Get various polls for the current event"""
  polls(status: LiveApiPollStatus!, types: [LiveApiPollType!]!): [LiveApiPoll!]

  """
  A preview article for the event. By default the preview will only display
  before the game start, afterwards it will be null
  
  To always display the preview, set the `alwaysShow` flag to `true`
  """
  preview(alwaysShow: Boolean = false): LiveApiArticle

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Sport of this event"""
  sport: LiveApiSport!

  """The event's start date/time"""
  startsAt: DateTime

  """Status of the event"""
  status: LiveApiHockeyEventStatus!

  """The URL for the corresponding event page on stubhub.ca"""
  stubhubUrl: String

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!

  """Whether the event date is TBA or not"""
  tba: Boolean

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiWeatherForecast
}

enum LiveApiHockeyEventStatus {
  CANCELLED
  DELAYED
  FINAL
  HALF_OVER
  IN_PROGRESS
  POSTPONED
  PRE_GAME
  SUSPENDED
}

type LiveApiHockeyGameInfo implements LiveApiGameInfo {
  """
  The 'event location' object contains the location and name of stadium this event takes place
  """
  eventLocation: LiveApiEventLocation

  """The event's start date/time, in Etc/UTC timezone"""
  startsAt: DateTime

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiWeatherForecast
}

type LiveApiHockeyInjury implements LiveApiInjury & Node {
  """The ID of an object"""
  id: ID!

  """Date and Time of player's injury"""
  injuredAt: DateTime

  """Player's injury status e.g. day-to-day"""
  injuryStatus: String

  """
  Description of player's injury, including all relevant information such as
  injury type and location e.g. Torn UCL, right elbow
  """
  note: String

  """Sport this injured player plays for"""
  sport: LiveApiSport!
}

type LiveApiHockeyLeague implements LiveApiLeague & LiveApiSubscribableResource & Node {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """
  Describes the format of the league, some example values could be: team | individual | tournament
  """
  competitionType: LiveApiCompetitionType!

  """
  Daily rollover time represents the time (in UTC) at which 'current' events
  rollover to 'previous'. Events are considered 'current' up until the rollover
  time the next day.
  """
  dailyRolloverTime: String!

  """
  The full extended name of the league, for example 'National Basketball Association'
  """
  fullName: String!

  """The ID of an object"""
  id: ID!

  """A longer version of the league's name, for example 'NBA Basketball'"""
  mediumName: String!

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Describes whether the league is a men's or women's league"""
  sex: LiveApiSex!

  """A short version of the league's name, for example 'NBA'"""
  shortName: String!

  """Unique internal identifier for a league.  For example, 'nba'"""
  slug: String!

  """Sport this league is in"""
  sport: LiveApiSport!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!
}

type LiveApiHockeyOdds implements LiveApiOdds & LiveApiTeamOdds & Node {
  """API ID for the odds (ex. 134)"""
  apiId: ID! @deprecated(reason: "For now, see Live")

  """The API URI for the odds (ex. /nhl/timestamped_odds/134)"""
  apiUri: String!

  """
  Deep link URL for adding the away moneyline market to the betslip in theScore Bet
  """
  awayMoneylineBetslipUrl: String

  """Betworks line type code for away moneyline markets"""
  awayMoneylineLineType: LiveApiLineType

  """Money line market id for away team"""
  awayMoneylineMarketId: String

  """Money line odds for away team"""
  awayMoneylineOdds: Int

  """String formatted money line odds for away team"""
  awayMoneylineOddsString: String

  """Point spread for away team to cover"""
  awaySpread: Float

  """
  Deep link URL for adding the away spread market to the betslip in theScore Bet
  """
  awaySpreadBetslipUrl: String

  """Betworks line type code for away spread markets"""
  awaySpreadLineType: LiveApiLineType

  """Market id for point spread for away team to cover"""
  awaySpreadMarketId: String

  """Odds for point spread for away team to cover"""
  awaySpreadOdds: Int

  """String formatted odds for point spread for away team to cover"""
  awaySpreadOddsString: String

  """String formatted point spread for away team to cover"""
  awaySpreadString: String

  """Date odds were received"""
  date: DateTime
  favouredAlignment: LiveApiFavouredAlignment
  favouredTeam: LiveApiHockeyTeam

  """
  Deep link URL for adding the home moneyline market to the betslip in theScore Bet
  """
  homeMoneylineBetslipUrl: String

  """Betworks line type code for home moneyline markets"""
  homeMoneylineLineType: LiveApiLineType

  """Money line market id for home team"""
  homeMoneylineMarketId: String

  """Money line odds for home team"""
  homeMoneylineOdds: Int

  """String formatted money line odds for home team"""
  homeMoneylineOddsString: String

  """Point spread for home team to cover"""
  homeSpread: Float

  """
  Deep link URL for adding the home spread market to the betslip in theScore Bet
  """
  homeSpreadBetslipUrl: String

  """Betworks line type code for home spread markets"""
  homeSpreadLineType: LiveApiLineType

  """Market id for point spread for home team to cover"""
  homeSpreadMarketId: String

  """Odds for point spread for home team to cover"""
  homeSpreadOdds: Int

  """String formatted odds for point spread for home team to cover"""
  homeSpreadOddsString: String

  """String formatted point spread for home team to cover"""
  homeSpreadString: String

  """The ID of an object"""
  id: ID!

  """
  Deep link URL for adding the over total market to the betslip in theScore Bet
  """
  overBetslipUrl: String

  """Betworks line type code for over markets"""
  overLineType: LiveApiLineType

  """Market id for total score being over total"""
  overMarketId: String

  """Odds for total score being over total"""
  overOdds: Int

  """String formatted odds for total score being over total"""
  overOddsString: String

  """Sport these odds relate to"""
  sport: LiveApiSport!

  """Total (for over/under bet)"""
  total: Float

  """String formatted total (for over/under bet)"""
  totalString: String

  """
  Deep link URL for adding the under total market to the betslip in theScore Bet
  """
  underBetslipUrl: String

  """Betworks line type code for under markets"""
  underLineType: LiveApiLineType

  """market id for total score being under total"""
  underMarketId: String

  """Odds for total score being under total"""
  underOdds: Int

  """String formatted odds for total score being under total"""
  underOddsString: String
}

type LiveApiHockeyPlayer implements LiveApiPlayer & LiveApiTeamPlayer & Node {
  """Player's first name"""
  firstName: String!

  """Player's full name"""
  fullName: String!

  """The ID of an object"""
  id: ID!
  injuries: [LiveApiHockeyInjury]

  """Player's last name"""
  lastName: String!

  """Player's position"""
  position: String

  """Player's professional name -> first initial and last name"""
  professionalName: String!

  """Sport this player plays for"""
  sport: LiveApiSport!
}

type LiveApiHockeyStanding implements LiveApiTeamStanding & Node {
  """The ID of an object"""
  id: ID!
  rankAndRecordString: String
  rankString: String
  shortRecord: String

  """Sport this standing relates to"""
  sport: LiveApiSport!
}

type LiveApiHockeyTeam implements LiveApiSubscribableResource & LiveApiTeam & Node {
  """Abbreviation (i.e. EDM)"""
  abbreviation: String!

  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """Primary colour"""
  colour1: LiveApiColour

  """Secondary colour"""
  colour2: LiveApiColour

  """Full name (i.e. Edmonton Oilers)"""
  fullName: String!

  """The ID of an object"""
  id: ID!
  injuredPlayers: [LiveApiHockeyPlayer!]!
  leagues: [LiveApiHockeyLeague!]!

  """Team's logos"""
  logos: LiveApiTeamLogo!

  """Medium name (i.e. Edmonton)"""
  mediumName: String!

  """Name (i.e. Maple Leafs)"""
  name: String

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Short name (i.e. Edmonton)"""
  shortName: String!

  """Sport this team plays for"""
  sport: LiveApiSport!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!
}

"""GraphQL ID or an api_uri/resource_uri.  For example, '/mlb/teams/5'"""
scalar LiveApiIDorURI

type LiveApiImage {
  height: Int
  url: String
  width: Int
}

"""Details relating to an injury"""
interface LiveApiInjury {
  id: ID!

  """Date and Time of player's injury"""
  injuredAt: DateTime

  """Player's injury status e.g. day-to-day"""
  injuryStatus: String

  """
  Description of player's injury, including all relevant information such as
  injury type and location e.g. Torn UCL, right elbow
  """
  note: String

  """Sport this injured player plays for"""
  sport: LiveApiSport!
}

type LiveApiLacrosseBoxScore implements LiveApiBoxScore & Node {
  """Away team's score"""
  awayScore: Int!

  """Home team's score"""
  homeScore: Int!

  """The ID of an object"""
  id: ID!

  """Last play, sourced from the betting data feed"""
  liveLastPlay: String

  """Current time"""
  progress: LiveApiProgress!

  """Sport this box score relates to"""
  sport: LiveApiSport!
}

type LiveApiLacrosseEvent implements LiveApiEvent & LiveApiSubscribableResource & LiveApiTeamEvent & Node {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """Standings for the away team"""
  awayStanding: LiveApiLacrosseStanding

  """The away team, or nil if the team has not yet been determined"""
  awayTeam: LiveApiLacrosseTeam

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """The betworks id associated with the event"""
  betworksId: String

  """
  The betworks live id associated with the event (Betworks live events are separate entities with unique IDs)
  """
  betworksLiveId: String

  """The 'box score' object, contains stats & scores regarding the event"""
  boxScore: LiveApiLacrosseBoxScore

  """
  The 'event location' object contains details on the location of the event
  """
  eventLocation: LiveApiEventLocation

  """
  Generic event status.  Use `status` (on the sport specific types) for more details
  """
  eventStatus: LiveApiEventStatus!

  """
  An object containing all relevant information with respect to this event
  """
  gameInfo: LiveApiLacrosseGameInfo

  """Standings for the home team"""
  homeStanding: LiveApiLacrosseStanding

  """The home team, or nil if the team has not yet been determined"""
  homeTeam: LiveApiLacrosseTeam

  """The ID of an object"""
  id: ID!

  """The lastest available odds for the event"""
  latestOdds: LiveApiLacrosseOdds

  """
  The 'primary' league this event is a part of.  May support multiple leagues in
  the future (for events shared between PGA/EPGA).
  """
  league: LiveApiLacrosseLeague

  """Deeplink URL to this event on the media app"""
  mediaDeepLinkUrl: String!

  """A list of all available odds data for the event"""
  odds: [LiveApiLacrosseOdds]!

  """Get various polls for the current event"""
  polls(status: LiveApiPollStatus!, types: [LiveApiPollType!]!): [LiveApiPoll!]

  """
  A preview article for the event. By default the preview will only display
  before the game start, afterwards it will be null
  
  To always display the preview, set the `alwaysShow` flag to `true`
  """
  preview(alwaysShow: Boolean = false): LiveApiArticle

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Sport of this event"""
  sport: LiveApiSport!

  """The event's start date/time"""
  startsAt: DateTime

  """Status of the event"""
  status: LiveApiLacrosseEventStatus!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!

  """Whether the event date is TBA or not"""
  tba: Boolean

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiWeatherForecast
}

enum LiveApiLacrosseEventStatus {
  CANCELLED
  FINAL
  HALF_OVER
  IN_PROGRESS
  POSTPONED
  PRE_GAME
  SUSPENDED
}

type LiveApiLacrosseGameInfo implements LiveApiGameInfo {
  """
  The 'event location' object contains the location and name of stadium this event takes place
  """
  eventLocation: LiveApiEventLocation

  """The event's start date/time, in Etc/UTC timezone"""
  startsAt: DateTime

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiWeatherForecast
}

type LiveApiLacrosseInjury implements LiveApiInjury & Node {
  """The ID of an object"""
  id: ID!

  """Date and Time of player's injury"""
  injuredAt: DateTime

  """Player's injury status e.g. day-to-day"""
  injuryStatus: String

  """
  Description of player's injury, including all relevant information such as
  injury type and location e.g. Torn UCL, right elbow
  """
  note: String

  """Sport this injured player plays for"""
  sport: LiveApiSport!
}

type LiveApiLacrosseLeague implements LiveApiLeague & LiveApiSubscribableResource & Node {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """
  Describes the format of the league, some example values could be: team | individual | tournament
  """
  competitionType: LiveApiCompetitionType!

  """
  Daily rollover time represents the time (in UTC) at which 'current' events
  rollover to 'previous'. Events are considered 'current' up until the rollover
  time the next day.
  """
  dailyRolloverTime: String!

  """
  The full extended name of the league, for example 'National Basketball Association'
  """
  fullName: String!

  """The ID of an object"""
  id: ID!

  """A longer version of the league's name, for example 'NBA Basketball'"""
  mediumName: String!

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Describes whether the league is a men's or women's league"""
  sex: LiveApiSex!

  """A short version of the league's name, for example 'NBA'"""
  shortName: String!

  """Unique internal identifier for a league.  For example, 'nba'"""
  slug: String!

  """Sport this league is in"""
  sport: LiveApiSport!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!
}

type LiveApiLacrosseOdds implements LiveApiOdds & LiveApiTeamOdds & Node {
  """API ID for the odds (ex. 134)"""
  apiId: ID! @deprecated(reason: "For now, see Live")

  """The API URI for the odds (ex. /nhl/timestamped_odds/134)"""
  apiUri: String!

  """
  Deep link URL for adding the away moneyline market to the betslip in theScore Bet
  """
  awayMoneylineBetslipUrl: String

  """Betworks line type code for away moneyline markets"""
  awayMoneylineLineType: LiveApiLineType

  """Money line market id for away team"""
  awayMoneylineMarketId: String

  """Money line odds for away team"""
  awayMoneylineOdds: Int

  """String formatted money line odds for away team"""
  awayMoneylineOddsString: String

  """Point spread for away team to cover"""
  awaySpread: Float

  """
  Deep link URL for adding the away spread market to the betslip in theScore Bet
  """
  awaySpreadBetslipUrl: String

  """Betworks line type code for away spread markets"""
  awaySpreadLineType: LiveApiLineType

  """Market id for point spread for away team to cover"""
  awaySpreadMarketId: String

  """Odds for point spread for away team to cover"""
  awaySpreadOdds: Int

  """String formatted odds for point spread for away team to cover"""
  awaySpreadOddsString: String

  """String formatted point spread for away team to cover"""
  awaySpreadString: String

  """Date odds were received"""
  date: DateTime
  favouredAlignment: LiveApiFavouredAlignment
  favouredTeam: LiveApiLacrosseTeam

  """
  Deep link URL for adding the home moneyline market to the betslip in theScore Bet
  """
  homeMoneylineBetslipUrl: String

  """Betworks line type code for home moneyline markets"""
  homeMoneylineLineType: LiveApiLineType

  """Money line market id for home team"""
  homeMoneylineMarketId: String

  """Money line odds for home team"""
  homeMoneylineOdds: Int

  """String formatted money line odds for home team"""
  homeMoneylineOddsString: String

  """Point spread for home team to cover"""
  homeSpread: Float

  """
  Deep link URL for adding the home spread market to the betslip in theScore Bet
  """
  homeSpreadBetslipUrl: String

  """Betworks line type code for home spread markets"""
  homeSpreadLineType: LiveApiLineType

  """Market id for point spread for home team to cover"""
  homeSpreadMarketId: String

  """Odds for point spread for home team to cover"""
  homeSpreadOdds: Int

  """String formatted odds for point spread for home team to cover"""
  homeSpreadOddsString: String

  """String formatted point spread for home team to cover"""
  homeSpreadString: String

  """The ID of an object"""
  id: ID!

  """
  Deep link URL for adding the over total market to the betslip in theScore Bet
  """
  overBetslipUrl: String

  """Betworks line type code for over markets"""
  overLineType: LiveApiLineType

  """Market id for total score being over total"""
  overMarketId: String

  """Odds for total score being over total"""
  overOdds: Int

  """String formatted odds for total score being over total"""
  overOddsString: String

  """Sport these odds relate to"""
  sport: LiveApiSport!

  """Total (for over/under bet)"""
  total: Float

  """String formatted total (for over/under bet)"""
  totalString: String

  """
  Deep link URL for adding the under total market to the betslip in theScore Bet
  """
  underBetslipUrl: String

  """Betworks line type code for under markets"""
  underLineType: LiveApiLineType

  """market id for total score being under total"""
  underMarketId: String

  """Odds for total score being under total"""
  underOdds: Int

  """String formatted odds for total score being under total"""
  underOddsString: String
}

type LiveApiLacrossePlayer implements LiveApiPlayer & LiveApiTeamPlayer & Node {
  """Player's first name"""
  firstName: String!

  """Player's full name"""
  fullName: String!

  """The ID of an object"""
  id: ID!
  injuries: [LiveApiLacrosseInjury]

  """Player's last name"""
  lastName: String!

  """Player's position"""
  position: String

  """Player's professional name -> first initial and last name"""
  professionalName: String!

  """Sport this player plays for"""
  sport: LiveApiSport!
}

type LiveApiLacrosseStanding implements LiveApiTeamStanding & Node {
  """The ID of an object"""
  id: ID!
  rankAndRecordString: String
  rankString: String
  shortRecord: String

  """Sport this standing relates to"""
  sport: LiveApiSport!
}

type LiveApiLacrosseTeam implements LiveApiSubscribableResource & LiveApiTeam & Node {
  """Abbreviation (i.e. EDM)"""
  abbreviation: String!

  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """Primary colour"""
  colour1: LiveApiColour

  """Secondary colour"""
  colour2: LiveApiColour

  """Full name (i.e. Edmonton Oilers)"""
  fullName: String!

  """The ID of an object"""
  id: ID!
  injuredPlayers: [LiveApiLacrossePlayer!]!
  leagues: [LiveApiLacrosseLeague!]!

  """Team's logos"""
  logos: LiveApiTeamLogo!

  """Medium name (i.e. Edmonton)"""
  mediumName: String!

  """Name (i.e. Maple Leafs)"""
  name: String

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Short name (i.e. Edmonton)"""
  shortName: String!

  """Sport this team plays for"""
  sport: LiveApiSport!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!
}

interface LiveApiLeague {
  """
  Describes the format of the league, some example values could be: team | individual | tournament
  """
  competitionType: LiveApiCompetitionType!

  """
  Daily rollover time represents the time (in UTC) at which 'current' events
  rollover to 'previous'. Events are considered 'current' up until the rollover
  time the next day.
  """
  dailyRolloverTime: String!

  """
  The full extended name of the league, for example 'National Basketball Association'
  """
  fullName: String!
  id: ID!

  """A longer version of the league's name, for example 'NBA Basketball'"""
  mediumName: String!

  """Describes whether the league is a men's or women's league"""
  sex: LiveApiSex!

  """A short version of the league's name, for example 'NBA'"""
  shortName: String!

  """Unique internal identifier for a league.  For example, 'nba'"""
  slug: String!

  """Sport this league is in"""
  sport: LiveApiSport!
}

"""
Object containing details on the scores for a specific event. These include scores for segments already passed.
"""
interface LiveApiLineScore {
  id: ID!

  """The score for this team, during this segment, for this event."""
  score: Int!

  """The segment that this specific line score is relating to."""
  segment: Int!
}

enum LiveApiLineType {
  MLA
  MLH
  MLT
  PSA
  PSH
  TLO
  TLU
}

"""
A match is a single event, not necessarily consisting of a team. E.g. In singles
tennis this would be a match between two players. However, in doubles tennis it
would be a match between two match teams consisting of both players.
"""
interface LiveApiMatch {
  event: LiveApiEvent
  id: ID!
}

interface LiveApiMatchOdds {
  """API ID for the odds (ex. 134)"""
  apiId: ID! @deprecated(reason: "For now, see Live")

  """The API URI for the odds (ex. /nhl/timestamped_odds/134)"""
  apiUri: String!

  """
  Deep link URL for adding the away moneyline market to the betslip in theScore Bet
  """
  awayMoneylineBetslipUrl: String

  """Betworks line type code for away moneyline markets"""
  awayMoneylineLineType: LiveApiLineType

  """Money line market id for away team"""
  awayMoneylineMarketId: String

  """Money line odds for away team"""
  awayMoneylineOdds: Int

  """String formatted money line odds for away team"""
  awayMoneylineOddsString: String

  """Date odds were received"""
  date: DateTime

  """Favoured outcome"""
  favouredAlignment: LiveApiFavouredAlignment

  """
  Deep link URL for adding the home moneyline market to the betslip in theScore Bet
  """
  homeMoneylineBetslipUrl: String

  """Betworks line type code for home moneyline markets"""
  homeMoneylineLineType: LiveApiLineType

  """Money line market id for home team"""
  homeMoneylineMarketId: String

  """Money line odds for home team"""
  homeMoneylineOdds: Int

  """String formatted money line odds for home team"""
  homeMoneylineOddsString: String
  id: ID!

  """Sport these odds relate to"""
  sport: LiveApiSport!
}

enum LiveApiMeasurementUnit {
  IMPERIAL
  METRIC
}

type LiveApiMmaEvent implements LiveApiEvent & LiveApiSubscribableResource & Node {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """The betworks id associated with the event"""
  betworksId: String

  """
  The betworks live id associated with the event (Betworks live events are separate entities with unique IDs)
  """
  betworksLiveId: String

  """End time and date of the MMA event"""
  endsAt: DateTime

  """
  The 'event location' object contains details on the location of the event
  """
  eventLocation: LiveApiEventLocation

  """
  Generic event status.  Use `status` (on the sport specific types) for more details
  """
  eventStatus: LiveApiEventStatus!

  """A list of fights occurring during the event"""
  fights: [LiveApiMmaFight]!

  """
  An object containing all relevant information with respect to the mma event
  """
  gameInfo: LiveApiMmaGameInfo

  """The ID of an object"""
  id: ID!

  """
  The 'primary' league this event is a part of.  May support multiple leagues in
  the future (for events shared between PGA/EPGA).
  """
  league: LiveApiMmaLeague

  """Deeplink URL to this event on the media app"""
  mediaDeepLinkUrl: String!

  """The name of the mma event, e.g. UFC 124: St-Pierre vs. Koscheck II"""
  name: String

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Sport of this event"""
  sport: LiveApiSport!

  """Start time and date of the MMA event"""
  startsAt: DateTime

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!

  """Whether the event date is TBA or not"""
  tba: Boolean

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiWeatherForecast
}

enum LiveApiMmaEventStatus {
  CANCELLED
  DELAYED
  FINAL
  FINISHED
  GETTING_READY
  IN_PROGRESS
  INTERMEDIATE
  INTERRUPTED
  OFFICIAL
  PLANNED
  POSTPONED
  PRE_GAME
  PROTESTED
  RESCHEDULED
  RUNNING
  SCHEDULED
  SCHEDULED_BREAK
  START_LIST
  UNOFFICIAL
}

type LiveApiMmaFight implements LiveApiBettable & LiveApiMatch & Node {
  """The 'away' fighter"""
  awayFighter: LiveApiMmaFighter

  """The betworks id associated with the event"""
  betworksId: String

  """
  The betworks live id associated with the event (Betworks live events are separate entities with unique IDs)
  """
  betworksLiveId: String

  """The fight's card (main or under)"""
  card: LiveApiFightCard!

  """Whether the fight is for a title"""
  championship: Boolean

  """
  Compustrike score for the fight, compustrike is an advanced stat that tracks strikes thrown against landed, etc.
  """
  compustrike: String

  """The event this fight belongs to"""
  event: LiveApiMmaEvent

  """
  A less granular status that indicates only whether a fight is pre/in progress/post
  """
  eventStatus: LiveApiEventStatus!

  """
  An object containing all relevant information with respect to the mma event
  """
  gameInfo: LiveApiMmaGameInfo

  """The 'home' fighter"""
  homeFighter: LiveApiMmaFighter

  """The ID of an object"""
  id: ID!

  """Whether the fight ended in a draw"""
  isDraw: Boolean

  """Whether the fight ended with a no contest"""
  isNoContest: Boolean

  """The lastest available odds for the fight"""
  latestOdds: LiveApiMmaOdds

  """A list of all available odds data for the fight"""
  odds: [LiveApiMmaOdds]!

  """Fight's position in the event's program"""
  position: Int

  """Current round of the fight"""
  round: Int

  """Whether this fight was rumored before it was confirmed"""
  rumored: Boolean

  """Scorecard for the fight, judge scores for each round"""
  scorecard: String

  """When the fight starts"""
  startsAt: DateTime

  """The event's current status"""
  status: LiveApiMmaEventStatus!

  """
  A description of the exact method used to achieve victory type, eg. Rear Naked Choke, Kick
  """
  victoryMethod: String

  """Time on the clock when victory was achieved"""
  victoryTime: String

  """How the fight was won, eg. KO, Submission"""
  victoryType: String @deprecated(reason: "For now, see Live")

  """How the fight was won as an enum, eg. KO, Submission"""
  victoryTypeEnum: LiveApiMmaVictoryType

  """The weight class the fight is in, eg Heavyweight"""
  weightClass: String

  """
  Winning side of the fight, returns either 'HOME' or 'AWAY' when present
  """
  winningAlignment: LiveApiTeamAlignment

  """The winning fighter for the fight"""
  winningFighter: LiveApiMmaFighter
}

type LiveApiMmaFighter implements Node {
  """Fighter's country"""
  country: LiveApiCountry

  """The fighter's record"""
  fightRecord: String

  """Fighter's first name"""
  firstName: String

  """The ID of an object"""
  id: ID!

  """Fighter's last name"""
  lastName: String

  """Fighter's nationality"""
  nationality: String

  """Professional name (usually first initial and last name"""
  professionalName: String
}

type LiveApiMmaGameInfo implements LiveApiGameInfo {
  """The event's end date/time, in Etc/UTC timezone"""
  endsAt: DateTime

  """
  The 'event location' object contains the location and name of stadium this event takes place
  """
  eventLocation: LiveApiEventLocation

  """The event's start date/time, in Etc/UTC timezone"""
  startsAt: DateTime

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiWeatherForecast
}

type LiveApiMmaLeague implements LiveApiLeague & LiveApiSubscribableResource & Node {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """
  Describes the format of the league, some example values could be: team | individual | tournament
  """
  competitionType: LiveApiCompetitionType!

  """
  Daily rollover time represents the time (in UTC) at which 'current' events
  rollover to 'previous'. Events are considered 'current' up until the rollover
  time the next day.
  """
  dailyRolloverTime: String!

  """
  The full extended name of the league, for example 'National Basketball Association'
  """
  fullName: String!

  """The ID of an object"""
  id: ID!

  """A longer version of the league's name, for example 'NBA Basketball'"""
  mediumName: String!

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Describes whether the league is a men's or women's league"""
  sex: LiveApiSex!

  """A short version of the league's name, for example 'NBA'"""
  shortName: String!

  """Unique internal identifier for a league.  For example, 'nba'"""
  slug: String!

  """Sport this league is in"""
  sport: LiveApiSport!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!
}

type LiveApiMmaOdds implements LiveApiMatchOdds & LiveApiOdds & Node {
  """API ID for the odds (ex. 134)"""
  apiId: ID! @deprecated(reason: "For now, see Live")

  """The API URI for the odds"""
  apiUri: String!

  """
  Deep link URL for adding the away moneyline market to the betslip in theScore Bet
  """
  awayMoneylineBetslipUrl: String

  """Betworks line type code for away moneyline markets"""
  awayMoneylineLineType: LiveApiLineType

  """Money line market id for away team"""
  awayMoneylineMarketId: String

  """Money line odds for away team"""
  awayMoneylineOdds: Int

  """String formatted money line odds for away team"""
  awayMoneylineOddsString: String

  """Date odds were received"""
  date: DateTime
  favouredAlignment: LiveApiFavouredAlignment

  """Favoured fighter"""
  favouredParticipant: LiveApiMmaFighter

  """
  Deep link URL for adding the home moneyline market to the betslip in theScore Bet
  """
  homeMoneylineBetslipUrl: String

  """Betworks line type code for home moneyline markets"""
  homeMoneylineLineType: LiveApiLineType

  """Money line market id for home team"""
  homeMoneylineMarketId: String

  """Money line odds for home team"""
  homeMoneylineOdds: Int

  """String formatted money line odds for home team"""
  homeMoneylineOddsString: String

  """The ID of an object"""
  id: ID!

  """Sport these odds relate to"""
  sport: LiveApiSport!
}

enum LiveApiMmaVictoryType {
  DISQUALIFICATION
  FORFEIT
  KNOCKOUT
  MAJORITY_DECISION
  MAJORITY_DRAW
  NO_CONTEST
  SPLIT_DECISION
  SPLIT_DRAW
  SUBMISSION
  TECHNICAL_DECISION
  TECHNICAL_DRAW
  TECHNICAL_SUBMISSION
  TKO
  UNANIMOUS_DECISION
  UNANIMOUS_DRAW
}

"""Describes a node update"""
type LiveApiNodeUpdate {
  """
  When not null, clients should POST (no body) to this URL to record metrics
  """
  metricsCallbackUrl: String

  """The updated node"""
  node: Node!
}

interface LiveApiOdds {
  """API ID for the odds (ex. 134)"""
  apiId: ID! @deprecated(reason: "For now, see Live")

  """The API URI for the odds (ex. /nhl/timestamped_odds/134)"""
  apiUri: String!

  """Date odds were received"""
  date: DateTime
  id: ID!

  """Sport these odds relate to"""
  sport: LiveApiSport!
}

"""Information on a player"""
interface LiveApiPlayer {
  """Player's first name"""
  firstName: String!

  """Player's full name"""
  fullName: String!
  id: ID!

  """Player's current injuries"""
  injuries: [LiveApiInjury]

  """Player's last name"""
  lastName: String!

  """Player's professional name -> first initial and last name"""
  professionalName: String!

  """Sport this player plays for"""
  sport: LiveApiSport!
}

"""Polls"""
interface LiveApiPoll {
  bareId: String!
  closedAt: DateTime
  id: ID!
  options: [LiveApiPollOption!]!
  question: String!
  resourceUri: String!
  status: LiveApiPollStatus!
  votesCount: Int!
}

"""Poll Options Inteface"""
interface LiveApiPollOption {
  bareId: String!
  id: ID!
  votesCount: Int!
}

"""All possible Poll status"""
enum LiveApiPollStatus {
  """Closed - new votes not allowed"""
  CLOSED

  """Open - new votes allowed"""
  OPEN
}

"""All possible Poll types"""
enum LiveApiPollType {
  """Betting Polls"""
  BETTING_POLL
}

"""
Represents how far a game has progressed (quarter/period/inning, time on clock, etc.)
"""
type LiveApiProgress {
  """
  The time on the clock (i.e. '5:32').  'Top'/'Bottom'/'End' for baseball.
  """
  clock: String

  """Basic description, i.e. '13:42 1st', 'Final (OT)', etc.."""
  description: String!

  """Global identifier, ie. 'FootballBoxScore:3'"""
  id: ID! @deprecated(reason: "For now, see Live")

  """In overtime periods/quarters?"""
  overtime: Boolean!

  """Current quarter/half/inning/etc... 1 = 1st, 2 = 2nd, etc.."""
  segment: Int

  """Baseball only currently.  'top', 'bottom', etc."""
  segmentDivision: String

  """Long formatted version of `segment`, i.e. '1st Quarter', '2nd Period'"""
  segmentLong: String

  """Short formatted version of `segment`, i.e. '1st', '2nd'"""
  segmentShort: String

  """Shootout after overtime?"""
  shootout: Boolean!
}

"""Schedule Group"""
type LiveApiScheduleGroup implements Node {
  """The groups"""
  groups: [LiveApiGroup!]
  id: ID!

  """
  The label of the group to display to the user, e.g. 'Today', 'OCT 14', 'WEEK 6', 'NOVEMBER'
  """
  label: String!
}

"""Describes an group update for live leagues functionality"""
type LiveApiScheduleUpdate implements Node {
  """The updated events"""
  events: [LiveApiEvent!]
  id: ID!

  """
  The label of the group to display to the user, e.g. 'Today', 'OCT 14', 'WEEK 6', 'NOVEMBER'
  """
  label: String!
}

"""Self explanatory"""
enum LiveApiSex {
  """Self explanatory"""
  FEMALE

  """Self explanatory"""
  MALE

  """
  Sex is not applicable/relevant, i.e. auto racing, olympics, entertainment wrestling
  """
  NOT_APPLICABLE
}

type LiveApiSoccerBoxScore implements LiveApiBoxScore & Node {
  """Away team's score"""
  awayScore: Int!

  """
  Number of penalty/shootout goals for home away, `null` if game didn't go to penalties shootout
  """
  awayScoreShootout: Int

  """
  Total number of red cards for the away team, likely eventually will be deprecated & replaced with teams records objects
  """
  awayTotalRedCards: Int

  """Home team's score"""
  homeScore: Int!

  """
  Number of penalty/shootout goals for home team, `null` if game didn't go to penalties shootout
  """
  homeScoreShootout: Int

  """
  Total number of red cards for the home team, likely eventually will be deprecated & replaced with teams records objects
  """
  homeTotalRedCards: Int

  """The ID of an object"""
  id: ID!

  """Last play, sourced from the betting data feed"""
  liveLastPlay: String
  progress: LiveApiProgress!

  """Sport this box score relates to"""
  sport: LiveApiSport!
}

type LiveApiSoccerEvent implements LiveApiEvent & LiveApiSubscribableResource & LiveApiTeamEvent & Node {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """Standings for the away team"""
  awayStanding: LiveApiSoccerStanding

  """The away team, or nil if the team has not yet been determined"""
  awayTeam: LiveApiSoccerTeam

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """The betworks id associated with the event"""
  betworksId: String

  """
  The betworks live id associated with the event (Betworks live events are separate entities with unique IDs)
  """
  betworksLiveId: String

  """The 'box score' object, contains stats & scores regarding the event"""
  boxScore: LiveApiSoccerBoxScore

  """
  The 'event location' object contains details on the location of the event
  """
  eventLocation: LiveApiEventLocation

  """
  Generic event status.  Use `status` (on the sport specific types) for more details
  """
  eventStatus: LiveApiEventStatus!

  """
  An object containing all relevant information with respect to this event
  """
  gameInfo: LiveApiSoccerGameInfo

  """Standings for the home team"""
  homeStanding: LiveApiSoccerStanding

  """The home team, or nil if the team has not yet been determined"""
  homeTeam: LiveApiSoccerTeam

  """The ID of an object"""
  id: ID!

  """The lastest available odds for the event"""
  latestOdds: LiveApiSoccerOdds

  """
  The 'primary' league this event is a part of.  May support multiple leagues in
  the future (for events shared between PGA/EPGA).
  """
  league: LiveApiSoccerLeague

  """Deeplink URL to this event on the media app"""
  mediaDeepLinkUrl: String!

  """A list of all available odds data for the event"""
  odds: [LiveApiSoccerOdds]!

  """Get various polls for the current event"""
  polls(status: LiveApiPollStatus!, types: [LiveApiPollType!]!): [LiveApiPoll!]

  """
  A preview article for the event. By default the preview will only display
  before the game start, afterwards it will be null
  
  To always display the preview, set the `alwaysShow` flag to `true`
  """
  preview(alwaysShow: Boolean = false): LiveApiArticle

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Sport of this event"""
  sport: LiveApiSport!

  """The event's start date/time"""
  startsAt: DateTime

  """Status of the event"""
  status: LiveApiSoccerEventStatus!

  """The URL for the corresponding event page on stubhub.ca"""
  stubhubUrl: String

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!

  """Whether the event date is TBA or not"""
  tba: Boolean

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiWeatherForecast
}

enum LiveApiSoccerEventStatus {
  CANCELLED
  DELAYED
  FINAL
  HALF_OVER
  IN_PROGRESS
  POSTPONED
  PRE_GAME
  SUSPENDED
}

type LiveApiSoccerGameInfo implements LiveApiGameInfo {
  """
  The 'event location' object contains the location and name of stadium this event takes place
  """
  eventLocation: LiveApiEventLocation

  """The event's start date/time, in Etc/UTC timezone"""
  startsAt: DateTime

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiWeatherForecast
}

type LiveApiSoccerInjury implements LiveApiInjury & Node {
  """The ID of an object"""
  id: ID!

  """Date and Time of player's injury"""
  injuredAt: DateTime

  """Player's injury status e.g. day-to-day"""
  injuryStatus: String

  """
  Description of player's injury, including all relevant information such as
  injury type and location e.g. Torn UCL, right elbow
  """
  note: String

  """Sport this injured player plays for"""
  sport: LiveApiSport!
}

type LiveApiSoccerLeague implements LiveApiLeague & LiveApiSubscribableResource & Node {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """
  Describes the format of the league, some example values could be: team | individual | tournament
  """
  competitionType: LiveApiCompetitionType!

  """
  Daily rollover time represents the time (in UTC) at which 'current' events
  rollover to 'previous'. Events are considered 'current' up until the rollover
  time the next day.
  """
  dailyRolloverTime: String!

  """
  The full extended name of the league, for example 'National Basketball Association'
  """
  fullName: String!

  """The ID of an object"""
  id: ID!

  """A longer version of the league's name, for example 'NBA Basketball'"""
  mediumName: String!

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Describes whether the league is a men's or women's league"""
  sex: LiveApiSex!

  """A short version of the league's name, for example 'NBA'"""
  shortName: String!

  """Unique internal identifier for a league.  For example, 'nba'"""
  slug: String!

  """Sport this league is in"""
  sport: LiveApiSport!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!
}

type LiveApiSoccerOdds implements LiveApiOdds & LiveApiTeamOdds & Node {
  """API ID for the odds (ex. 134)"""
  apiId: ID! @deprecated(reason: "For now, see Live")

  """The API URI for the odds (ex. /nhl/timestamped_odds/134)"""
  apiUri: String!

  """
  Deep link URL for adding the away moneyline market to the betslip in theScore Bet
  """
  awayMoneylineBetslipUrl: String

  """Betworks line type code for away moneyline markets"""
  awayMoneylineLineType: LiveApiLineType

  """Money line market id for away team"""
  awayMoneylineMarketId: String

  """Money line odds for away team"""
  awayMoneylineOdds: Int

  """String formatted money line odds for away team"""
  awayMoneylineOddsString: String

  """Point spread for away team to cover"""
  awaySpread: Float

  """
  Deep link URL for adding the away spread market to the betslip in theScore Bet
  """
  awaySpreadBetslipUrl: String

  """Betworks line type code for away spread markets"""
  awaySpreadLineType: LiveApiLineType

  """Market id for point spread for away team to cover"""
  awaySpreadMarketId: String

  """Odds for point spread for away team to cover"""
  awaySpreadOdds: Int

  """String formatted odds for point spread for away team to cover"""
  awaySpreadOddsString: String

  """String formatted point spread for away team to cover"""
  awaySpreadString: String

  """Date odds were received"""
  date: DateTime
  drawMoneylineBetslipUrl: String
  drawMoneylineLineType: LiveApiLineType

  """Money line odds for a draw"""
  drawMoneylineOdds: Int

  """String formatted money line odds a draw"""
  drawMoneylineOddsString: String
  favouredAlignment: LiveApiFavouredAlignment
  favouredTeam: LiveApiSoccerTeam

  """
  Deep link URL for adding the home moneyline market to the betslip in theScore Bet
  """
  homeMoneylineBetslipUrl: String

  """Betworks line type code for home moneyline markets"""
  homeMoneylineLineType: LiveApiLineType

  """Money line market id for home team"""
  homeMoneylineMarketId: String

  """Money line odds for home team"""
  homeMoneylineOdds: Int

  """String formatted money line odds for home team"""
  homeMoneylineOddsString: String

  """Point spread for home team to cover"""
  homeSpread: Float

  """
  Deep link URL for adding the home spread market to the betslip in theScore Bet
  """
  homeSpreadBetslipUrl: String

  """Betworks line type code for home spread markets"""
  homeSpreadLineType: LiveApiLineType

  """Market id for point spread for home team to cover"""
  homeSpreadMarketId: String

  """Odds for point spread for home team to cover"""
  homeSpreadOdds: Int

  """String formatted odds for point spread for home team to cover"""
  homeSpreadOddsString: String

  """String formatted point spread for home team to cover"""
  homeSpreadString: String

  """The ID of an object"""
  id: ID!

  """
  Deep link URL for adding the over total market to the betslip in theScore Bet
  """
  overBetslipUrl: String

  """Betworks line type code for over markets"""
  overLineType: LiveApiLineType

  """Market id for total score being over total"""
  overMarketId: String

  """Odds for total score being over total"""
  overOdds: Int

  """String formatted odds for total score being over total"""
  overOddsString: String

  """Sport these odds relate to"""
  sport: LiveApiSport!

  """Total (for over/under bet)"""
  total: Float

  """String formatted total (for over/under bet)"""
  totalString: String

  """
  Deep link URL for adding the under total market to the betslip in theScore Bet
  """
  underBetslipUrl: String

  """Betworks line type code for under markets"""
  underLineType: LiveApiLineType

  """market id for total score being under total"""
  underMarketId: String

  """Odds for total score being under total"""
  underOdds: Int

  """String formatted odds for total score being under total"""
  underOddsString: String
}

type LiveApiSoccerPlayer implements LiveApiPlayer & LiveApiTeamPlayer & Node {
  """Player's first name"""
  firstName: String!

  """Player's full name"""
  fullName: String!

  """The ID of an object"""
  id: ID!
  injuries: [LiveApiSoccerInjury]

  """Player's last name"""
  lastName: String!

  """Player's position"""
  position: String

  """Player's professional name -> first initial and last name"""
  professionalName: String!

  """Sport this player plays for"""
  sport: LiveApiSport!
}

type LiveApiSoccerStanding implements LiveApiTeamStanding & Node {
  """The ID of an object"""
  id: ID!
  rankAndRecordString: String
  rankString: String
  shortRecord: String

  """Sport this standing relates to"""
  sport: LiveApiSport!
}

type LiveApiSoccerTeam implements LiveApiSubscribableResource & LiveApiTeam & Node {
  """Abbreviation (i.e. EDM)"""
  abbreviation: String!

  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """Primary colour"""
  colour1: LiveApiColour

  """Secondary colour"""
  colour2: LiveApiColour

  """Full name (i.e. Edmonton Oilers)"""
  fullName: String!

  """The ID of an object"""
  id: ID!
  injuredPlayers: [LiveApiSoccerPlayer!]!
  leagues: [LiveApiSoccerLeague!]!

  """Team's logos"""
  logos: LiveApiTeamLogo!

  """Medium name (i.e. Edmonton)"""
  mediumName: String!

  """Name (i.e. Maple Leafs)"""
  name: String

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Short name (i.e. Edmonton)"""
  shortName: String!

  """Sport this team plays for"""
  sport: LiveApiSport!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!
}

enum LiveApiSport {
  AUTO
  BASEBALL
  BASKETBALL
  CRICKET
  FIGHTING
  FOOTBALL
  GOLF
  HOCKEY
  LACROSSE
  MMA
  OLYMPIC
  SOCCER
  TENNIS
}

"""Describes an alert that users can get push notifications for"""
type LiveApiSubscribableAlert {
  """Internal identifier for this type of alert"""
  alertKey: String!

  """Should this alert be enabled by default?"""
  default: Boolean!

  """User displayable name for this alert"""
  display: String!
}

"""
Types that implement this interface have an id and a resourceUri field that can be used to communicate with other systems.
"""
interface LiveApiSubscribableResource {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """GraphQL global ID for the subscribable resource"""
  id: ID!

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!
}

"""A team"""
interface LiveApiTeam {
  """Abbreviation (i.e. EDM)"""
  abbreviation: String!

  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """Primary colour"""
  colour1: LiveApiColour

  """Secondary colour"""
  colour2: LiveApiColour

  """Full name (i.e. Edmonton Oilers)"""
  fullName: String!
  id: ID!

  """List of players that are currently injured"""
  injuredPlayers: [LiveApiTeamPlayer!]!

  """Unordered list of leagues the team participates in"""
  leagues: [LiveApiLeague!]!

  """Team's logos"""
  logos: LiveApiTeamLogo!

  """Medium name (i.e. Edmonton)"""
  mediumName: String!

  """Name (i.e. Maple Leafs)"""
  name: String

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Short name (i.e. Edmonton)"""
  shortName: String!

  """Sport this team plays for"""
  sport: LiveApiSport!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!
}

"""Home or away?"""
enum LiveApiTeamAlignment {
  """Away team"""
  AWAY

  """Home team"""
  HOME
}

"""
The 'team event' object contains details regarding team events only, e.g. a hockey/football game
"""
interface LiveApiTeamEvent {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """Standings for the away team"""
  awayStanding: LiveApiTeamStanding

  """The away team, or nil if the team has not yet been determined"""
  awayTeam: LiveApiTeam

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """The betworks id associated with the event"""
  betworksId: String

  """
  The betworks live id associated with the event (Betworks live events are separate entities with unique IDs)
  """
  betworksLiveId: String

  """The 'box score' object, contains stats & scores regarding the event"""
  boxScore: LiveApiBoxScore

  """
  The 'event location' object contains details on the location of the event
  """
  eventLocation: LiveApiEventLocation

  """
  Generic event status.  Use `status` (on the sport specific types) for more details
  """
  eventStatus: LiveApiEventStatus!

  """
  An object containing all relevant information with respect to this event
  """
  gameInfo: LiveApiGameInfo

  """Standings for the home team"""
  homeStanding: LiveApiTeamStanding

  """The home team, or nil if the team has not yet been determined"""
  homeTeam: LiveApiTeam
  id: ID!

  """The lastest available odds for the event"""
  latestOdds: LiveApiTeamOdds

  """
  The 'primary' league this event is a part of.  May support multiple leagues in
  the future (for events shared between PGA/EPGA).
  """
  league: LiveApiLeague

  """Deeplink URL to this event on the media app"""
  mediaDeepLinkUrl: String!

  """A list of all available odds data for the event"""
  odds: [LiveApiTeamOdds]!

  """Get various polls for the current event"""
  polls(status: LiveApiPollStatus!, types: [LiveApiPollType!]!): [LiveApiPoll!]

  """
  A preview article for the event. By default the preview will only display
  before the game start, afterwards it will be null
  
  To always display the preview, set the `alwaysShow` flag to `true`
  """
  preview(alwaysShow: Boolean = false): LiveApiArticle

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Sport of this event"""
  sport: LiveApiSport!

  """The event's start date/time"""
  startsAt: DateTime

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!

  """Whether the event date is TBA or not"""
  tba: Boolean

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiWeatherForecast
}

"""Object describing the various sized logos"""
type LiveApiTeamLogo {
  """128 px by 128 px image"""
  w128xh128: String

  """20 px by 20 px image"""
  w20xh20: String

  """256 px by 256 px image"""
  w256xh256: String

  """72 px by 72 px image"""
  w72xh72: String
}

"""
Team Money Line Poll Options - PollOption with a team reference that should be displayed with money line odds
"""
type LiveApiTeamMoneyLinePollOption implements LiveApiPollOption & Node {
  bareId: String!

  """The ID of an object"""
  id: ID!
  teamAlignment: LiveApiTeamAlignment!
  teamResourceUri: String!
  votesCount: Int!
}

interface LiveApiTeamOdds {
  """API ID for the odds (ex. 134)"""
  apiId: ID! @deprecated(reason: "For now, see Live")

  """The API URI for the odds (ex. /nhl/timestamped_odds/134)"""
  apiUri: String!

  """
  Deep link URL for adding the away moneyline market to the betslip in theScore Bet
  """
  awayMoneylineBetslipUrl: String

  """Betworks line type code for away moneyline markets"""
  awayMoneylineLineType: LiveApiLineType

  """Money line market id for away team"""
  awayMoneylineMarketId: String

  """Money line odds for away team"""
  awayMoneylineOdds: Int

  """String formatted money line odds for away team"""
  awayMoneylineOddsString: String

  """Point spread for away team to cover"""
  awaySpread: Float

  """
  Deep link URL for adding the away spread market to the betslip in theScore Bet
  """
  awaySpreadBetslipUrl: String

  """Betworks line type code for away spread markets"""
  awaySpreadLineType: LiveApiLineType

  """Market id for point spread for away team to cover"""
  awaySpreadMarketId: String

  """Odds for point spread for away team to cover"""
  awaySpreadOdds: Int

  """String formatted odds for point spread for away team to cover"""
  awaySpreadOddsString: String

  """String formatted point spread for away team to cover"""
  awaySpreadString: String

  """Date odds were received"""
  date: DateTime

  """Favoured outcome"""
  favouredAlignment: LiveApiFavouredAlignment

  """Favoured team"""
  favouredTeam: LiveApiTeam

  """
  Deep link URL for adding the home moneyline market to the betslip in theScore Bet
  """
  homeMoneylineBetslipUrl: String

  """Betworks line type code for home moneyline markets"""
  homeMoneylineLineType: LiveApiLineType

  """Money line market id for home team"""
  homeMoneylineMarketId: String

  """Money line odds for home team"""
  homeMoneylineOdds: Int

  """String formatted money line odds for home team"""
  homeMoneylineOddsString: String

  """Point spread for home team to cover"""
  homeSpread: Float

  """
  Deep link URL for adding the home spread market to the betslip in theScore Bet
  """
  homeSpreadBetslipUrl: String

  """Betworks line type code for home spread markets"""
  homeSpreadLineType: LiveApiLineType

  """Market id for point spread for home team to cover"""
  homeSpreadMarketId: String

  """Odds for point spread for home team to cover"""
  homeSpreadOdds: Int

  """String formatted odds for point spread for home team to cover"""
  homeSpreadOddsString: String

  """String formatted point spread for home team to cover"""
  homeSpreadString: String
  id: ID!

  """
  Deep link URL for adding the over total market to the betslip in theScore Bet
  """
  overBetslipUrl: String

  """Betworks line type code for over markets"""
  overLineType: LiveApiLineType

  """Market id for total score being over total"""
  overMarketId: String

  """Odds for total score being over total"""
  overOdds: Int

  """String formatted odds for total score being over total"""
  overOddsString: String

  """Sport these odds relate to"""
  sport: LiveApiSport!

  """Total (for over/under bet)"""
  total: Float

  """String formatted total (for over/under bet)"""
  totalString: String

  """
  Deep link URL for adding the under total market to the betslip in theScore Bet
  """
  underBetslipUrl: String

  """Betworks line type code for under markets"""
  underLineType: LiveApiLineType

  """market id for total score being under total"""
  underMarketId: String

  """Odds for total score being under total"""
  underOdds: Int

  """String formatted odds for total score being under total"""
  underOddsString: String
}

"""Details on a player with regards to a team sport"""
interface LiveApiTeamPlayer {
  """Player's first name"""
  firstName: String!

  """Player's full name"""
  fullName: String!
  id: ID!

  """Player's current injuries"""
  injuries: [LiveApiInjury]

  """Player's last name"""
  lastName: String!

  """Player's position"""
  position: String

  """Player's professional name -> first initial and last name"""
  professionalName: String!

  """Sport this player plays for"""
  sport: LiveApiSport!
}

"""
Team Spread Poll Options - PollOption with a team reference that should be displayed with point spreads
"""
type LiveApiTeamSpreadPollOption implements LiveApiPollOption & Node {
  bareId: String!

  """The ID of an object"""
  id: ID!
  teamAlignment: LiveApiTeamAlignment!
  teamResourceUri: String!
  votesCount: Int!
}

interface LiveApiTeamStanding {
  id: ID!

  """
  A formatted combination of the short record and the rank string, eg. '21-9-7, 1st Eastern'
  """
  rankAndRecordString: String

  """String representing a team's rank, eg. '1st Eastern'"""
  rankString: String

  """
  The team's win/loss/tie record eg. '21-9-7'.  This is different for each sport
  """
  shortRecord: String

  """Sport this standing relates to"""
  sport: LiveApiSport!
}

"""Object containing details related to the temperature"""
type LiveApiTemperature {
  """
  Label for the temperature forecast in the specified units. Will default to Fahrenheit if `units` not provided
  """
  label: String

  """
  Value of temperature in specified units. Will default to Fahrenheit if `units` not provided
  """
  value: Int
}

type LiveApiTennisEvent implements LiveApiEvent & LiveApiSubscribableResource & Node {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """The betworks id associated with the event"""
  betworksId: String

  """
  The betworks live id associated with the event (Betworks live events are separate entities with unique IDs)
  """
  betworksLiveId: String

  """Boolean representing whether or not tournament is doubles"""
  doubles: Boolean!

  """The tournament's end date/time"""
  endsAt: DateTime

  """
  The 'event location' object contains the location and name of stadium this event takes place
  """
  eventLocation: LiveApiEventLocation

  """The current status of the tournament"""
  eventStatus: LiveApiEventStatus!

  """
  An object containing all relevant information with respect to this event
  """
  gameInfo: LiveApiGameInfo

  """Surface type the tournament is being played on"""
  groundType: String

  """The ID of an object"""
  id: ID!

  """The 'primary' league this tennis event is a part of, e.g. ATP."""
  league: LiveApiTennisLeague

  """List of the individual tennis matches for the tournament"""
  matches(ids: [ID!]): [LiveApiTennisMatch!]!

  """Deeplink URL to this event on the media app"""
  mediaDeepLinkUrl: String!

  """Name of the tournament e.g. Barcelona Open"""
  name: String

  """Tournament prize (purse) represented as a string e.g. $1,627,500"""
  purse: String

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Rounds left in tournament"""
  roundsLeft: Int
  schedule(utcOffset: Int!): LiveApiTennisSchedule

  """Short name for tournament"""
  shortName: String

  """Boolean representing whether or not tournament is singles"""
  singles: Boolean!

  """Sport of this event"""
  sport: LiveApiSport!

  """The tournament's start date/time"""
  startsAt: DateTime

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!

  """Whether the event date is TBA or not"""
  tba: Boolean

  """Type of tournament e.g. ATP World Tour 500"""
  tournamentType: String

  """
  The 'weather forecast' object contains details on the weather at the date of
  the event e.g. forecast, wind, temperature etc.
  """
  weatherForecast: LiveApiWeatherForecast
}

enum LiveApiTennisEventStatus {
  CANCELLED
  DELAYED
  FINAL
  HALF_OVER
  IN_PROGRESS
  POSTPONED
  PRE_GAME
  SUSPENDED
  WALKOVER
  WITHDRAWN
}

type LiveApiTennisGroup {
  label: String!
  matches: [LiveApiTennisMatch!]!
}

type LiveApiTennisLeague implements LiveApiLeague & LiveApiSubscribableResource & Node {
  """
  `apiUri` should only be used to communicate with other systems that don't
  understand `resourceUri` or GraphQL's global IDs (field `id` in most types).
  """
  apiUri: String!

  """
  `id` field of object from `api.thescore.com`, useful for analytics / ads, please use `id` field otherwise
  """
  bareId: Int!

  """
  Describes the format of the league, some example values could be: team | individual | tournament
  """
  competitionType: LiveApiCompetitionType!

  """
  Daily rollover time represents the time (in UTC) at which 'current' events
  rollover to 'previous'. Events are considered 'current' up until the rollover
  time the next day.
  """
  dailyRolloverTime: String!

  """
  The full extended name of the league, for example 'National Basketball Association'
  """
  fullName: String!

  """The ID of an object"""
  id: ID!

  """A longer version of the league's name, for example 'NBA Basketball'"""
  mediumName: String!

  """
  `resourceUri` should only be used to communicate with other systems that don't
  yet understand GraphQL's global IDs (field `id` in most types).
  """
  resourceUri: String!

  """Describes whether the league is a men's or women's league"""
  sex: LiveApiSex!

  """A short version of the league's name, for example 'NBA'"""
  shortName: String!

  """Unique internal identifier for a league.  For example, 'nba'"""
  slug: String!

  """Sport this league is in"""
  sport: LiveApiSport!

  """Possible alerts to get notified for"""
  subscribableAlerts: [LiveApiSubscribableAlert!]!
}

type LiveApiTennisLineScore implements LiveApiLineScore & Node {
  """The ID of an object"""
  id: ID!
  score: Int!
  segment: Int!

  """
  If the match goes into tie break, this field will contain the tie break score for this team.
  """
  tieBreakScore: Int
}

type LiveApiTennisMatch implements LiveApiBettable & LiveApiMatch & Node {
  """
  A list of line scores representing the away/challenging team's progressing score throughout the tennis match
  """
  awayLineScores: [LiveApiTennisLineScore!]

  """Away/challenging team's games won in the current set"""
  awayScore: Int

  """Away/Challenging Team for this tennis match"""
  awayTeam: LiveApiTennisTeam

  """Away team's seed in the tournament"""
  awayTeamSeed: Int

  """The betworks id associated with the event"""
  betworksId: String

  """
  The betworks live id associated with the event (Betworks live events are separate entities with unique IDs)
  """
  betworksLiveId: String

  """Current player serving"""
  currentServer: LiveApiTennisPlayer

  """
  Simple string describing the current match being played and it's progression, e.g. In Progress - 3rd Set
  """
  description: String

  """The event the tennis match takes place in"""
  event: LiveApiTennisEvent

  """
  Generic event status.  Use `status` (on the sport specific types) for more details
  """
  eventStatus: LiveApiEventStatus! @deprecated(reason: "For now, see Live")

  """
  A list of line scores representing the home/defending team's progressing score throughout the tennis match
  """
  homeLineScores: [LiveApiTennisLineScore!]

  """Home/defending team's games won in the current set"""
  homeScore: Int

  """Home/Defending Team for this tennis match"""
  homeTeam: LiveApiTennisTeam

  """Home team's seed in the tournament"""
  homeTeamSeed: Int

  """The ID of an object"""
  id: ID!

  """The lastest available odds for the match"""
  latestOdds: LiveApiTennisOdds

  """
  Generic match status.  Use `status` (on the sport specific types) for more details
  """
  matchStatus: LiveApiEventStatus!

  """
  The type of match being played, e.g. Men's Doubles, Women's Singles etc.
  """
  matchType: String

  """A list of all available odds data for the match"""
  odds: [LiveApiTennisOdds]!

  """Round of the current match"""
  round: Int

  """
  The name of the round for the match in the tournament, e.g. Quarter Finals, Finals etc.
  """
  roundName: String

  """Current team serving"""
  servingTeam: LiveApiTennisTeam

  """Number of sets"""
  sets: Int

  """The match's start date/time"""
  startsAt: DateTime
  status: LiveApiTennisEventStatus!

  """Boolean representing whether or not match went into tie break"""
  tieBreak: Boolean!

  """The winner"""
  winner: LiveApiTennisTeam

  """
  Winning side of the match, returns either 'HOME' or 'AWAY' when present
  """
  winningAlignment: LiveApiTeamAlignment
}

type LiveApiTennisOdds implements LiveApiMatchOdds & LiveApiOdds & Node {
  """API ID for the odds (ex. 134)"""
  apiId: ID! @deprecated(reason: "For now, see Live")

  """The API URI for the odds"""
  apiUri: String!

  """
  Deep link URL for adding the away moneyline market to the betslip in theScore Bet
  """
  awayMoneylineBetslipUrl: String

  """Betworks line type code for away moneyline markets"""
  awayMoneylineLineType: LiveApiLineType

  """Money line market id for away team"""
  awayMoneylineMarketId: String

  """Money line odds for away team"""
  awayMoneylineOdds: Int

  """String formatted money line odds for away team"""
  awayMoneylineOddsString: String

  """Date odds were received"""
  date: DateTime
  favouredAlignment: LiveApiFavouredAlignment

  """Favoured team / player"""
  favouredParticipant: LiveApiTennisTeam

  """
  Deep link URL for adding the home moneyline market to the betslip in theScore Bet
  """
  homeMoneylineBetslipUrl: String

  """Betworks line type code for home moneyline markets"""
  homeMoneylineLineType: LiveApiLineType

  """Money line market id for home team"""
  homeMoneylineMarketId: String

  """Money line odds for home team"""
  homeMoneylineOdds: Int

  """String formatted money line odds for home team"""
  homeMoneylineOddsString: String

  """The ID of an object"""
  id: ID!

  """Sport these odds relate to"""
  sport: LiveApiSport!
}

type LiveApiTennisPlayer implements LiveApiPlayer & Node {
  country: LiveApiCountry

  """Player's first name"""
  firstName: String!

  """Player's full name"""
  fullName: String!

  """The ID of an object"""
  id: ID!

  """Player's current injuries"""
  injuries: [LiveApiInjury]

  """Player's last name"""
  lastName: String!

  """Player's professional name -> first initial and last name"""
  professionalName: String!

  """Sport this player plays for"""
  sport: LiveApiSport!
}

type LiveApiTennisSchedule {
  currentGroup: LiveApiTennisGroup
  event: [LiveApiTennisGroup!]!
}

type LiveApiTennisTeam implements Node {
  """
  If the game being played is doubles tennis, this is the second player on the team
  """
  doublesPlayer: LiveApiTennisPlayer

  """The ID of an object"""
  id: ID!

  """Simple boolean representing whether or not this team is a doubles team"""
  isDouble: Boolean!

  """League the team belongs to"""
  league: LiveApiTennisLeague!

  """Player on the team"""
  matchPlayer: LiveApiTennisPlayer!

  """Name of the team"""
  teamName: String!
}

"""
Text Over/Under Poll Options - PollOption with a text string that should be displayed with Over/Under odds
"""
type LiveApiTextOverUnderPollOption implements LiveApiPollOption & Node {
  bareId: String!

  """The ID of an object"""
  id: ID!
  text: String!
  votesCount: Int!
}

"""Text Poll Options - simplest PollOption with a text string"""
type LiveApiTextPollOption implements LiveApiPollOption & Node {
  bareId: String!

  """The ID of an object"""
  id: ID!
  text: String!
  votesCount: Int!
}

"""Poll Votes"""
type LiveApiVote {
  bareId: String!
  id: ID!
  poll: LiveApiPoll!
  selectedOption: LiveApiPollOption!
  voterId: String!
}

"""
Object containing details related to the forecast for the event (e.g. temperature, wind, weather)
"""
interface LiveApiWeatherForecast {
  """Short description of the weather forecast at the event"""
  condition: String

  """Full description of weather forecast at the event"""
  conditionDetails: String

  """String containing a detailed description of the forecast"""
  formattedForecast(units: LiveApiMeasurementUnit): String
  id: ID!

  """Probability of Precipitation"""
  probabilityOfPrecipitation: Int

  """Sport this forecast relates to"""
  sport: LiveApiSport!

  """
  Temperature in either Celsius or Fahrenheit. Defaults to Fahrenheit if `units` arg not provided
  """
  temperature(units: LiveApiMeasurementUnit): LiveApiTemperature

  """Object containing wind forecast details"""
  windForecast(units: LiveApiMeasurementUnit): LiveApiWindForecast
}

"""Object containing details related to wind forecast"""
type LiveApiWindForecast {
  """Average wind speed (mph)"""
  avgSpeed: Int

  """Description of wind details"""
  desc: String

  """Direction of wind"""
  direction: String

  """Maximum wind speed"""
  maxSpeed: Int

  """Minimum wind speed (mph)"""
  minSpeed: Int
}

"""A Casino Live Game Info"""
type LiveGameInfo implements Node {
  """Dealer name"""
  dealerName: String!

  """Default thumbnail url"""
  defaultThumbnailUrl(imageSize: ResizableImageSizeParams): ResizableImage!

  """Text to be displayed depending on the status of the live game"""
  formattedSeatLabel: String!

  """The ID of an object"""
  id: ID!

  """Text to be displayed on modal button"""
  modalButtonLabel: String!

  """Text to be displayed before `opensAtTimeLabel`"""
  opensAtLabel: String

  """Time to be displayed when the game is closed"""
  opensAtTimeLabel: String

  """Status of the live game"""
  status: LiveGameInfoStatus!

  """Video snapshot url"""
  videoSnapshotUrl(imageSize: ResizableImageSizeParams): ResizableImage!
}

"""Live game info statuses"""
enum LiveGameInfoStatus {
  """
  On Blackjack games when a table is full but players are still able to bet behind
  """
  BET_BEHIND

  """Game is closed"""
  CLOSED

  """Game is full"""
  FULL

  """Game is open but supports a limited amount of players"""
  OPEN_LIMITED

  """Game is open and support an unlimited amount of players"""
  OPEN_UNLIMITED
}

"""A deeplink to open the login page"""
type LoginDeepLink implements DeepLink {
  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """The path the user should be redirect after login."""
  redirectPath: String!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

type LogosBlocklist {
  """Key of the slug that clients should blocklist logos on"""
  key: String!

  """Value of the slug that blocklist applies on"""
  value: String!
}

"""
An event is made of markets - groups of betting options.
Markets can be for the entire event, a period of the event (quarter, half)
or for a specific player or team (under/over yards, under/over wins etc.)

"""
type Market {
  """Event ID for the market"""
  eventId: ID!

  """Optional extra information for the market"""
  extraInformation: String

  """Market ID"""
  id: ID!

  """Market name"""
  name: String!

  """Optional participant of the selection"""
  participant: Participant

  """Optional points of the selection"""
  points: Points

  """Selections for the market"""
  selections: [MarketSelection!]!

  """Start time of the market"""
  startTime: DateTime

  """Market selection status"""
  status: MarketStatus!

  """Market type"""
  type: MarketType!
}

"""A market card"""
union MarketCard = CombatGridMarketCard | CompactMultipleMarketCard | CricketGridMarketCard | GridMarketCard | LineSelectorMarketCard | ListMarketCard | MultipleMarketCard | OddsBoostMarketCard | ParticipantAlignedMarketCard | PlayerPropMarketCard | SimpleGridMarketCard | SoccerGridMarketCard | TennisGridMarketCard | TiledListMarketCard

"""Classification of the market for which this leg is for"""
enum MarketClassification {
  """Future"""
  FUTURE

  """Game prop"""
  GAME_PROP

  """Unknown market classification"""
  INVALID

  """Main"""
  MAIN

  """Player prop"""
  PLAYER_PROP

  """Promo"""
  PROMO
}

"""Marketplace shelf"""
type MarketplaceShelf implements Node {
  """More events deep link"""
  deepLink: DeepLink

  """Has more events flag"""
  hasMoreEvents: Boolean

  """Marketplace shelf ID"""
  id: ID!

  """Label of the shelf"""
  label: String

  """Market components"""
  marketplaceShelfChildren(
    pageType: PageType = PAGE

    """The filter by which the events in the shelf will be filtered"""
    selectedFilterId: ID = ""
  ): [MarketCard!]

  """Resource URI"""
  resourceUri: String
}

"""A betting option that a patron selects and adds to his betslip"""
type MarketSelection {
  """Market selection ID"""
  id: ID!

  """Market selection name"""
  name: SelectionName

  """Optional odds of the selection"""
  odds: Odds

  """Optional participant of the selection"""
  participant: Participant

  """Optional points of the selection"""
  points: Points

  """Raw Market Selection ID"""
  rawId: ID!

  """Market selection status"""
  status: MarketSelectionStatus!

  """Market selection type"""
  type: MarketSelectionType!
}

"""Mutation input for adding a market selection to Betslip"""
input MarketSelectionInput {
  """A market odds in a numerator/denominator format"""
  odds: OddsInput!

  """ID for bet selection"""
  selectionId: ID!

  """Share ID if market selection was consumed from a shared bet"""
  shareId: String
}

"""Market Selection metadata"""
type MarketSelectionMetadata {
  """The app variant the selection was added from"""
  app: App!

  """Market selection ID"""
  marketSelectionId: ID!

  """The platform variant the selection was added from"""
  platformVariant: PlatformVariant! @deprecated(reason: "Deprecated, please use app.")

  """
  The resource_uri associated with the market selection. Null if none associated
  """
  resourceUri: String

  """
  The share_id associated with the market selection if the market was added from a shared bet. Null if none associated
  """
  shareId: String
}

"""Market status (set by Vegas)"""
enum MarketSelectionStatus {
  """Market selection is closed; wagers cannot be placed on this selection"""
  CLOSED

  """
  Market selection is finished; wagers cannot be placed on this selection
  """
  FINISHED

  """
  Market selection is hidden; patrons in this jurisdiction cannot wager on it
  """
  HIDDEN

  """Unknown market selection status"""
  INVALID

  """Market selection is open; wagers can be placed on this selection"""
  OPEN
}

"""Market selection type (set by Vegas)"""
enum MarketSelectionType {
  """Moneyline wager placed on the away team to win"""
  AWAY_MONEYLINE

  """Point Spread wager placed on the away team to cover"""
  AWAY_SPREAD

  """Wager placed that the event ends as a draw"""
  DRAW

  """Wager that a specific statistic ends up exactly at the value specified"""
  EXACTLY

  """Moneyline wager placed on the home team to win"""
  HOME_MONEYLINE

  """Point Spread wager placed on the home team to cover"""
  HOME_SPREAD

  """Selection is inactive"""
  INACTIVE

  """Unknown market selection type"""
  INVALID

  """Selection is part of a list of other selections"""
  LIST

  """Wager placed on the over for a given statistic"""
  OVER

  """Wager placed on the under for a given statistic"""
  UNDER
}

"""Market status (set by Vegas)"""
enum MarketStatus {
  """Market is closed and no longer available to be wagered on"""
  CLOSED

  """
  Event market is associated to is over and markets are no longer available to be wagered on
  """
  FINISHED

  """Markets are hidden to all patrons in this jurisdiction"""
  HIDDEN

  """Unknown market status"""
  INVALID

  """Market is open for wagers to be placed"""
  OPEN
}

"""Market type (set by Vegas)"""
enum MarketType {
  """Unknown market type"""
  INVALID

  """list of market selections"""
  LIST

  """Moneyline market, ex: winner of an event"""
  MONEYLINE

  """Point spread market, ex: team to cover point spread"""
  SPREAD

  """Three way moneyline, typically home, draw and away"""
  THREE_WAY_MONEYLINE

  """Three way point spread market"""
  THREE_WAY_SPREAD

  """Three way total market"""
  THREE_WAY_TOTAL

  """Totals market, e.g over under total points"""
  TOTAL
}

type MenuShelves {
  """A collection of items containing account specific details"""
  accountMenuShelf: AccountMenuShelf!

  """A collection of items containing reward details"""
  awardsMenuShelf: AwardsMenuShelf!
}

"""Money"""
type Money {
  """Amount in cents"""
  amount: Int!

  """Currency"""
  currency: CurrencyCode!

  """Formatted amount TODO: Does client want this over currency + amount?"""
  formattedAmount: String!
}

union MoneyOrTierPoints = Money | TierPoints

"""
A list of markets with market labels outside and market selections beside the market label
"""
type MultipleMarketCard {
  """See all deep link"""
  deepLink(pageType: PageType = PAGE): DeepLink

  """Vegas Event"""
  fallbackEvent: Event!

  """Id"""
  id: ID!

  """
  Parlay Plus flag to indicate this card has a market eligible to parlay plus
  """
  isParlayPlusEligible: Boolean!

  """Markets"""
  markets(pageType: PageType = PAGE): [Market!]!

  """ID without namespace"""
  rawId: ID!
}

"""Describes a NetEnt casino game launch result"""
type NetentLaunchCasinoGameResult implements LaunchCasinoGameResult {
  """The embedded redirect url, will be null if request is invalid or fails"""
  embeddedRedirectUrl: String

  """A list of errors on failure, will be null after a success"""
  errors: [LaunchCasinoGameMutationError!]

  """The game inclusion HTML, will be null if request is invalid or fails"""
  gameInclusionHtml: String

  """The game slug"""
  gameSlug: String!

  """
  The session ID related to the game, will be null if request is invalid or fails
  """
  sessionId: String
}

interface Node {
  """The ID of the object."""
  id: ID!
}

"""Odds"""
type Odds {
  """Odds denominator"""
  denominator: Int!

  """Formatted odds string"""
  formattedOdds(oddsFormat: OddsFormat = AMERICAN): String!

  """Odds numerator"""
  numerator: Int!
}

"""A single odd boosted market"""
type OddsBoostMarketCard {
  """Vegas Event"""
  fallbackEvent: Event!

  """Id"""
  id: ID!

  """
  Parlay Plus flag to indicate this card has a market eligible to parlay plus
  """
  isParlayPlusEligible: Boolean!

  """Market"""
  market(pageType: PageType = PAGE): Market

  """ID without namespace"""
  rawId: ID!
}

"""How the odds are formatted"""
enum OddsFormat {
  """American ex: '+120'"""
  AMERICAN

  """Euro ex: '2.20'"""
  EURO
}

"""Odds"""
input OddsInput {
  """Odds denominator"""
  denominator: Int!

  """Odds numerator"""
  numerator: Int!
}

"""A deep link to open betslip on TSB"""
type OpenBetslipOnTsbDeepLink implements DeepLink {
  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """Tab that appear on a betslip"""
  tab: BetslipTab!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

"""
Object defines the Organization within the Competition - NFL, NHL, CFL, ATP etc.
"""
type Organization {
  """Organization ID"""
  id: ID!

  """Organization name, ex: United States"""
  name: String!

  """Sports Core's participant identifier"""
  resourceUri: String

  """Organization slug, ex: us"""
  slug: String!
}

"""A page"""
type Page {
  """
  Given this page deep link returns the type of the page to be used in analytics
  """
  analyticsType: AnalyticsType

  """Competition slug"""
  competitionSlug: String

  """Page deep link"""
  deepLink: DeepLink!

  """Page description"""
  description: String

  """ID of a page"""
  id: ID!

  """Shelf containing the main classicfication markets. Event Pages only"""
  mainMarketplaceShelf: MarketplaceShelf

  """Organization slug"""
  organizationSlug: String

  """List of all page children"""
  pageChildren: [Section!]!

  """List of all page headers"""
  pageHeaders: [PageHeader!]

  """Sport slug"""
  sportSlug: String

  """Page title"""
  title: String

  """Type of page the user is on currently"""
  type: PageType!
}

"""A page header"""
union PageHeader = CompetitionDetailsHeader | EventDetailsHeader

type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

enum PageType {
  """A market card page with a single market card to show all markets"""
  MARKET_CARD_PAGE

  """A normal marketplace page with cards showing reduced markets"""
  PAGE
}

"""A menu item that may contain many children menu items"""
type ParentAccountMenuItem implements AccountMenuItem {
  """Items nested under this menu item"""
  children: [AccountMenuItem!]

  """An optional icon to display"""
  icon(
    """Image size params to resize icon"""
    imageSize: ResizableImageSizeParams = {maxHeight: 1024, maxWidth: 1024}
  ): ResizableImage

  """Label of the item"""
  label: String!
}

"""A player or team taking part in an event."""
type Participant {
  """Abbreviation of the Participant"""
  abbreviation: String

  """Name of the participant in Vegas"""
  fullName: String!

  """Participant ID"""
  id: ID!

  """Short name of the participant in Vegas"""
  mediumName: String!

  """The part of the short name in Vegas after the abbreviation"""
  name: String

  """Sports Core's participant identifier"""
  resourceUri: String

  """The abbreviation at the beginning of the short name in Vegas"""
  shortName: String
}

"""A single market with market selections split by participant"""
type ParticipantAlignedMarketCard {
  """Vegas Event"""
  fallbackEvent: Event!

  """Id"""
  id: ID!

  """
  Parlay Plus flag to indicate this card has a market eligible to parlay plus
  """
  isParlayPlusEligible: Boolean!

  """Markets"""
  market(pageType: PageType = PAGE): Market

  """ID without namespace"""
  rawId: ID!
}

"""Participant Alignment (home or away)"""
enum ParticipantAlignment {
  """Away team"""
  AWAY

  """Home team"""
  HOME

  """Invalid"""
  INVALID
}

"""Patron analytics type"""
type PatronAnalytics {
  """Determines whether the user has any available bonus"""
  tsbAvailableBonus: Boolean!

  """Determines whether the user has placed any cash wagers on the SLOTS"""
  tsbCasinoSlots: Boolean!

  """Determines whether the user has placed a casino cash wager"""
  tsbCasinoWager: Boolean!

  """Determines whether the user is on the promotions deny list"""
  tsbDenyList: Boolean!

  """Patron identity ID"""
  tsbIdentityId: String!

  """Determines whether the user has placed a parlay cash bet"""
  tsbParlayBet: Boolean!

  """Determines whether the user has placed a sportsbook cash bet"""
  tsbSportsbookBet: Boolean!
}

"""Patron set amount type"""
enum PatronSetAmountType {
  """Bet"""
  BET

  """Not Set"""
  NOT_SET

  """Win"""
  WIN
}

"""Data needed to integrate clients with Payments"""
type PaymentsAttributes {
  """Payments base URL"""
  baseUrl: String!

  """Payments API WebSocket Secure URL"""
  websocketUrl: String!
}

type PennplayBalance {
  balance: MoneyOrTierPoints
  tooltip: PennplayTooltip
}

type PennplayBalances {
  """The patron's MyCash balance"""
  mycash: PennplayBalance

  """The patron's playable MyCash balance"""
  mycashPlayableCredit: PennplayBalance

  """The next tier from the patron's current tier"""
  nextTierName: PennplayTierNameType

  """The patron's needed points to advance to the next tier"""
  pointsToNextTier: PennplayBalance

  """The points bounds of the patron's current PennPlay tier"""
  tierBounds: PennplayTierBounds

  """The patron's current tier name"""
  tierName: PennplayTierNameType

  """The patron's current tier points"""
  tierPoints: PennplayBalance
}

"""Represents the current patron's Penn Play details"""
type PennplayDetails {
  """The patron's various PennPlay balances"""
  balances: PennplayBalances

  """The patron's MyChoice ID"""
  mychoiceId: String

  """The ways to redeem PennCash"""
  pennCashRedemptionMethods: PennplayTooltip

  """A list of methods for earning PennPlay tier points"""
  pointsEarningMethods: PennplayTooltip

  """The benefits of the patron's current PennPlay tier"""
  tierBenefits: PennplayTooltip
}

"""Represents the lower and upper points bounds of a PennPlay tier"""
type PennplayTierBounds {
  """The lower points bound of the tier"""
  lowerBound: Int

  """The upper points bound of the tier"""
  upperBound: Int
}

"""Enum of the different Penn Play tiers"""
enum PennplayTierNameType {
  """Advantage tier"""
  ADVANTAGE

  """Elite tier"""
  ELITE

  """Owners Club tier"""
  OWNERS_CLUB

  """Play tier"""
  PLAY

  """Preferred tier"""
  PREFERRED
}

type PennplayTooltip {
  """The list of entries in the tooltip"""
  lineItems: [InformationLineItem!]!

  """The title of the tooltip"""
  title: String
}

"""Describes a PGS casino game launch result"""
type PgsLaunchCasinoGameResult implements LaunchCasinoGameResult {
  """The embedded redirect url, will be null if request is invalid or fails"""
  embeddedRedirectUrl: String

  """A list of errors on failure, will be null after a success"""
  errors: [LaunchCasinoGameMutationError!]

  """The game inclusion HTML, will be null if request is invalid or fails"""
  gameInclusionHtml: String

  """The game slug"""
  gameSlug: String!

  """
  The session ID related to the game, will be null if request is invalid or fails
  """
  sessionId: String
}

"""A deep link to dial a number in the device's default phone app"""
type PhoneNumberDeepLink implements DeepLink {
  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

"""Object containing details of an open or settled bet"""
type PlacedBet {
  """Sum of all bet amounts"""
  betAmount: Money!

  """Sum of all cashout amounts"""
  cashoutAmount: Money

  """When the bet was closed"""
  closedAt: DateTime

  """Free bet identifier"""
  freeBetId: ID

  """Unique identifier for this bet"""
  id: ID!

  """Groups the legs based on the event they are in"""
  legEventGroupings: [LegEventGrouping!]!

  """Legs of the bet"""
  legs: [Leg!]!

  """Total number of legs associated to the bet"""
  numLegs: Int!

  """Outcome of the bet"""
  outcome: BetOutcome!

  """
  Sum of all potential return amounts, less free bet amount. Zero if bet status is open
  """
  payoutAmount: Money!

  """When the bet was placed"""
  placedAt: DateTime!

  """Sum of all potential return amounts, less free bet amount"""
  potentialPayoutAmount: Money!

  """
  Unnamespaced identifier for this bet. Used for display purposes & Cashout
  """
  rawId: String!

  """Whether the bet has been regraded"""
  regraded: Boolean!

  """Deep link to take the patron to shareable bet view"""
  shareableDeepLink: TsbDeepLink

  """Status of the bet"""
  status: BetStatus!

  """Point margin by which bet legs are teased"""
  teaserPoints: Points

  """Total odds of the bet"""
  totalOdds: Odds!

  """Type of bet"""
  type: BetType!

  """Sum of all potential winning amounts"""
  winAmount: Money
}

type PlacedBetConnection {
  edges: [PlacedBetEdge]

  """Copy for empty state body"""
  emptyStateBody: String!

  """Copy for empty state heading"""
  emptyStateHeading: String!
  pageInfo: PageInfo!

  """Whether the filter should be displayed for this collection"""
  showFilter: Boolean!
}

type PlacedBetEdge {
  cursor: String
  node: PlacedBet
}

"""Platform of client"""
enum Platform {
  """Android"""
  ANDROID

  """iOS"""
  IOS

  """Web"""
  WEB
}

"""Supported platform variants"""
enum PlatformVariant {
  """Barstool Sportsbook"""
  BSSB

  """Invalid app variant"""
  INVALID

  """theScore Bet"""
  TSB

  """theScore Media"""
  TSM
}

type PlayerPropMarketCard {
  """Id"""
  id: ID!

  """
  Parlay Plus flag to indicate this card has a market eligible to parlay plus
  """
  isParlayPlusEligible: Boolean!

  """Markets"""
  markets(pageType: PageType = PAGE): [Market!]!

  """Participant object (player)"""
  participant: Participant

  """ID without namespace"""
  rawId: ID!
}

"""Points"""
type Points {
  """
  The representation of points as a decimal for any logic or comparison required
  """
  decimalPoints: Float!

  """
  Formatted representation of points as a String to be displayed to users
  """
  formattedPoints: String!
}

"""A poll"""
type Poll {
  """Bare ID of the poll"""
  bareId: String!

  """Event node"""
  event: Event

  """ID of the poll"""
  id: ID!

  """Poll options"""
  options: [PollOption!]

  """Question"""
  question: String!

  """Resource Uri of the event"""
  resourceUri: String!

  """Status of the poll (OPEN/CLOSED)"""
  status: String!

  """Total count of votes"""
  votesCount: Int!
}

"""Poll option"""
type PollOption {
  """Alignment (Home/Away)"""
  alignment: String

  """Bare id of the option"""
  bareId: String!

  """Id of the option"""
  id: String!

  """Line type (mla, mlh, psa, psh, tlo, tlu)"""
  lineType: String!

  """Market"""
  market: Market

  """Resource URI for the option"""
  resourceUri: String

  """Boolean indicating if the option has been selected by the current user"""
  selectedByCurrentUser: Boolean!

  """Text"""
  text: String

  """Votes count for the option"""
  votesCount: Int!
}

"""A polls carousel"""
type PollsCarousel {
  """Polls Carousel ID"""
  id: ID!

  """Polls Carousel Label"""
  label: String!

  """List of polls"""
  pollsCarouselChildren: [Poll!]!
}

"""
PreStartup object holding relevant data required by clients prior to starting up
"""
type PreStartup {
  """Collection of all application metadata during launch"""
  privacyPolicy: DeepLink!
}

"""Represents a promotion"""
type Promotion {
  """Label to display on app launch promotion modals"""
  appLaunchBadgeLabel: String

  """Deep link for this promotion - For loading promotion details"""
  deepLink: DeepLink!

  """Description of the promotion"""
  description: String

  """Timestamp of when this promotion ends"""
  endsAt: DateTime

  """Enrollment status of a user"""
  enrollmentStatus: EnrollmentStatus!

  """Promotion id"""
  id: ID!

  """Image url of the promotion"""
  image(imageSize: ResizableImageSizeParams = {maxHeight: 1024, maxWidth: 1024}): ResizableImage

  """Primary Call to Action based on the platform"""
  primaryCta: String

  """Primary Call to Action deep link"""
  primaryCtaDeepLink: DeepLink

  """Primary Call to Action link"""
  primaryCtaLink: String

  """Timestamp of when this promotion was published"""
  publishedAt: DateTime!

  """Secondary Call to Action based on the platform"""
  secondaryCta: String

  """Secondary Call to Action deep link"""
  secondaryCtaDeepLink: DeepLink

  """Secondary Call to Action link"""
  secondaryCtaLink: String

  """Short description of the promotion"""
  shortDescription: String

  """Timestamp of when this promotion starts"""
  startsAt: DateTime!

  """URL for the terms of use"""
  termsOfUse: String

  """Title of the promotion"""
  title: String!
}

"""A deep link for an individual promotion"""
type PromotionDeepLink implements DeepLink {
  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """Promotion ID - Used against the promotion query"""
  promotionId: ID!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

"""A deep link for patrons to enroll on a promotion"""
type PromotionEnrollmentDeepLink implements DeepLink {
  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """Promotion ID - Used against the promotion query"""
  promotionId: ID!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

"""Result of the promotion enrollment mutation with errors"""
type PromotionEnrollmentResult {
  """A list of errors on failure"""
  errors: [String!]!

  """Boolean indicating if the enrollment was successful or not"""
  success: Boolean!
}

"""A deep link for all available promotions for a patron"""
type PromotionListDeepLink implements DeepLink {
  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """The promotions available to the current patron"""
  promotions: [Promotion!]!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

"""A promotion carousel"""
type PromotionsCarousel implements Node {
  """Deeplink to a list of all Promotions"""
  deepLink: DeepLink!

  """Promotion carousel ID"""
  id: ID!

  """Carousel label"""
  label: String

  """List of promotion components"""
  promotionsCarouselChildren: [Promotion!]!

  """Promotions RG Copy"""
  rgCopy: String

  """Terms URL"""
  termsUrl: String

  """WebDeepLink that links to a page for all promotions offered"""
  webDeepLink: WebDeepLink!
}

"""Representing regional metadata on this Sportsbook"""
type RegionalMetadata {
  """A list of country metadata currently supported by theScoreBET."""
  availableCountries: [CountryMetadata!]! @deprecated(reason: "Deprecated, will return empty list.")

  """Current server country code"""
  currentCountryCode: String!

  """Current server region code"""
  currentRegionCode: String!

  """Current server region code in human readable format for display"""
  currentRegionCodeLabel: String!

  """IP address from Cloudflare"""
  ipAddress: String

  """Polling frequency for IP address check"""
  ipAddressCheckTimerSeconds: Int!

  """City from Cloudflare"""
  ipAddressCity: String

  """Country Code from Cloudflare"""
  ipAddressCountryCode: String

  """Region Code from Cloudflare"""
  ipAddressRegionCode: String

  """
  Short region code from Cloudflare, does not contain prepended country code.
  """
  ipAddressShortRegionCode: String

  """Determines if user is in an operating state to wager"""
  validRegion: Boolean!

  """List of valid regions in the edge country."""
  validRegions: [String!]!
}

"""Object for an image that can be resized by the clients"""
type ResizableImage {
  """Android hdpi (1.5x)"""
  androidHdpi: String!

  """Android mpdi (1x)"""
  androidMdpi: String!

  """Android xhdpi (2x)"""
  androidXhdpi: String!

  """Android xxhdpi (3x)"""
  androidXxhdpi: String!

  """Android xxxhdpi (4x)"""
  androidXxxhdpi: String!

  """
  The exact height of a fixed aspect ratio image. Will be null when aspect ratio is not fixed.
  """
  customHeight: Int

  """URL of the image at custom size, defaults to 1024w x 1024h"""
  customSize: String!

  """
  The exact width of a fixed aspect ratio image. Will be null when aspect ratio is not fixed.
  """
  customWidth: Int

  """iOS @1x (1x)"""
  ios1x: String!

  """iOS @2x (2x)"""
  ios2x: String!

  """iOS @3x (3x)"""
  ios3x: String!

  """The raw image"""
  rawImage: String!
}

"""Object for an image that can be resized by the clients"""
type ResizableImageDeepLink implements DeepLink {
  """Android hdpi (1.5x)"""
  androidHdpi: String!

  """Android mpdi (1x)"""
  androidMdpi: String!

  """Android xhdpi (2x)"""
  androidXhdpi: String!

  """Android xxhdpi (3x)"""
  androidXxhdpi: String!

  """Android xxxhdpi (4x)"""
  androidXxxhdpi: String!

  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """
  The exact height of a fixed aspect ratio image. Will be null when aspect ratio is not fixed.
  """
  customHeight: Int

  """URL of the image at custom size, defaults to 1024w x 1024h"""
  customSize: String!

  """
  The exact width of a fixed aspect ratio image. Will be null when aspect ratio is not fixed.
  """
  customWidth: Int

  """iOS @1x (1x)"""
  ios1x: String!

  """iOS @2x (2x)"""
  ios2x: String!

  """iOS @3x (3x)"""
  ios3x: String!

  """The raw image"""
  rawImage: String!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

"""Control image's dimensions"""
input ResizableImageSizeParams {
  """Maximum height. Defaults to 1024."""
  maxHeight: Int = 1024

  """Maximum width. Defaults to 1024."""
  maxWidth: Int = 1024

  """
  Use this arg if you need the exact height and width of an image. Values greater than 1024 will be reduced to 1024.
  """
  width: Int
}

"""Object holding relevant responsible gaming fields"""
type ResponsibleGaming {
  """Responsible Gaming Account history disclaimer"""
  accountHistoryDisclaimer: Disclaimer

  """iGaming 19+ logo"""
  igoAgeLogo(
    """Image size params to resize iGoAgeLogo"""
    imageSize: ResizableImageSizeParams = {maxHeight: 1024, maxWidth: 1024}
  ): ResizableImage

  """Deep link for the iGaming logo"""
  igoDeepLink: WebDeepLink

  """iGaming logo"""
  igoLogo(
    """Image size params to resize iGoLogo"""
    imageSize: ResizableImageSizeParams = {maxHeight: 1024, maxWidth: 1024}
  ): ResizableImage

  """iGaming Ontario inverted logo(blue) if region is CA-ON nil otherwise"""
  igoLogoInverted(imageSize: ResizableImageSizeParams = {maxHeight: 1024, maxWidth: 1024}): ResizableImage

  """Resizable Image for responsible gaming based on current region"""
  responsibleGamingIcon(
    """Image size params to resize responsibleGamingImage"""
    imageSize: ResizableImageSizeParams = {maxHeight: 1024, maxWidth: 1024}
  ): ResizableImage

  """Deep Link to responsible gaming section of account menu"""
  responsibleGamingMenuDeepLink: AccountMenuItemDeepLink!

  """
  Disclaimer highlighting responsible gaming and deposits for current region
  """
  restrictedBalancesDepositDisclaimer: Disclaimer

  """
  Disclaimer highlighting responsible gaming and withdrawals for current region
  """
  restrictedBalancesWithdrawalDisclaimer: Disclaimer
}

"""
Defines an interface for items that can appear in the ResponsibleGamingShelf
"""
interface ResponsibleGamingItem {
  """Label of the item"""
  label: String!
}

type ResponsibleGamingItemConnection {
  edges: [ResponsibleGamingItemEdge]
  pageInfo: PageInfo!
}

type ResponsibleGamingItemEdge {
  cursor: String
  node: ResponsibleGamingItem
}

"""Responsible Gaming Item displaying a patron's RG Limit"""
type ResponsibleGamingLimit implements ResponsibleGamingItem {
  """The limit amount set by the user"""
  amount: Money

  """The end date of set limit"""
  end: DateTime

  """Indicates if this is the current active limit set by the user"""
  isActive: Boolean!

  """Label of the item"""
  label: String!

  """The start date of set limit"""
  start: DateTime!

  """The time limit set by the user"""
  timeLimit: String
}

"""A responsible gaming shelf"""
type ResponsibleGamingShelf implements Node {
  """A list of only the current active limits set by a user"""
  activeItems: [ResponsibleGamingItem!]!

  """A list of all the limits ever set by a user"""
  allItems(after: String, first: Int): ResponsibleGamingItemConnection

  """The ID of an object"""
  id: ID!

  """The label for the shelf"""
  label: String!
}

"""A deep link to a responsible gaming shelf"""
type ResponsibleGamingShelfDeepLink implements DeepLink {
  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """The responsible gaming shelf ID to deepLink to"""
  responsibleGamingShelf: ResponsibleGamingShelf!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

"""Return to player information"""
type ReturnToPlayer {
  """Main Label for the Overlay."""
  label: String!

  """Percent total to be displayed on game card."""
  percent: Float!

  """Main text for the overlay"""
  text: String!
}

type RootMutationType {
  """
  Accepts the changes that happened to market selections or leg event groupings on betslip
  """
  betslipAcceptChanges(
    """List of market selections we are acknowledging market changes on"""
    marketSelections: [MarketSelectionInput!]!

    """List of leg event groupings we are acknowledging changes on"""
    sameGameParlayLegs: [SameGameParlayLegInput!]!
  ): Betslip

  """Accepts the changes that happened to market selections on betslip"""
  betslipAcceptMarketSelectionChanges(
    """List of market selections we are acknowledging market changes on"""
    input: [MarketSelectionInput!]!
  ): Betslip

  """
  Mutation for clients to add a given list of draft bets
  to the current logged in Patron
  
  This will clean any existing items in the patron betslip
  (mostly used to transfer anonymous betslips to an authenticated patron)
  
  """
  betslipAddDraftBets(
    """List of draftBets user wants to place"""
    draftBets: [DraftBetInput!]!

    """
    When set to true merge any existing betslip with the given draft bet, when
    false replace everything with the given list of draft bets.
    """
    mergeBetslip: Boolean!
  ): Betslip

  """Adds a market selecetion to betslip"""
  betslipAddMarketSelection(
    """
    Input needed in order to sucessfully add a market selection to your Betslip
    """
    input: MarketSelectionInput!
  ): Betslip

  """
  Sets a draft bets market selection buy points via replacing the market selection
  It changes the draft leg's market selection by adjusting the points
  
  """
  betslipAdjustMarketSelectionPoints(
    """Market selection id with updated buy points"""
    newMarketSelectionId: ID!

    """Market selection we are trying to buy points on"""
    oldMarketSelectionId: ID!
  ): Betslip

  """Buy points on a specified draft bet"""
  betslipBuyTeaserPoints(
    """Draft bet to buy points on"""
    draftBetId: ID!

    """Expected odds of the bought points"""
    odds: OddsInput!

    """Amount of points we are trying to buy"""
    points: Float!
  ): Betslip

  """Clears a betslip of all selections"""
  betslipClear: Betslip

  """Clears a betslip of all teaser-eligible selections"""
  betslipClearTeaserSelections: Betslip

  """
  Mutation for clients to place a Bet
  Will attempt to place all draft Bets given by the client
  
  Any that failed to be placed will remain in the betslip on the response
  
  """
  betslipPlaceBets(
    """List of draftBets user wants to place"""
    bets: [DraftBetInput!]!
  ): BetslipPlaceBetsResult

  """Removes a market selection from the betslip"""
  betslipRemoveMarketSelection(
    """Input needed to define the selection to remove from Betslip"""
    selectionId: ID!
  ): Betslip

  """Sets a draft bet's win or bet amount in a betslip"""
  betslipSetDraftBetAmount(
    """
    Amount being set in cents on the draft bet, use 0 to clear the bet and win amount fields
    """
    amount: Int

    """ID of the draft bet the win amount is being set on"""
    draftBetId: ID!

    """What field is the user typing in?"""
    field: SetDraftBetAmountField = BET
  ): Betslip

  """Set a free bet on a draft bet"""
  betslipSetFreeBet(
    """The draft bet to add the free bet to"""
    draftBetId: ID!

    """Free Bet ID being added to a draft bet, use null to clear free bet"""
    freeBetId: ID
  ): Betslip

  """Triggers a cashout mutation"""
  cashoutTrigger(input: CashoutTriggerInput!): CashoutTriggerResult @deprecated(reason: "This input will be deprecated in favour of 'fullCashoutTrigger' to support unabbreviated cashout types")

  """Create or update a subscription"""
  createOrUpdateConnectSubscriptions(input: LiveApiCreateOrUpdateConnectSubscriptionsInput!): LiveApiCreateOrUpdateConnectSubscriptionsPayload

  """Delete a subscription"""
  deleteConnectSubscriptions(input: LiveApiDeleteConnectSubscriptionsInput!): LiveApiDeleteConnectSubscriptionsPayload

  """Triggers a cashout mutation with unabbreviated cashout types"""
  fullCashoutTrigger(input: FullCashoutTriggerInput!): CashoutTriggerResult

  """Mutation to check if the client is in an authorized location"""
  geoComplyAuthorizeGeoPacket(
    """GeoPacket received from GeoComply"""
    geoPacket: String!
  ): GeoComplyAuthorizeGeoPacketResult

  """Mutation to re-fetch geocomply licence on clients"""
  geoComplyForceRefetchLicense(
    """
    Stored licence key on client (usually obtained using `geo_comply_get_api_token` mutation)
    """
    currentLicenseKey: String!
  ): GeoComplyForceRefetchLicenseResult

  """Mutation to allow a client to request a valid GeoComply License Key"""
  geoComplyGetApiToken(
    """Device's latitude and longitude data"""
    geolocationParams: GeolocationParams!
  ): GeoComplyGetApiTokenResult

  """Increment the user's time in app"""
  heartbeat(
    """Number of seconds since last heartbeat"""
    elapsedSeconds: Int!
  ): HeartbeatMutationResult

  """Launch a Casino game"""
  launchCasinoGame(
    """Determines if a game should be launched as a demo game"""
    demo: Boolean = false

    """Game slug"""
    gameSlug: String!
  ): LaunchCasinoGameResult

  """Triggers an enrollment (ie. 'opt-in') in a given promotion."""
  promotionEnrollment(
    """
    The unique identifier for a promotion that the patron wishes to enroll in
    """
    promotionId: ID!
  ): PromotionEnrollmentResult

  """Mutation to update user preferences"""
  setUserPreferences(
    """
    When true, user won't be notified about odds change for their current betslip
    """
    autoAcceptOddsChanges: Boolean!
  ): UserPreferenceMutationResult

  """Mutation to share a placed bet"""
  shareBet(
    """
    Input including the targeted bet ID and details which the patron has selected
    """
    input: ShareBetInput!
  ): ShareBetResult

  """Sync device with the push notification provider (Synchronous)"""
  syncPushDevice(
    """The device's APNs token (iOS only)"""
    apnsToken: String

    """The device's FCM registration token"""
    fcmRegistrationToken: String

    """The device's install id"""
    installId: String!

    """If push notifications are enabled"""
    pushEnabled: Boolean
  ): SyncPushDeviceResult

  """
  Sync device push preferences with notification provider.
             Can only happen after a device has been previously synced
  """
  syncPushPreferences(
    """The device's install id"""
    installId: String!

    """A JSON object representing device's push preferences"""
    pushPreferences: Json!
  ): SyncPushPreferencesResult

  """Mutation to vote in polls"""
  voteInPoll(
    """ID of poll"""
    pollId: ID!

    """Option ID of poll"""
    pollOptionId: ID!
  ): Vote
}

type RootQueryType {
  """Patron's account"""
  account: Account!

  """Patron's account history"""
  accountHistory: AccountHistory!

  """Patron's account menu items"""
  accountMenu: AccountMenu!

  """Queries awards panel"""
  awardsPanel: AwardsPanel!

  """Fetch data for the bet history page"""
  betHistoryPage(
    """The BetHistoryPage section ID. Open or settled"""
    id: ID
  ): BetHistoryPage

  """The current patron's betslip"""
  betslip: Betslip

  """List all open bet cash out information"""
  cashouts: [Cashout!]!

  """Bet casino menu"""
  casinoMenu: CasinoMenu!

  """Namespaces data specific to the current user"""
  currentUser: LiveApiCurrentUser

  """Queries a DeepLink from a path"""
  deepLink(path: String!): DeepLink

  """Embedded content"""
  embeddedContent(
    """Promotion filter params"""
    promotion: EmbeddedPromotionInput!
  ): EmbeddedContent

  """The promotions to be displayed on the home screen"""
  homeScreenPromotions: [Promotion!]

  """The promotion to be displayed on the app loading screen"""
  landingPagePromotion: Promotion

  """Main Page Markets"""
  mainMarkets(
    """List of Canonical URLs of the markets to return"""
    canonicalUrl: [String!]!
  ): [MarketplaceShelf]
  node(
    """The ID of an object."""
    id: ID!
  ): Node

  """The promotion to be displayed during the onboarding process"""
  onboardingPromotion: Promotion

  """The page query"""
  page(
    """Canonical URL of the page"""
    canonicalUrl: String!
  ): Page

  """The page query by resource URI"""
  pageByResourceUri(
    """Resource URI of the page"""
    resourceUri: String!
  ): Page

  """Data around a patron's activity"""
  patronAnalytics: PatronAnalytics

  """Patron's PennPlay details"""
  pennplay: PennplayDetails!

  """The player_props query by resource URIs"""
  playerPropsByResourceUris(
    """Resource URI of the event"""
    eventResourceUri: String!

    """Resource URIs of the players"""
    playersResourceUris: [String!]!
  ): [MarketplaceShelf!]!

  """
  The PreStartup query for TSB application - has fields needed by clients before redirection
  """
  preStartup: PreStartup!

  """The promotion data representing the given promotion id"""
  promotion(
    """The id of the promotion to retrieve"""
    id: ID!
  ): Promotion

  """The promotions available to the current patron"""
  promotions: [Promotion!]

  """The promotions available to all patrons"""
  publicPromotions(regionCode: String): [Promotion!]

  """Details for the shareable bet"""
  shareableBet(
    """The URL associated with the placed bet being targeted for sharing"""
    canonicalUrl: String
  ): ShareableBet

  """Details for the shared bet"""
  sharedBet(
    """The canonical URL with the shared bet ID"""
    canonicalUrl: String!
  ): SharedBet

  """Bet sports menu"""
  sportsMenu: SportsMenu!

  """The startup query for TSB application"""
  startup(
    """Geopacket to be decrypted for region code"""
    geoPacket: String

    """When true, allows clients to manage redirects cross countries"""
    globalRedirect: Boolean = false

    """Clients current latitude, longitude and accuracy"""
    latLongParams: GeolocationParams
  ): Startup!
}

type RootSubscriptionType {
  accountBalance: Balances
  betHistory: [BetHistoryAction!]!

  """Notifications for changes to the current user's betslip"""
  betslipUpdated: Betslip!

  """Notifications for changes to the cashout amount"""
  cashoutUpdated: [Cashout!]!

  """Notifications when a Casino game in a category is updated"""
  casinoCategoryGamesUpdated(
    """Category to indicate which games to get updates from"""
    category: String!
  ): CasinoGame!

  """Notifications when a Casino category shelf is updated"""
  casinoCategoryShelfUpdated(
    """Optional Jackpot group slug"""
    jackpotGroupSlug: String
  ): CasinoCategoryShelf!

  """Notifications when a specific patron data for casino game is updated"""
  casinoGamePatronDataUpdated(
    """Game slug to indicate which game to get updates from"""
    gameSlug: String!
  ): CasinoGame!

  """Notifications when a specific Casino game is updated"""
  casinoGameUpdated(
    """Game slug to indicate which game to get updates from"""
    gameSlug: String

    """List of game slugs to indicate which games to get updates from"""
    gameSlugs: [String!]
  ): CasinoGame!

  """Notifications when a Casino jackpot is updated"""
  casinoJackpotCarouselUpdated: CasinoJackpotCarousel!

  """Notifications when a Casino jackpot is updated"""
  casinoJackpotUpdated: JackpotInfo!

  """Notifications when a Casino game in the lobby is updated"""
  casinoLobbyGamesUpdated: CasinoGame!

  """Provides updates for fallback events (Currently powered by Vegas)"""
  fallbackEventUpdated(
    """List of fallback event IDs"""
    fallbackEventIds: [ID!]!
  ): Event!

  """Provides updates for market cards"""
  marketCardUpdated(
    """List of market card IDs"""
    marketCardIds: [ID!]!
    pageType: PageType = PAGE
  ): MarketCard!

  """Provides updates for markets"""
  marketUpdated(
    """List of market IDs"""
    marketIds: [ID!]!
  ): Market!

  """Notifications when a rich event is updated"""
  richEventUpdated(
    """List of event resource URIs"""
    resourceUris: [String!]
  ): LiveApiNodeUpdate!

  """Subscription for live indicator on the Sports Menu"""
  sportsMenuUpdated: SportsMenu
}

"""Represents the input of a DraftLegEventGrouping on a DraftBet"""
input SameGameParlayLegInput {
  """List of draftLeg IDs associated with the DraftLegEventGrouping"""
  draftLegIds: [ID!]!

  """Event ID on this draftLegEventGrouping"""
  eventId: ID!

  """Odds of the draftLegEventGrouping"""
  odds: OddsInput!
}

"""Data needed to integrate clients with ScoreMedia"""
type ScoreMediaAttributes {
  """ScoreMedia base URL if Media app is not installed"""
  baseUrl: String!

  """Bet section home deep link"""
  betSectionHomeDeepLink: DeepLink!

  """Boolean representing if current user is an ecosystem user"""
  isEcosystemUser: Boolean!

  """ScoreMedia app URL if Media app is installed"""
  mediaAppUrl: String!

  """ScoreMedia promotions deep link"""
  promoMediaDeepLink: WebDeepLink!

  """Promotions term deep link"""
  promoTermsDeepLink: WebDeepLink!

  """Sportsbook based on the edge's country code"""
  sportsbook: Sportsbook!
}

type ScorePayDeepLink implements DeepLink {
  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """How clients should display this deep link"""
  displayType: ScorePayDisplayType!

  """Navigation bar title"""
  navigationBarTitle: String

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

"""The display type to point to ScorePay"""
enum ScorePayDisplayType {
  """Deposit"""
  DEPOSIT

  """Deposit when out of state"""
  DEPOSIT_OUT_OF_STATE

  """Exclude Payments Methods"""
  EXCLUDE_PAYMENT_METHODS

  """Receipt"""
  RECEIPT

  """Withdrawal"""
  WITHDRAWAL
}

"""A search result card"""
union SearchCard = CasinoLobbyCategoryCarousel | SearchResultHeadToHeadCard | SearchResultSpecialCard | SearchResultStandardCard

"""A search card with head to head markets"""
type SearchResultHeadToHeadCard {
  """Event deep link"""
  deepLink: DeepLink!

  """Card ID (Competition slug)"""
  id: ID!

  """Sports Core identifier"""
  resourceUri: String

  """Search result children"""
  searchResultChildren: [SearchResultHeadToHeadCell!]!

  """Event start time"""
  startTime: DateTime

  """Event status"""
  status: EventStatus!

  """Card title (Competition name)"""
  title: String!
}

type SearchResultHeadToHeadCell {
  """Away participant for the event"""
  awayParticipant: Participant!

  """Event ID"""
  eventId: ID!

  """Event name"""
  eventName: String!

  """Home participant for the event"""
  homeParticipant: Participant!
}

"""SearchResult Shelf"""
type SearchResultShelf {
  """Search result self ID"""
  id: ID!

  """Search result components"""
  searchResultShelfChildren: [SearchCard!]!
}

"""A search card with special markets"""
type SearchResultSpecialCard {
  """Event deep link"""
  deepLink: DeepLink!

  """Card ID (Event ID)"""
  id: ID!

  """Sports Core identifier"""
  resourceUri: String

  """Search result children"""
  searchResultChildren: [SearchResultSpecialCell!]!

  """Event start time"""
  startTime: DateTime

  """Event status"""
  status: EventStatus!

  """Card title (Event name)"""
  title: String!

  """Event Type"""
  type: EventType!
}

type SearchResultSpecialCell {
  """Event ID that the market belongs to"""
  eventId: ID!
  id: ID!

  """Market Name"""
  name: String!
}

"""A search card with standard markets"""
type SearchResultStandardCard {
  """Event deep link"""
  deepLink: DeepLink!

  """Card ID (Event ID)"""
  id: ID!

  """Sports Core identifier"""
  resourceUri: String

  """Search result children"""
  searchResultChildren: [SearchResultStandardCell!]!

  """Event start time"""
  startTime: DateTime

  """Event status"""
  status: EventStatus!

  """Card title (Event name)"""
  title: String!
}

type SearchResultStandardCell {
  """Event ID that the market belongs to"""
  eventId: ID!
  id: ID!

  """Market Name"""
  name: String!
}

"""A page section. Tab containers"""
type Section implements Node {
  """Bool indicating default section to render"""
  default: Boolean!
  displayType: SectionDisplayType!

  """Fallback child for empty sections"""
  fallbackChild: SectionFallbackChild

  """Attributes to display the filter and filter options."""
  filter: Filter

  """ID of a section"""
  id: ID!

  """Label of the section"""
  label: String!

  """List of all section children"""
  sectionChildren(
    """Filter for casino sections"""
    casinoFilter: CasinoSectionFilter
    selectedFilterId: ID
  ): [SectionChild!]!
}

"""A section child"""
union SectionChild = BettingNews | CasinoCategoryShelf | CasinoJackpotCarousel | CasinoJackpotCategoryShelf | CasinoLobbyCategoriesCarousel | CasinoLobbyCategoryCarousel | CasinoSpotlightCarousel | ChipsCarousel | DataDisclaimerCard | Drawer | FavouritesMarketplaceShelf | ImageCard | InsightsCard | MarketplaceShelf | PollsCarousel | PromotionsCarousel | SearchResultShelf | SessionCard | TickersCarousel | TsmOddsBoostShelf

"""Section display type - Used for legacy support"""
enum SectionDisplayType {
  """A generic section"""
  GENERIC

  """An Insights section used to display betting insights on TSM"""
  INSIGHTS
}

"""A secton fallback child"""
union SectionFallbackChild = EmptyStateCard

"""Segments"""
type Segment {
  """Away score for the event"""
  awayScore: Int

  """Home score for the event"""
  homeScore: Int

  """Segment number"""
  number: Int!

  """Short name"""
  shortName: String!
}

type SelectionName {
  """
  Remove duplicated values from the names where additional additional data is
  already displayed; useful in the Betslip, cleaning points
  """
  cleanName: String!

  """Default to the full name given by Vegas; Minor clean up on Totals"""
  defaultName: String!

  """Show the full name; useful in places such as BetHistory"""
  fullName: String!

  """
  Shorten the name of the selection as much as possible; useful in the marketplace so that it fits inside a selector
  """
  minimalName: String
}

"""Object holding all service related data relevant to clients"""
type ServiceAttributes {
  """Casino service attributes"""
  casino: CasinoAttributes!

  """Customer Support service attributes"""
  customerSupport: CustomerSupportAttributes!

  """GeoComply service attributes"""
  geoComply: GeoComplyAttributes!

  """Identity service attributes"""
  identity: IdentityAttributes!

  """Jumio service attributes"""
  jumio: JumioAttributes!

  """Payments service attributes"""
  payments: PaymentsAttributes!

  """ScoreMedia service attributes"""
  scoreMedia: ScoreMediaAttributes!

  """Sportsbook service attributes"""
  sportsbook: SportsbookAttributes!
}

"""Session Card"""
type SessionCard implements Node {
  """Current Time Text"""
  currentTimeText: String

  """The ID of an object"""
  id: ID!

  """Last Login Text"""
  lastLoginText: String

  """Session Time Text"""
  sessionTimeText: String
}

"""What field the user is entering a wager in"""
enum SetDraftBetAmountField {
  """User wants to wager amount directly"""
  BET

  """Compute wager based on 'win' amount"""
  WIN
}

"""A shareable bet"""
type ShareableBet {
  """List of avaliable banner images (via URL) that can be displayed"""
  bannerImageUrls: [String!]!

  """Data liability disclaimer"""
  disclaimer: Disclaimer!

  """Placed bet that can be shared"""
  placedBet: PlacedBet!

  """Collection of additional responsible gaming attributes"""
  responsibleGamingAttributes: ResponsibleGaming!

  """Responsible gaming liability disclaimer"""
  responsibleGamingDisclaimer: Disclaimer!
}

"""Input for sharing a bet"""
input ShareBetInput {
  """URL of the selected banner image to be displayed"""
  bannerImageUrl: String!

  """
  Boolean flag to determine if patron wants to display bet amount or not.
  """
  hideBetAmount: Boolean!

  """ID of the bet to share"""
  placedBetId: ID!
}

type ShareBetResult {
  """
  UUID of the shared bet entry. This is not the same as the placed bet ID
  """
  shareBetId: ID!

  """URL for the patron to share their placed bet"""
  shareBetUrl: String!

  """Default text to be populated in 3rd party apps"""
  shareText: String!
}

"""A shared bet"""
type SharedBet {
  """Selected banner image (via URL)"""
  bannerImageUrl: String!

  """Data liability disclaimer"""
  disclaimer: Disclaimer!

  """Legs eligible to be selected by patron consuming the shared bet"""
  eligibleLegs: [Leg!]!

  """Legs ineligible to be selected by patron consuming the shared bet"""
  ineligibleLegs: [Leg!]!

  """Placed bet that is shared"""
  placedBet: PlacedBet!

  """Responsible gaming liability disclaimer"""
  responsibleGamingDisclaimer: Disclaimer!
}

"""Represents a simple 2 box grid market card"""
type SimpleGridMarketCard {
  """Deep link"""
  deepLink(pageType: PageType = PAGE): DeepLink

  """Vegas Event"""
  fallbackEvent: Event!

  """Id"""
  id: ID!

  """
  Parlay Plus flag to indicate this card has a market eligible to parlay plus
  """
  isParlayPlusEligible: Boolean!

  """Markets"""
  markets(pageType: PageType = PAGE): [Market!]!

  """ID without namespace"""
  rawId: ID!

  """Live Event"""
  richEvent: Node
}

"""Soccer event statistics"""
type SoccerEventStatistics implements EventStatistics {
  """Number of away red cards"""
  awayRedCards: Int

  """Away score for the event"""
  awayScore: Int!

  """Number of home red cards"""
  homeRedCards: Int

  """Home score for the event"""
  homeScore: Int!

  """Boolean indicating whether the event is in play"""
  isInPlay: Boolean!

  """Progress for the event e.g. half + inning in baseball"""
  progress: String

  """Segments for the event e.g. innings, quarters"""
  segments: [Segment!]!
}

"""Represents a 3-5 box soccer market card"""
type SoccerGridMarketCard {
  """Deep link"""
  deepLink(pageType: PageType = PAGE): DeepLink

  """Vegas Event"""
  fallbackEvent: Event!

  """Id"""
  id: ID!

  """
  Parlay Plus flag to indicate this card has a market eligible to parlay plus
  """
  isParlayPlusEligible: Boolean!

  """Markets"""
  markets(pageType: PageType = PAGE): [Market!]!

  """ID without namespace"""
  rawId: ID!

  """Live Event"""
  richEvent: Node
}

"""
Special Event contains events not in the typical away vs home format, such as Golf
"""
type SpecialEvent implements Event {
  """Optional sports core API unique identifier"""
  apiUri: String

  """Optional away key startter (e.g. away starting pitcher)"""
  awayKeyStarter: Participant

  """Event competition ex: USA"""
  competition: Competition!

  """Optional Tsm/Tsb deep link"""
  deepLink: DeepLink

  """Optional extra information on the Event"""
  extraInformation: String

  """Optional home key startter (e.g. home starting pitcher)"""
  homeKeyStarter: Participant

  """Event ID; represented as a UUID"""
  id: ID!

  """Event name ex: Gardner-Webb RunninÂ´ Bulldogs @ Monmouth Hawks"""
  name: String!

  """Event organization ex: NFL"""
  organization: Organization!

  """participants of the special event"""
  participants: [Participant!]

  """
  The resource_uri associated with this event. Null if a rosetta key does not exist
  """
  resourceUri: String

  """
  Event slug ex: 2021-10-02-usa-gardner-webb-runnin-bulldogs-monmouth-hawks
  """
  slug: String!

  """Event sport ex: Football"""
  sport: Sport!

  """Human readable start time of event in UTC (ex: 2019-10-11T06:59:59Z)"""
  startTime: DateTime!

  """Event statistics"""
  statistics: EventStatistics

  """Status of the event ex: Pregame, Finihsed, Hidden etc."""
  status: EventStatus!

  """
  Event type - either standard (NHL / NFL game) or special (Golf / Tennis)
  """
  type: EventType!
}

"""The sport of the event being bet on, ex: football, soccer"""
type Sport {
  """Sport ID"""
  id: ID!

  """Sport name, ex: Football"""
  name: String!

  """Sports Core's participant identifier"""
  resourceUri: String

  """Sport slug, ex: football"""
  slug: String!
}

"""Sportsbooks for each region"""
enum Sportsbook {
  """BSSB"""
  BSSB

  """TSB"""
  TSB
}

"""Data needed to integrate clients with Sportsbook"""
type SportsbookAttributes {
  """Give clients a deepLink for the HomePage"""
  homePageDeepLink: TsbDeepLink!

  """Give clients a deepLink for the LivePage"""
  livePageDeepLink: TsbDeepLink!

  """Give clients a web deepLink for the Parlay Plus tool tip"""
  parlayPlusDeepLink: WebDeepLink!

  """Give clients a web deepLink for the Teaser tool tip"""
  teaserDeepLink: WebDeepLink!

  """Give web clients a footer"""
  webSportsbookFooter: WebSportsbookFooter!

  """Sportsbook API WebSocket Secure URL"""
  websocketUrl: String!
}

"""Represents the sports menu"""
type SportsMenu {
  """Sport menu items"""
  menuItems: [SportsMenuItem!]!
}

"""Represents a single sports menu item"""
type SportsMenuItem {
  """Menu deepLink action"""
  deepLink: DeepLink

  """Menu icon"""
  icon(
    """Input to define the size of the icon for the sports menu"""
    imageSize: ResizableImageSizeParams!
  ): ResizableImage

  """ID"""
  id: ID!

  """Item label"""
  label: String!

  """Live indicator"""
  live: Boolean!

  """Quantity of live events"""
  liveCount: Int!

  """Optional resource uri of the menu item"""
  resourceUri: String

  """Sub items"""
  sportsMenuItemChildren: [SportsMenuItem!]

  """Display type"""
  type: SportsMenuItemType!
}

"""Possible sports menu item types"""
enum SportsMenuItemType {
  """Label of the menu section"""
  HEADER

  """Menu item without children"""
  LEAF

  """Expandable menu item"""
  PARENT
}

"""Standard Event is a typical away team vs home team event"""
type StandardEvent implements Event {
  """Optional sports core API unique identifier"""
  apiUri: String

  """Optional away key startter (e.g. away starting pitcher)"""
  awayKeyStarter: Participant

  """Away participant of the standard event"""
  awayParticipant: Participant!

  """Event competition ex: USA"""
  competition: Competition!

  """Optional Tsm/Tsb deep link"""
  deepLink: DeepLink

  """Optional extra information on the Event"""
  extraInformation: String

  """Optional home key startter (e.g. home starting pitcher)"""
  homeKeyStarter: Participant

  """Home participant of the standard event"""
  homeParticipant: Participant!

  """Event ID; represented as a UUID"""
  id: ID!

  """Event name ex: Gardner-Webb RunninÂ´ Bulldogs @ Monmouth Hawks"""
  name: String!

  """Event organization ex: NFL"""
  organization: Organization!

  """
  The resource_uri associated with this event. Null if a rosetta key does not exist
  """
  resourceUri: String

  """
  Event slug ex: 2021-10-02-usa-gardner-webb-runnin-bulldogs-monmouth-hawks
  """
  slug: String!

  """Event sport ex: Football"""
  sport: Sport!

  """Human readable start time of event in UTC (ex: 2019-10-11T06:59:59Z)"""
  startTime: DateTime!

  """Event statistics"""
  statistics: EventStatistics

  """Status of the event ex: Pregame, Finihsed, Hidden etc."""
  status: EventStatus!

  """
  Event type - either standard (NHL / NFL game) or special (Golf / Tennis)
  """
  type: EventType!
}

"""Startup object holding all data needed during launch"""
type Startup {
  """Deeplinks unallowed for anonymous patrons"""
  anonXpBlacklistedPaths: [String!]

  """Token for anonymous user authentication"""
  anonymousToken(
    """Connect token to build the anonymous user"""
    connectToken: String
  ): String

  """Collection of all application metadata during launch"""
  applicationMetadata: ApplicationMetadata!

  """Collection of all data needed to build the launch pages"""
  launchPage: LaunchPage!

  """Collection of all regional metadata required during launch"""
  regionalMetadata: RegionalMetadata!

  """Collection of all responsible gaming attributes"""
  responsibleGaming: ResponsibleGaming!

  """Collection of all attributes to interact with internal score services"""
  serviceAttributes: ServiceAttributes!

  """Sportsbook based on the edge's country code"""
  sportsbook: Sportsbook! @deprecated(reason: "Moving to scoreMedia serviceAttributes")
}

"""Type of style to render here."""
enum StyleType {
  """Compact"""
  COMPACT

  """Normal"""
  NORMAL
}

"""Result of the sync device mutation with errors"""
type SyncPushDeviceResult {
  """A list of errors on failure"""
  errors: [String!]!

  """Boolean indicating if the sync was successful or not"""
  success: Boolean!
}

"""Result of syncing a device's push preferences"""
type SyncPushPreferencesResult {
  """A description of the error if success is false"""
  error: String

  """The device's install id"""
  installId: String!

  """Boolean indicating if the sync was successful or not"""
  success: Boolean!
}

"""Table Tennis event statistics"""
type TableTennisEventStatistics implements EventStatistics {
  """Away score for the event"""
  awayScore: Int!

  """Current server"""
  currentServer: ParticipantAlignment

  """Home score for the event"""
  homeScore: Int!

  """Boolean indicating whether the event is in play"""
  isInPlay: Boolean!

  """Progress for the event e.g. half + inning in baseball"""
  progress: String

  """Segments for the event e.g. innings, quarters"""
  segments: [Segment!]!
}

"""Represents a teaser draft bet for the Teaser section"""
type TeaserDraftBet {
  """Draft bet"""
  draftBet: DraftBet!

  """TeaserDraftBet inherits the same id used for the underlying DraftBet"""
  id: ID!

  """Sport label for Teaser Bet Football/Basketball"""
  label: String!

  """Teaser market selections mappings"""
  teaserMarketSelectionsMappings: [TeaserMarketSelectionsMapping!]!

  """Number of points bought for the teaser"""
  teaserPoints: Points!

  """Teaser points previews"""
  teaserPreviews: [TeaserPreview!]!
}

"""
Represents a mapping of a draft leg id to the associated root market selection
"""
type TeaserMarketSelectionsMapping {
  """Draft leg id"""
  draftLegId: ID!

  """Root market selection"""
  rootMarketSelection: MarketSelection!
}

"""Represents a point preview for a teaser draft bet"""
type TeaserPreview {
  """Show if teaser points preview is available for selection"""
  enabled: Boolean!

  """Buy points"""
  points: Points!

  """Draft bet's total odds if buy points selected"""
  totalOdds: Odds
}

"""Tennis event statistics"""
type TennisEventStatistics implements EventStatistics {
  """Away game score"""
  awayGameScore: Int

  """Away score for the event"""
  awayScore: Int!

  """Current server"""
  currentServer: ParticipantAlignment

  """Home game score"""
  homeGameScore: Int

  """Home score for the event"""
  homeScore: Int!

  """Boolean indicating whether the event is in play"""
  isInPlay: Boolean!

  """Progress for the event e.g. half + inning in baseball"""
  progress: String

  """Segments for the event e.g. innings, quarters"""
  segments: [Segment!]!

  """Tiebreak"""
  tiebreak: Boolean
}

"""Represents a 2 box tennis grid market card"""
type TennisGridMarketCard {
  """Deep link"""
  deepLink(pageType: PageType = PAGE): DeepLink

  """Vegas Event"""
  fallbackEvent: Event!

  """Id"""
  id: ID!

  """
  Parlay Plus flag to indicate this card has a market eligible to parlay plus
  """
  isParlayPlusEligible: Boolean!

  """Markets"""
  markets(pageType: PageType = PAGE): [Market!]!

  """ID without namespace"""
  rawId: ID!

  """Live Event"""
  richEvent: Node
}

"""A ticker card"""
type TickerCard {
  """Competition"""
  competition: Competition!

  """Deep link to the event"""
  deepLink: DeepLink!

  """Vegas Event"""
  fallbackEvent: Event!

  """Favoured alignment"""
  favouredAlignment: Alignment

  """Icon"""
  icon(
    """Image size params to resize icon"""
    imageSize: ResizableImageSizeParams!
  ): ResizableImage

  """Ticker card ID"""
  id: ID!

  """Main markets"""
  markets: [Market!]!

  """Live Event"""
  richEvent: Node
}

"""A tickers carousel"""
type TickersCarousel implements Node {
  """Ticker Carousel ID"""
  id: ID!

  """List of ticker components"""
  tickersCarouselChildren: [TickerCard!]!
}

type TierPoints {
  """The number of tier points"""
  amount: Int!
}

"""
A single market with a list of market selections tiled together. Selection labels inside bet selectors
"""
type TiledListMarketCard {
  """Number of columns"""
  columns: Int!

  """Vegas Event"""
  fallbackEvent: Event!

  """Id"""
  id: ID!

  """
  Parlay Plus flag to indicate this card has a market eligible to parlay plus
  """
  isParlayPlusEligible: Boolean!

  """Markets"""
  market(pageType: PageType = PAGE): Market

  """ID without namespace"""
  rawId: ID!
}

"""How to display the logo on the toolbar"""
enum ToolbarMode {
  """Show theScoreBET logo on the main toolbar"""
  THESCORE_BET

  """Show theScoreBET RG logo on the main toolbar"""
  THESCORE_BET_RG
}

type TooltipText {
  """The text string"""
  value: String!
}

"""A deep link to a page within the TSB app"""
type TsbDeepLink implements DeepLink {
  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """Query to be run when this deep link is clicked"""
  page: DeepLinkPage!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

"""A deep link to a section within the TSM app"""
type TsmDeepLink implements DeepLink {
  """The API URI needed for TSM clients to deep link within TSM"""
  apiUri: String

  """The media app deep link download URL (direct link)"""
  appUrl: String!

  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """The media app deep link URL (branch link)"""
  downloadUrl: String!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String
}

"""Odds boost Marketplace Shelf"""
type TsmOddsBoostShelf implements Node {
  """Deep link for all odds boost page"""
  deepLink: DeepLink

  """Odds boost Marketplace shelf ID"""
  id: ID!

  """Label of the shelf"""
  label: String

  """Market components"""
  tsmOddsBoostShelfChildren: [TsmOddsBoostShelfChild!]
}

type TsmOddsBoostShelfChild {
  """Deep link for the odds boost drawer"""
  deepLink: DeepLink

  """Event name for these boosted odds"""
  eventName: String

  """Odds boost Marketplace shelf ID"""
  id: ID!
  oddsBoostMarketCards: [OddsBoostMarketCard!]
}

"""Setting User Preference, only fields set will have values returned"""
type UserPreferenceMutationResult {
  """Updated user preferences"""
  userPreferences: UserPreferences!
}

"""User Preference"""
type UserPreferences {
  """Auto Accept Odds Changes"""
  autoAcceptOddsChanges: Boolean!
}

"""Volleyball event statistics"""
type VolleyballEventStatistics implements EventStatistics {
  """Away score for the event"""
  awayScore: Int!

  """Current server"""
  currentServer: ParticipantAlignment

  """Home score for the event"""
  homeScore: Int!

  """Boolean indicating whether the event is in play"""
  isInPlay: Boolean!

  """Progress for the event e.g. half + inning in baseball"""
  progress: String

  """Segments for the event e.g. innings, quarters"""
  segments: [Segment!]!
}

"""Poll vote"""
type Vote {
  """Bare id of the vote"""
  bareId: String!

  """Id of the vote"""
  id: ID!

  """Poll of the vote"""
  poll: Poll!

  """Selected option"""
  selectedOption: PollOption!

  """ID of the user making the vote"""
  voterId: String!
}

"""A deep link to a web URL"""
type WebDeepLink implements DeepLink {
  """Allow the user to go back?"""
  canGoBack: Boolean!

  """The unique lookup URL for a deep link"""
  canonicalUrl: CanonicalUrl!

  """Should the WebDeepLink take you outside the app"""
  externalLink: Boolean!

  """Include Tracking data for Analytics"""
  includeTracking: Boolean!

  """Navigation bar title"""
  navigationBarTitle: String

  """Send 'Authorization' header in webview?"""
  requiresAuthentication: Boolean!

  """Display Bottom Toolbar"""
  showBottomToolbar: Boolean!

  """Whether or not the deep link represents a result that actually exists"""
  valid: Boolean!

  """A web URL to be deep linked to"""
  webUrl: String!
}

"""Footer data needed for web clients to launch"""
type WebSportsbookFooter {
  """Region-specific App Logo"""
  appLogo(
    """Image size params to resize appLogo"""
    imageSize: ResizableImageSizeParams = {maxHeight: 1024, maxWidth: 1024}
  ): ResizableImage!

  """Disclaimer highlighting data liability of theScoreBet"""
  dataLiabilityDisclaimer: Disclaimer!

  """Label informing the user who theScore is licensed with"""
  licensingDisclaimer: Disclaimer!

  """List of Responsible Gaming Logos"""
  regulatorLogos(
    """Image size params to resize the logos"""
    imageSize: ResizableImageSizeParams = {maxHeight: 1024, maxWidth: 1024}
  ): [ResizableImageDeepLink!]

  """Responsible Gaming Gambling Help"""
  responsibleGamingGamblingHelpDisclaimer: Disclaimer!
}

"""Welcome modal for clients to display during the country entry flow"""
type WelcomeModal {
  """Image to display on the Welcome Modal"""
  bannerImage(
    """Image size params to resize bannerImage"""
    imageSize: ResizableImageSizeParams = {maxHeight: 1024, maxWidth: 1024}
  ): ResizableImage!

  """Body of text to display within the Welcome Modal"""
  body: String!

  """Information for the operating country based on patron's location"""
  countryMetadata: CountryMetadata!

  """Text for the primary button on the Welcome Modal"""
  primaryCta: String!

  """Text for the secondary button on the Welcome Modal"""
  secondaryCta: String!

  """Title to display on the Welcome Modal"""
  title: String!
}

